############################# Shipper #########################################
shipper:
  # The name of the shipper that publishes the network data. It can be used to group
  # all the transactions sent by a single shipper in the web interface.
  # If this options is not defined, the hostname is used.
  name:

  # The tags of the shipper are included in their own field with each
  # transaction published. Tags make it easy to group servers by different
  # logical properties.
  tags: [
    {%- if agent_tags -%}
        {%- for tag in agent_tags -%}
            "{{ tag }}"
            {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    {%- endif -%}
  ]

  # Uncomment the following if you want to ignore transactions created
  # by the server on which the shipper is installed. This option is useful
  # to remove duplicates if shippers are installed on multiple servers.
  # ignore_outgoing: true

{% if geoip_paths is not none %}
  geoip:
    paths: [
        {%- for path in geoip_paths -%}
            "{{ pb.working_dir + '/' + path }}"
            {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]
{%- endif %}

############################# Sniffer #########################################

# Select the network interfaces to sniff the data. You can use the "any"
# keyword to sniff on all connected interfaces.
interfaces:
  device: {{ iface_device|default("any") }}

# Configure which protocols to monitor and the ports where they are
# running. You can disable a given protocol by commenting out its
# configuration.
protocols:
  dns:
    ports: [{{ dns_ports|default([53])|join(", ") }}]
{% if dns_include_authorities %}    include_authorities: true{% endif %}
{% if dns_include_additionals %}    include_additionals: true{% endif %}
{% if dns_send_request %}    send_request: true{% endif %}
{% if dns_send_response %}    send_response: true{% endif %}

  http:
    ports: [{{ http_ports|default([80])|join(", ") }}]
{% if http_send_request %}    send_request: true{% endif %}
{% if http_send_response %}    send_response: true{% endif %}
{% if http_send_all_headers %}    send_all_headers: true{% endif %}
{% if http_split_cookie %}    split_cookie: true{% endif %}
{%- if http_send_headers %}
    send_headers: [
        {%- for hdr in http_send_headers -%}
                   "{{ hdr }}"
                   {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]
{%- endif %}
{% if http_real_ip_header %}    real_ip_header: "{{ http_real_ip_header }}"{% endif %}
{%- if http_include_body_for %}
    include_body_for: [
        {%- for ct in http_include_body_for -%}
                       "{{ ct }}"
                       {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]
{%- endif %}
{% if http_redact_authorization %}    redact_authorization: true{% endif %}
{%- if http_hide_keywords %}
    hide_keywords: [
        {%- for keyword in http_hide_keywords -%}
                    "{{keyword}}"
                    {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]
{%- endif %}

  memcache:
    ports: [{{ memcache_ports|default([11211])|join(", ") }}]
{% if memcache_send_request %}    send_request: true{% endif %}
{% if memcache_send_response %}    send_response: true{% endif %}
{% if memcache_parse_unknown %}    parseunknown: true{% endif %}
{% if memcache_max_values %}    maxvalues: {{ memcache_max_values }}{% endif %}
{% if memcache_udp_transaction_timeout %}    udptransactiontimeout: {{ memcache_udp_transaction_timeout}}{% endif %}

  mysql:
    ports: [{{ mysql_ports|default([3306])|join(", ") }}]
{% if mysql_max_rows %}    max_rows: {{mysql_max_rows}}{% endif %}
{% if mysql_max_row_length %}    max_row_length: {{mysql_max_row_length}}{% endif %}
{% if mysql_send_request %}    send_request: true{% endif %}
{% if mysql_send_response %}    send_response: true{% endif %}

  pgsql:
    ports: [{{ pgsql_ports|default([5432])|join(", ") }}]
{% if pgsql_max_rows %}    max_rows: {{pgsql_max_rows}}{% endif %}
{% if pgsql_max_row_length %}    max_row_length: {{pgsql_max_row_length}}{% endif %}
{% if pgsql_send_request %}    send_request: true{% endif %}
{% if pgsql_send_response %}    send_response: true{% endif %}

  redis:
    ports: [{{ redis_ports|default([6379])|join(", ") }}]
{% if redis_send_request %}    send_request: true{% endif %}
{% if redis_send_response %}    send_response: true{% endif %}

  thrift:
    ports: [{{ thrift_ports|default([9090])|join(", ") }}]
    transport_type: "{{ thrift_transport_type|default('socket') }}"
{%- if thrift_idl_files %}
    idl_files: [
        {%- for file in thrift_idl_files -%}
                "{{ pb.working_dir + '/' + file }}"
                {%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
    ]
{%- endif %}
{% if thrift_send_request %}    send_request: true{% endif %}
{% if thrift_send_response %}    send_response: true{% endif %}

  mongodb:
    ports: [{{ mongodb_ports|default([27017])|join(", ") }}]
{% if mongodb_send_request %}    send_request: true{% endif %}
{% if mongodb_send_response %}    send_response: true{% endif %}
{% if mongodb_max_docs is not none %}    max_docs: {{mongodb_max_docs}}{% endif %}
{% if mongodb_max_doc_length is not none %}    max_doc_length: {{mongodb_max_doc_length}}{% endif %}

############################# Filters #########################################

{% if filter_plugins -%}
filter:
  filters: [
      {%- for filter in filter_plugins -%}
          "{{ filter }}"
          {%- if not loop.last %}, {% endif -%}
      {%- endfor -%}
  ]

  {% if filter_config -%}
  {%- for name, dict in filter_config.items() %}
  {{name}}:
    {%- for key, val in dict.items() %}
    {{key}}: "{{val}}"
    {%- endfor %}
  {% endfor %}
  {%- endif -%}
{%- endif %}

############################# Output ##########################################

# Configure what outputs to use when sending the data collected by packetbeat.
# You can enable one or multiple outputs by setting enabled option to true.
output:

  # Elasticsearch as output
  # Options:
  # host, port: where Elasticsearch is listening on
  # save_topology: specify if the topology is saved in Elasticsearch
  #elasticsearch:
  #  host: localhost
  #  port: 9200
  #  save_topology: true

  # File as output
  # Options
  # path: where to save the files
  # filename: name of the files
  # rotate_every_kb: maximum size of the files in path
  # number of files: maximum number of files in path
  file:
    enabled: true
    path: "{{ output_file_path|default(pb.working_dir + "/output") }}"
    filename: "{{ output_file_filename|default("packetbeat") }}"
    rotate_every_kb: 1000
    #number_of_files: 7

############################# Processes #######################################

{% if procs_enabled %}
# Configure the processes to be monitored and how to find them. If a process is
# monitored than Packetbeat attempts to use it's name to fill in the `proc` and
# `client_proc` fields.
# The processes can be found by searching their command line by a given string.
#
# Process matching is optional and can be enabled by uncommenting the following
# lines.
#
procs:
  enabled: true
  monitored:
    - process: mysqld
      cmdline_grep: mysqld

    - process: pgsql
      cmdline_grep: postgres

    - process: nginx
      cmdline_grep: nginx

    - process: app
      cmdline_grep: gunicorn

    - process: memcache
      cmdline_grep: memcached
{% endif %}

# vim: set ft=jinja:
