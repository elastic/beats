
////
This file is generated! See etc/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
== Exported Fields

This document describes the fields that are exported by 
Packetbeat for each transaction. They are grouped in the
following categories:

* <<exported-fields-event>>
* <<exported-fields-dns>>
* <<exported-fields-http>>
* <<exported-fields-memcache>>
* <<exported-fields-mysql>>
* <<exported-fields-pgsql>>
* <<exported-fields-thrift>>
* <<exported-fields-redis>>
* <<exported-fields-mongodb>>
* <<exported-fields-measurements>>
* <<exported-fields-env>>
* <<exported-fields-raw>>

[[exported-fields-event]]
=== Event Fields

These fields contained data about the transaction itself.



==== @timestamp

type: date

example: 2015-01-24 14:06:05.071000

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: True

The timestamp of the event, as measured either by the Beat or by a common collector point. The precision is in milliseconds. The timezone is UTC.


==== type

required: True

The type of the transaction (e.g. HTTP, MySQL, Redis, RUM)


==== count

type: int

required: True

For how many transactions is this event representative. This is generally the inverse of the sampling rate. For example, for a sample rate of 1/10, the count is 10. The count is used by the UIs to return estimated values.


==== direction

required: True

Indicates whether the transaction is inbound (emitted by server) or outbound (emitted by the client). Values can be in or out. No defaults.


==== status

required: True

High level status of the transaction. The way to compute this value depends on the protocol, but the result has a meaning independent a meaning independent of the protocol.


==== method

The command/verb/method of the transaction. For HTTP, this is the method name (GET, POST, PUT, etc.), for SQL this is the verb (SELECT, UPDATE, DELETE, etc.).


==== resource

The logical resource that this transaction refers to. For HTTP, this is the URL path up to the last /. For example, if the URL is `/users/1`, the resource is `/users`. For databases, the resource is typically the table name. The field is not filled for all transaction types.


==== path

required: True

The path to which the transaction refers to. For HTTP, this is the URL. For SQL databases, this is the table name. For key-value stores, this is the key.


==== query

type: string

The query in a human readable form. For HTTP, it will typically be something like `GET /users/_search?name=test`. For MySQL, it is something like `SELECT id from users where name=test`.


==== params

The request parameters. For HTTP, these are the POST or GET parameters. For Thrift-RPC, these are the parameters from the request.


==== notes

Messages from Packetbeat itself. This usually contains error messages for interpreting the raw data which can be helpful for troubleshooting.


[[exported-fields-dns]]
=== DNS Fields

DNS specific event fields.


==== dns.id

type: int

DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.


==== dns.op_code

example: QUERY

DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.


==== dns.flags.authoritative

type: bool

DNS flag specifying that the responding server is an authority for the domain name used in the question.


==== dns.flags.recursion_allowed

type: bool

DNS flag specifying if recursive query support is available in the name server.


==== dns.flags.recursion_desired

type: bool

DNS flag specifying that the client directs the server to pursue a query recursively. Recursive query support is optional.


==== dns.flags.truncated_response

type: bool

DNS flag specifying that only the first 512 bytes of the reply were returned.


==== dns.response_code

example: NOERROR

DNS status code.

==== dns.question.name

example: www.google.com

The domain name being queried. If the name field contains non-printable characters (below 32 or above 126) then those characters are represented as escaped base 10 integers (\DDD). Back slashes and quotes are escaped. Tabs, carriage returns, and line feeds will be converted to \t, \r, and \n respectively.


==== dns.question.type

example: AAAA

The type of records being queried.

==== dns.question.class

example: IN

The class of of records being queried.

==== dns.answers_count

type: int

The number of resource records contained in the dns.answers field.


==== dns.answers.name

example: example.com

Domain name to which this resource record pertains.

==== dns.answers.type

example: MX

Type of data contained in this resource record.

==== dns.answers.class

example: IN

Class of DNS data contained in this resource record.

==== dns.answers.ttl

type: int

Time interval in seconds that this resource record may be cached becore it should be discarded. Zero values mean that the data not be cached.


==== dns.answers.data

The data describing the resource. The meaning of this data depends on the type and class of the resource record.


==== dns.authorities

type: dict

An array containing a dictionary for each authority section from the answer.


==== dns.authorities_count

type: int

The number of resource records contained in the dns.authorities field. The dns.authorities field may or may not be included depending on the configuration of Packetbeat.


==== dns.authorities.name

example: example.com

Domain name to which this resource record pertains.

==== dns.authorities.type

example: NS

Type of data contained in this resource record.

==== dns.authorities.class

example: IN

Class of DNS data contained in this resource record.

==== dns.answers

type: dict

An array containing a dictionary about each answer section returned by the server.


==== dns.answers.ttl

type: int

Time interval in seconds that this resource record may be cached becore it should be discarded. Zero values mean that the data not be cached.


==== dns.answers.data

The data describing the resource. The meaning of this data depends on the type and class of the resource record.


==== dns.additionals

type: dict

An array containing a dictionary for each additional section from the answer.


==== dns.additionals_count

type: int

The number of resource records contained in the dns.additionals field. The dns.additionals field may or may not be included depending on the configuration of Packetbeat.


==== dns.additionals.name

example: example.com

Domain name to which this resource record pertains.

==== dns.additionals.type

example: NS

Type of data contained in this resource record.

==== dns.additionals.class

example: IN

Class of DNS data contained in this resource record.

==== dns.additionals.ttl

type: int

Time interval in seconds that this resource record may be cached becore it should be discarded. Zero values mean that the data not be cached.


==== dns.additionals.data

The data describing the resource. The meaning of this data depends on the type and class of the resource record.


[[exported-fields-http]]
=== Http Fields

HTTP specific event fields.


==== http.code

example: 404

HTTP status code.

==== http.phrase

example: Not found.

HTTP status phrase.

==== http.request_headers

type: dict

A map containing the captured header fields from the request. Which headers to capture is configurable. If more headers with the same header name are present in the message, they will be separated by commas.


==== http.response_headers

type: dict

A map containing the captured header fields from the response. Which headers to capture is configurable. If more headers with the same header name are present in the message, they will be separated by commas.


==== http.content_length

type: int

The value of the Content-Length header if present.


[[exported-fields-memcache]]
=== Memcache Fields

Memcached specific event fields


==== memcache.protocol_type

type: string

Memcache protocol implementation. One of "binary", "text" or "unknown" for binary based, text based or unknown memcache protocol type.


==== memcache.request.line

type: string

Raw command line for unknown commands ONLY.


==== memcache.request.command

type: string

The memcache command being requested in the memcache text protocol. For example "set" or "get". The binary protocol opcodes are translated into memcache text protocol commands.


==== memcache.response.command

type: string

Either the text based protocol response message type or the name the originating request if binary protocol is used.


==== memcache.request.type

type: string

The memcache command classification. One of "UNKNOWN", "Load", "Store", "Delete", "Counter", "Info", "SlabCtrl", "LRUCrawler", "Stats", "Success", "Fail" or "Auth".


==== memcache.response.type

type: string

The memcache command classification. One of "UNKNOWN", "Load", "Store", "Delete", "Counter", "Info", "SlabCtrl", "LRUCrawler", "Stats", "Success", "Fail" or "Auth". The text based protocol will employ any any of these, whereas the binary based protocol will mirror the request commands only (see memcache.response.status for binary protocol).


==== memcache.response.error_msg

type: string

Optional error message in memcache response (text based protocol only).


==== memcache.request.opcode

type: string

The binary protocol message opcode its name.


==== memcache.response.opcode

type: string

The binary protocol message opcode its name.


==== memcache.request.opcode_value

type: int

The binary protocol message opcode value.


==== memcache.response.opcode_value

type: int

The binary protocol message opcode value.


==== memcache.request.opaque

type: int

The binary protocol opaque header value used for correlating request with response messages.


==== memcache.response.opaque

type: int

The binary protocol opaque header value used for correlating request with response messages.


==== memcache.request.vbucket

type: int

The vbucket index send in binary message.


==== memcache.response.status

type: string

Textual representation of response error code (binary protocol only).


==== memcache.response.status_code

type: int

Status code valued returned in response (binary protocol only).


==== memcache.request.keys

type: list

List of keys send in store or load commands.


==== memcache.response.keys

type: list

List of keys returned for load command (if present).


==== memcache.request.count_values

type: int

Number of values found in memcache request message. If command does not send any data, this field is missing.


==== memcache.response.count_values

type: int

Number of values found in memcache response message. If command does not send any data, this field is missing.


==== memcache.request.values

type: list

List of base64 encoded values send with request (If present).


==== memcache.response.values

type: list

List of base64 encoded values send with response (If present).


==== memcache.request.bytes

type: int

Byte count of values being transfered.


==== memcache.response.bytes

type: int

Byte count of values being transfered.


==== memcache.request.delta

type: int

Counter increment/decrement delta value


==== memcache.request.initial

type: int

Counter increment/decrement initial value parameter (binary protocol only).


==== memcache.request.verbosity

type: int

Value of memcache "verbosity" command.


==== memcache.request.raw_args

type: string

Text protocol raw arguments for "stats ..." and "lru crawl ..." commands.


==== memcache.request.source_class

type: int

The source class id in 'slab reassign' command.


==== memcache.request.dest_class

type: int

The destination class id in 'slab reassign' command.


==== memcache.request.automove

type: string

The automove mode in 'slab automove' command as string. One of "standby"(=0), "slow"(=1), "aggressive"(=2) or raw value if value is unknown.


==== memcache.request.flags

type: int

Memcache command flags send in request (If present).


==== memcache.response.flags

type: int

Memcache message flags send in response (If present).


==== memcache.request.exptime

type: int

The data expiry time in seconds send with memcache command (If present). If value is <30 days, the expiry time is relative to "now", else it is a absolute unix time in seconds (32bit)


==== memcache.request.sleep_us

type: int

Sleep setting in us for 'lru_crawler sleep' command.


==== memcache.response.value

type: int

General numeric value if present. For example counter operation responses.


==== memcache.request.noreply

type: bool

Set to true if noreply was set in request. The memcache.response field will be missing


==== memcache.request.quiet

type: bool

True if binary protocol message is to be treated as quiet message.


==== memcache.request.cas_unique

type: int

CAS (compare-and-swap) identifier if present.


==== memcache.response.cas_unique

type: int

CAS (compare-and-swap) identifier to be used with CAS based updates (If present).


==== memcache.response.stats

type: list

List of statistic values returned. Each entry is a dictionary with fields "name" and "value"


==== memcache.response.version

type: string

Returned memcache version string.


[[exported-fields-mysql]]
=== Mysql Fields

MySQL specific event fields.


==== mysql.iserror

type: bool

In case the MySQL query returns an error, this field is set to true.


==== mysql.affected_rows

type: int

In case of a successful MySQL command, it contains the affected number of rows of the last statement.


==== mysql.insert_id

In case of a successful ``INSERT`` query, it contains the id of the newly inserted row.


==== mysql.num_fields

In case of a successful ``SELECT`` query, it is set to the number of fields returned.


==== mysql.num_rows

In case of a successful ``SELECT`` query, it is set to the number of rows returned.


==== mysql.query

The row mysql query as read from the transaction's request.


==== mysql.error_code

type: int

The error code returned by MySQL.


==== mysql.error_message

The error info message returned by MySQL.


[[exported-fields-pgsql]]
=== PostgreSQL Fields

PostgreSQL specific event fields.


==== pgsql.query

The row pgsql query as read from the transaction's request.


==== pgsql.iserror

type: bool

In case the PgSQL query returns an error, this field is set to true.


==== pgsql.error_code

type: int

The PostgreSQL error code.

==== pgsql.error_message

The PostgreSQL error message.

==== pgsql.error_severity

The PostgreSQL error severity.

==== pgsql.num_fields

In case of a successful ``SELECT`` query, it is set to the number of fields returned.


==== pgsql.num_rows

In case of a successful ``SELECT`` query, it is set to the number of rows returned.


[[exported-fields-thrift]]
=== Thrift-RPC Fields

Thrift-RPC specific event fields.


==== thrift.params

The RPC method call parameters in human readable format. If the IDL files are available, the parameters are using names whenever possible. Otherwise, the IDs from the message are used.


==== thrift.service

The name of the Thrift-RPC service as defined in the IDL files.


==== thrift.return_value

The value returned by the Thrift-RPC call. This is encoded in a human readable way.


==== thrift.exceptions

If the call resulted in exceptions, this field contains them in a human readable form


[[exported-fields-redis]]
=== Redis Fields

Redis specific event fields.


==== redis.return_value

The return value of the Redis command in human readable form.


==== redis.error

If the Redis command has resulted in an error, this field contains the error message as returned by the Redis server.


[[exported-fields-mongodb]]
=== MongoDb Fields

MongoDB specific event fields. These fields mirror closely the fields for the MongoDB wire protocol. The higher level fields (e.g. `query`, `resource`) apply to MongoDB events as well.



==== mongodb.error

If the MongoDB request has resulted in an error, this field contains the error message as returned by the server.


==== mongodb.fullCollectionName

The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.


==== mongodb.numberToSkip

type: number

Sets the number of documents to omit - starting from the first document in the resulting dataset - when returning the result of the query.


==== mongodb.numberToReturn

type: number

The requested maximum number of documents to be returned.


==== mongodb.numberReturned

type: number

Number of documents in the reply


==== mongodb.startingFrom

Where in the cursor this reply is starting


==== mongodb.query

JSON document that represents the query. The query will contain one or more elements, all of which must match for a document to be included in the result set. Possible elements include $query, $orderby, $hint, $explain, and $snapshot.


==== mongodb.returnFieldsSelector

JSON document that limits the fields in the returned documents. The returnFieldsSelector contains one or more elements, each of which is the name of a field that should be returned, and and the integer value 1.


==== mongodb.selector

BSON document that specifies the query for selection of the document to update or delete.


==== mongodb.update

BSON document that specifies the update to be performed. For information on specifying updates see the Update Operations documentation from the MongoDB Manual.


==== mongodb.cursorId

Cursor identifier that came in the OP_REPLY. This must be the value that came from the database.


[[exported-fields-measurements]]
=== Measurements Fields

These fields contain measurements related to the transaction.



==== responsetime

type: int

The wall clock time it took to for the transaction to complete. The precision is in milliseconds.


==== cpu_time

type: int

The CPU time it took to complete the transaction.

==== bytes_in

type: int

The number of bytes of the request. Note that this size is the application layer message length, without the length of IP or TCP headers.


==== bytes_out

type: int

The number of bytes of the response. Note that this size is the application layer message length, without the length of IP or TCP headers.


==== dnstime

type: int

The time it takes to query the name server for a given request. This is typically used for RUM (real-user-monitoring) but can also have values for server to server communication when DNS is used for service discovery. The precision is in microseconds.


==== connecttime

type: int

The time it takes for the TCP connection to be established for the given transaction. The precision is in microseconds.


==== loadtime

type: int

The time it takes for the content to be loaded. This is typically used for RUM (real-user-monitoring) but it can make sense in other cases as well. The precision is in microseconds.


==== domloadtime

type: int

In RUM (real-user-monitoring), the total time it takes for the DOM to be loaded. In terms of W3 Navigation Timing API, this is the difference between `domContentLoadedEnd` and `domContentLoadedStart`.


[[exported-fields-env]]
=== Environmental Fields

These fields contain data about the environment in which the transaction was captured.



==== shipper

The name of the Beat that captured the transaction.


==== server

The name of the server that served the transaction.


==== client_server

The name of the server that initiated the transaction.


==== service

The name of the logical service that served the transaction.


==== client_service

The name of the logical service that initiated the transaction.


==== ip

format: dotted notation.

The IP address of the server that served the transaction.


==== client_ip

format: dotted notation.

The IP address of the server that initiated the transaction.


==== real_ip

format: Dotted notation.

If the server initiating the transaction is a proxy, this field contains the original client IP address. For HTTP, for example, the IP address extracted from a configurable HTTP header, by default `X-Forwarded-For`.
Unless this field is disabled, it always has a value and it matches the `client_ip` for non proxy clients.


==== client_location

type: geo_point

example: 40.715, -74.011

The GeoIP location of the `real_ip` IP address or of the `client_ip` address if the `real_ip` is disabled. The field is a string containing the latitude and longitude separated by a comma.


==== client_port

format: dotted notation.

The layer 4 port of the process that initiated the transaction.


==== transport

example: udp

Transport protocol used for the transaction. If not specified then assume tcp.


==== port

format: dotted notation.

The layer 4 port of the process that served the transaction.


==== proc

The name of the process that served the transaction.


==== client_proc

The name of the process that initiated the transaction.


==== release

The software release of the service serving the transaction. This can be the commit id or a semantic version.


==== tags

Arbitrary tags that can be set per Beat and per transaction type.


[[exported-fields-raw]]
=== Raw Fields

These fields contain the raw transaction data.


==== request

For text protocols, this is the request as seen on the wire (application layer only). For binary protocols this is our representation of the request.


==== response

For text protocols, this is the response as seen on the wire (application layer only). For binary protocols this is our representation of the request.


