[[packetbeat-getting-started]]
== Getting started

The best way to understand the value of an network packet analytics system like
Packetbeat is to try it on your own traffic. 

=== Steps:

Follow the steps to get started with your own Packetbeat setup:

 * Install the Packetbeat shippers on your servers so that they capture the network traffic. <<packetbeat-installation>>
 * Install Elasticsearch for storage and indexing the data. {libbeat}/getting-started.html#elasticsearch-installation[More details]
 * Install Kibana for the UI. {libbeat}/getting-started.html#kibana-installation[More details]
 * Install optionally Logstash. {libbeat}/getting-started.html#logstash-installation[More details]
 * Load sample Kibana dashboards to get it started. <<sample-dashboards>>


[[packetbeat-installation]]
=== Installing Packetbeat

Now that you have Elasticsearch running, I'm sure you are eager to put some
data in it. For this, install the Packetbeat shippers on your application
servers:

deb:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
sudo apt-get install libpcap0.8
curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat_{version}_amd64.deb
sudo dpkg -i packetbeat_{version}_amd64.deb
----------------------------------------------------------------------

rpm:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
sudo yum install libpcap
curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-{version}-x86_64.rpm
sudo rpm -vi packetbeat-{version}-x86_64.rpm
----------------------------------------------------------------------


mac:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
curl -L -O https://download.elastic.co/beats/packetbeat/packetbeat-{version}-darwin.tgz
tar xzvf packetbeat-{version}-darwin.tgz
----------------------------------------------------------------------

NOTE: We also provide 32bits images. You can get them from our
https://www.elastic.co/downloads/beats/packetbeat[download page].


=== Configure Packetbeat

Before starting the shipper, edit the configuration file. For rpm and deb the
configuration file is `/etc/packetbeat/packetbeat.yml`. For mac the
configuration file is found in the archive you just downloaded.

First, select the network interface from which to capture the traffic. On
Linux, Packetbeat supports capturing all messages sent or received by the
server on which it is installed. For this, use `any` as the device:

[source,yaml]
----------------------------------------------------------------------
interfaces:
  # Select on which network interfaces to sniff. You can use the "any"
  # keyword to sniff on all connected interfaces.
  device: any
----------------------------------------------------------------------

Note that on OS X, capturing from the `any` device doesn't work. You would
typically use either `lo0` or `en0` depending on which traffic you want to
capture.

In the next section, configure the ports on which Packetbeat can find each
protocol. If you use any non-standard ports, add them here. Otherwise, the
default values should do just fine.

[source,yaml]
----------------------------------------------------------------------
protocols:
  # Configure which protocols to monitor and on which ports are they
  # running. You can disable a given protocol by commenting out its
  # configuration.
  http:
    ports: [80, 8080, 8081, 5000, 8002]

  memcache:
    ports: [11211]

  mysql:
    ports: [3306]

  redis:
    ports: [6379]

  pgsql:
    ports: [5432]

  thrift:
    ports: [9090]
----------------------------------------------------------------------

Set the IP address and port where the shipper can find the Elasticsearch
installation:

[source,yaml]
----------------------------------------------------------------------
output:

  elasticsearch:
    # Uncomment out this option if you want to output to Elasticsearch. The
    # default is false.
    enabled: true

    # Set the host and port where to find Elasticsearch.
    host: 192.168.1.42
    port: 9200

    # Uncomment this option and set it to true if you want to store the topology in
    # Elasticsearch. Default behavior if this setting is left out of the
    # config file is equivalent to setting "save_topology" to "false"
    #save_topology: false
----------------------------------------------------------------------


[[packetbeat-template]]
=== Load index template in Elasticsearch

Before starting Packetbeat, you need to load the
http://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html[index
template], which is used to let Elasticsearch know which fields should be analyzed
in which way.

The recommended template file is installed by the Packetbeat packages. Load it with the
following command:

deb or rpm:

[source,shell]
----------------------------------------------------------------------
curl -XPUT 'http://localhost:9200/_template/packetbeat' -d@/etc/packetbeat/packetbeat.template.json
----------------------------------------------------------------------

mac:

[source,shell]
----------------------------------------------------------------------
cd packetbeat-{version}-darwin
curl -XPUT 'http://localhost:9200/_template/packetbeat' -d@packetbeat.template.json
----------------------------------------------------------------------

where `localhost:9200` is the IP and port where Elasticsearch is listening on.

=== Running Packetbeat

You are now ready to start Packetbeat:

deb:

[source,shell]
----------------------------------------------------------------------
sudo /etc/init.d/packetbeat start
----------------------------------------------------------------------

rpm:

[source,shell]
----------------------------------------------------------------------
sudo /etc/init.d/packetbeat start
----------------------------------------------------------------------

mac:

[source,shell]
----------------------------------------------------------------------
sudo ./packetbeat -e -c packetbeat.yml -d "publish"
----------------------------------------------------------------------

Packetbeat is now ready to capture data from your network traffic. You can test
that it works by creating a simple HTTP request. For example:

[source,shell]
----------------------------------------------------------------------
curl http://www.elastic.co/ > /dev/null
----------------------------------------------------------------------

Now check that the data is present in Elasticsearch with the following command:

[source,shell]
----------------------------------------------------------------------
curl -XGET 'http://localhost:9200/packetbeat-*/_search?pretty'
----------------------------------------------------------------------

Make sure to replace `localhost:9200` with the address of your Elasticsearch
instance. It should return data about the HTTP transaction you just created.

==== Command Line Options

[source,shell]
------------------------------------------------------------------------
$ ./packetbeat -h
Usage of ./packetbeat:
  -I string
    	file
  -N	Disable actual publishing for testing
  -O	Read packets one at a time (press Enter)
  -c string
    	Configuration file (default "/etc/packetbeat/packetbeat.yml")
  -cpuprofile string
    	Write cpu profile to file
  -d string
    	Enable certain debug selectors
  -devices
    	Print the list of devices and exit
  -dump string
    	Write all captured packets to this libpcap file
  -e	Output to stdout and disable syslog/file output
  -l int
    	Loop file. 0 - loop forever (default 1)
  -memprofile string
    	Write memory profile to this file
  -t	Read packets as fast as possible, without sleeping
  -test
    	Test configuration and exit.
  -v	Log at INFO level
  -version
    	Print version and exit
  -waitstop int
    	Additional seconds to wait befor shutting down
----------------------------------------------------------------------------

===== -I
Instead of reading packets from the network, you can pass a `PCAP` file as input to Packetbeat. 
This option is used only for testing Packetbeat. Example: `-I ~/pcaps/network_traffic.pcap`.

===== -N
Disable publishing the events to the defined output. This option is used only for testing Packetbeat.

===== -O
Read a packet one by one by pressing _Enter_ after each. This option is used only for testing Packetbeat.

===== -devices
Print the list of devices. This option is used only for testing Packetbeat.

===== -dump
Write all captured packets to a file. This option is used only for testing Packetbeat.

===== -l
This option needs to be used in combination with the _pcap file input (-I)_ in order to define how many times to read
the pcap file. For a infinite loop, use _0_. This option is used only for testing Packetbeat.

===== -t
This option needs to be used in combination with the _pcap file input (-I)_. If present, reads the packets from the pcap
file as fast as possible, without sleeping. This option is used only for testing Packetbeat.

===== -waitstop
Additional seconds to wait before exiting.


For the other options, check {libbeat}/command-line-options.html[Beats Command Line Options].

Enjoy!
