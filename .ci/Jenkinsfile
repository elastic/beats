#!/usr/bin/env groovy
pipeline {
  agent none
  environment {
    REPO = 'beats'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    GITHUB_CHECK_NAME = 'Functional Tests'
    PIPELINE = 'beats/poc-metricbeat-functional-tests'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '20'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Initializing'){
      agent { label 'linux && immutable' }
      options { skipDefaultCheckout() }
      environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        HOME = "${env.WORKSPACE}"
        GOPATH = "${env.WORKSPACE}"
      }
      stages {
        stage('Checkout') {
          steps {
            gitCheckout(basedir: env.BASE_DIR, githubNotifyFirstTimeContributor: false)
            script {
              env.GO_VERSION = readFile("${BASE_DIR}/.go-version").trim()
            }
          }
        }
      }
    }
    stage(GITHUB_CHECK_NAME) {
      agent none
      when {
        beforeAgent true
        changeRequest()
      }
      steps {
        log(level: 'INFO', text: 'Launching Async ITs')
        build(job: env.PIPELINE, propagate: false, wait: false,
              parameters: [string(name: 'GO_VERSION', value: "${env.GO_VERSION}"),
                           string(name: 'MODULE', value: 'all'),
                           string(name: 'GITHUB_CHECK_NAME', value: env.GITHUB_CHECK_NAME),
                           string(name: 'GITHUB_CHECK_REPO', value: env.REPO),
                           string(name: 'GITHUB_CHECK_SHA1', value: env.GIT_BASE_COMMIT)])
        githubNotify(context: "${env.GITHUB_CHECK_NAME}", description: "${env.GITHUB_CHECK_NAME} ...", status: 'PENDING', targetUrl: "${env.JENKINS_URL}search/?q=${env.PIPELINE.replaceAll('/','+')}")
      }
    }
  }
}
