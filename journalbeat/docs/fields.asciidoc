
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by Journalbeat. They are
grouped in the following categories:

* <<exported-fields-beat>>
* <<exported-fields-cloud>>
* <<exported-fields-common>>
* <<exported-fields-docker-processor>>
* <<exported-fields-ecs>>
* <<exported-fields-http>>
* <<exported-fields-kubernetes-processor>>

--
[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`beat.timezone`*::
+
--
The timezone as returned by the operating system on which the Beat is running.


--

*`@timestamp`*::
+
--
type: date

example: August 26th 2016, 12:35:53.332

format: date

required: True

The timestamp when the event log record was generated.


--

*`tags`*::
+
--
Arbitrary tags that can be set per Beat and per transaction type.


--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.type`*::
+
--
type: keyword

Error type.


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`meta.cloud.provider`*::
+
--
example: ec2

Name of the cloud provider. Possible values are ec2, gce, or digitalocean.


--

*`meta.cloud.instance_id`*::
+
--
Instance ID of the host machine.


--

*`meta.cloud.instance_name`*::
+
--
Instance name of the host machine.


--

*`meta.cloud.machine_type`*::
+
--
example: t2.medium

Machine type of the host machine.


--

*`meta.cloud.availability_zone`*::
+
--
example: us-east-1c

Availability zone in which this host is running.


--

*`meta.cloud.project_id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`meta.cloud.region`*::
+
--
Region in which this host is running.


--

[[exported-fields-common]]
== Common Journalbeat fields

Contains common fields available in all event types.



*`read_timestamp`*::
+
--
The time when Journalbeat read the journal entry.


--

[float]
== coredump fields

Fields used by systemd-coredump kernel helper.



*`coredump.unit`*::
+
--
type: keyword

Annotations of messages containing coredumps from system units.


--

*`coredump.user_unit`*::
+
--
type: keyword

Annotations of messages containing coredumps from user units.


--

[float]
== journald fields

Fields to log on behalf of a different program.



[float]
== audit fields

Audit fields of event.



*`journald.audit.loginuid`*::
+
--
type: long

example: 1000

required: False

The login UID of the source process.


--

*`journald.audit.session`*::
+
--
type: long

example: 3

required: False

The audit session of the source process.


--

*`journald.cmd`*::
+
--
type: keyword

example: /lib/systemd/systemd --user

required: False

The command line of the process.


--

*`journald.name`*::
+
--
type: keyword

example: /lib/systemd/systemd

required: False

Name of the executable.


--

*`journald.executable`*::
+
--
type: keyword

example: /lib/systemd/systemd

required: False

Path to the the executable.


--

*`journald.pid`*::
+
--
type: long

example: 1

required: False

The ID of the process which logged the message.


--

*`journald.gid`*::
+
--
type: long

example: 1

required: False

The ID of the group which runs the process.


--

*`journald.uid`*::
+
--
type: long

example: 1

required: False

The ID of the user which runs the process.


--

*`journald.capabilites`*::
+
--
required: False

The effective capabilites of the process.


--

[float]
== systemd fields

Fields of systemd.



*`systemd.invocation_id`*::
+
--
type: keyword

example: 8450f1672de646c88cd133aadd4f2d70

required: False

The invocation ID for the runtime cycle of the unit the message was generated in.


--

*`systemd.cgroup`*::
+
--
type: keyword

example: /user.slice/user-1234.slice/session-2.scope

required: False

The control group path in the systemd hierarchy.


--

*`systemd.owner_uid`*::
+
--
type: long

required: False

The owner UID of the systemd user unit or systemd session.


--

*`systemd.session`*::
+
--
type: keyword

required: False

The ID of the systemd session.


--

*`systemd.slice`*::
+
--
type: keyword

example: user-1234.slice

required: False

The systemd slice unit.


--

*`systemd.user_slice`*::
+
--
type: keyword

required: False

The systemd user slice unit.


--

*`systemd.unit`*::
+
--
type: keyword

example: nginx.service

required: False

The name of the systemd unit.


--

*`systemd.user_unit`*::
+
--
type: keyword

example: user-1234.slice

required: False

The name of the systemd user unit.


--

*`systemd.transport`*::
+
--
type: keyword

example: syslog

required: True

How the log message was received by journald.


--

[float]
== host fields

Fields of the host.



*`host.boot_id`*::
+
--
type: text

example: dd8c974asdf01dbe2ef26d7fasdf264c9

required: False

The boot ID for the boot the log was generated in.


--

[float]
== syslog fields

Fields of the code generating the event.



*`syslog.priority`*::
+
--
type: long

example: 1

required: False

The priority of the message. A syslog compatibility field.


--

*`syslog.facility`*::
+
--
type: long

example: 1

required: False

The facility of the message. A syslog compatibility field.


--

*`syslog.identifier`*::
+
--
type: text

example: su

required: False

The identifier of the message. A syslog compatibility field.


--

*`message`*::
+
--
type: text

required: True

The logged message.


--

*`custom`*::
+
--
type: nested

required: False

Arbitrary fields coming from processes.


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: keyword

Unique container id.


--

*`docker.container.image`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`docker.container.name`*::
+
--
type: keyword

Container name.


--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-ecs]]
== ECS fields

ECS fields.



[float]
== agent fields

The agent fields contain the data about the agent/client/shipper that created the event.



*`agent.version`*::
+
--
type: keyword

example: 6.0.0-rc2

Version of the agent.


--

*`agent.name`*::
+
--
type: keyword

example: foo

Name of the agent.
This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
If no name is given, the name is often left empty.


--

*`agent.type`*::
+
--
type: keyword

example: filebeat

Type of the agent.
The agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.


--

*`agent.id`*::
+
--
type: keyword

example: 8a4f500d

Unique identifier of this agent (if one exists).
Example: For Beats this would be beat.id.


--

*`agent.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this agent (if one exists).
This id normally changes across restarts, but `agent.id` does not.


--

[float]
== base fields

The base set contains all fields which are on the top level. These fields are common across all types of events.



*`base.@timestamp`*::
+
--
type: date

example: 2016-05-23T08:05:34.853Z

required: True

Date/time when the event originated.
For log events this is the date/time when the event was generated, and not when it was read.
Required field for all events.


--

*`base.tags`*::
+
--
type: keyword

example: ["production", "env2"]

List of keywords used to tag each event.


--

*`base.labels`*::
+
--
type: object

example: {'application': 'foo-bar', 'env': 'production'}

Key/value pairs.
Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
Example: `docker` and `k8s` labels.


--

*`base.message`*::
+
--
type: text

example: Hello World

For log events the message field contains the log message.
In other use cases the message field can be used to concatenate different values which are then freely searchable. If multiple messages exist, they can be combined into one message.


--

[float]
== cloud fields

Fields related to the cloud or infrastructure the events are coming from.



*`cloud.provider`*::
+
--
type: keyword

example: ec2

Name of the cloud provider. Example values are ec2, gce, or digitalocean.


--

*`cloud.availability_zone`*::
+
--
type: keyword

example: us-east-1c

Availability zone in which this host is running.


--

*`cloud.region`*::
+
--
type: keyword

example: us-east-1

Region in which this host is running.


--

*`cloud.instance.id`*::
+
--
type: keyword

example: i-1234567890abcdef0

Instance ID of the host machine.


--

*`cloud.instance.name`*::
+
--
type: keyword

Instance name of the host machine.


--

*`cloud.machine.type`*::
+
--
type: keyword

example: t2.medium

Machine type of the host machine.


--

*`cloud.account.id`*::
+
--
type: keyword

example: 666777888999

The cloud account or organization id used to identify different entities in a multi-tenant environment.
Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.


--

[float]
== container fields

Container fields are used for meta information about the specific container that is the source of information. These fields help correlate data based containers from any runtime.



*`container.runtime`*::
+
--
type: keyword

example: docker

Runtime managing this container.


--

*`container.id`*::
+
--
type: keyword

Unique container id.


--

*`container.image.name`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`container.image.tag`*::
+
--
type: keyword

Container image tag.


--

*`container.name`*::
+
--
type: keyword

Container name.


--

*`container.labels`*::
+
--
type: object

Image labels.


--

[float]
== destination fields

Destination fields describe details about the destination of a packet/event.



*`destination.ip`*::
+
--
type: ip

IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.


--

*`destination.port`*::
+
--
type: long

Port of the destination.


--

*`destination.mac`*::
+
--
type: keyword

MAC address of the destination.


--

*`destination.domain`*::
+
--
type: keyword

Destination domain.


--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information derived from an IP field.



*`destination.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.


--

*`destination.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.


--

*`destination.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.


--

*`destination.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.


--

*`destination.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.


--

[float]
== user fields

The user fields describe information about the user that is relevant to  the event. Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.



*`destination.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`destination.user.name`*::
+
--
type: keyword

Name of the user.
The field is a keyword, and will not be tokenized.


--

*`destination.user.email`*::
+
--
type: keyword

User email address.


--

*`destination.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.


--

[float]
== device fields

Device fields are used to provide additional information about the device that is the source of the information. This could be a firewall, network device, etc.



*`device.mac`*::
+
--
type: keyword

MAC address of the device


--

*`device.ip`*::
+
--
type: ip

IP address of the device.


--

*`device.hostname`*::
+
--
type: keyword

Hostname of the device.


--

*`device.vendor`*::
+
--
type: keyword

Device vendor information.


--

*`device.version`*::
+
--
type: keyword

Device version.


--

*`device.serial_number`*::
+
--
type: keyword

Device serial number.


--

*`device.type`*::
+
--
type: keyword

example: firewall

The type of the device the data is coming from.
There is no predefined list of device types. Some examples are `endpoint`, `firewall`, `ids`, `ips`, `proxy`.


--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information derived from an IP field.



*`device.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.


--

*`device.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.


--

*`device.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.


--

*`device.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.


--

*`device.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.


--

[float]
== os fields

The OS fields contain information about the operating system.



*`device.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).


--

*`device.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name.


--

*`device.os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).


--

*`device.os.version`*::
+
--
type: keyword

example: 10.12.6-rc2

Operating system version as a raw string.


--

*`device.os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.


--

[float]
== ecs fields

Meta-information specific to ECS.



*`ecs.version`*::
+
--
type: keyword

example: 0.1.0

required: True

ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
The current version is 0.1.0.


--

[float]
== error fields

These fields can represent errors of any kind. Use them for errors that happen while fetching events or in cases where the event itself contains an error.



*`error.id`*::
+
--
type: keyword

Unique identifier for the error.


--

*`error.message`*::
+
--
type: text

Error message.


--

*`error.code`*::
+
--
type: keyword

Error code describing the error.


--

[float]
== event fields

The event fields are used for context information about the data itself.



*`event.id`*::
+
--
type: keyword

example: 8a4f500d

Unique ID to describe the event.


--

*`event.category`*::
+
--
type: keyword

example: metrics

Event category.
This can be a user defined category.


--

*`event.type`*::
+
--
type: keyword

example: nginx-stats-metrics

A type given to this kind of event which can be used for grouping.
This is normally defined by the user.


--

*`event.action`*::
+
--
type: keyword

example: reject

The action captured by the event. The type of action will vary from system to system but is likely to include actions by security services, such as blocking or quarantining; as well as more generic actions such as login events, file i/o or proxy forwarding events.
The value is normally defined by the user.


--

*`event.module`*::
+
--
type: keyword

example: mysql

Name of the module this data is coming from.
This information is coming from the modules used in Beats or Logstash.


--

*`event.dataset`*::
+
--
type: keyword

example: stats

Name of the dataset.
The concept of a `dataset` (fileset / metricset) is used in Beats as a subset of modules. It contains the information which is currently stored in metricset.name and metricset.module or fileset.name.


--

*`event.severity`*::
+
--
type: long

example: 7

Severity describes the severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.


--

*`event.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232

Raw text message of entire event. Used to demonstrate log integrity.
This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.


Field is not indexed.

--

*`event.hash`*::
+
--
type: keyword

example: 123456789012345678901234567890ABCD

Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.


--

*`event.duration`*::
+
--
type: long

Duration of the event in nanoseconds.


--

*`event.created`*::
+
--
type: date

event.created contains the date when the event was created.
This timestamp is distinct from @timestamp in that @timestamp contains the processed timestamp. For logs these two timestamps can be different as the timestamp in the log line and when the event is read for example by Filebeat are not identical. `@timestamp` must contain the timestamp extracted from the log line, event.created when the log line is read. The same could apply to package capturing where @timestamp contains the timestamp extracted from the network package and event.created when the event was created.
In case the two timestamps are identical, @timestamp should be used.


--

*`event.risk_score`*::
+
--
type: float

Risk score or priority of the event (e.g. security solutions). Use your system's original value here.


--

*`event.risk_score_norm`*::
+
--
type: float

Normalized risk score or priority of the event, on a scale of 0 to 100.
This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.


--

[float]
== file fields

File fields provide details about each file.



*`file.path`*::
+
--
type: keyword

Path to the file.

--

*`file.target_path`*::
+
--
type: keyword

Target path for symlinks.

--

*`file.extension`*::
+
--
type: keyword

example: png

File extension.
This should allow easy filtering by file extensions.


--

*`file.type`*::
+
--
type: keyword

File type (file, dir, or symlink).

--

*`file.device`*::
+
--
type: keyword

Device that is the source of the file.

--

*`file.inode`*::
+
--
type: keyword

Inode representing the file in the filesystem.

--

*`file.uid`*::
+
--
type: keyword

The user ID (UID) or security identifier (SID) of the file owner.


--

*`file.owner`*::
+
--
type: keyword

File owner's username.

--

*`file.gid`*::
+
--
type: keyword

Primary group ID (GID) of the file.

--

*`file.group`*::
+
--
type: keyword

Primary group name of the file.

--

*`file.mode`*::
+
--
type: keyword

example: 416

Mode of the file in octal representation.

--

*`file.size`*::
+
--
type: long

File size in bytes (field is only added when `type` is `file`).

--

*`file.mtime`*::
+
--
type: date

Last time file content was modified.

--

*`file.ctime`*::
+
--
type: date

Last time file metadata changed.

--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information derived from an IP field.



*`geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.


--

*`geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.


--

*`geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.


--

*`geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.


--

*`geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.


--

[float]
== host fields

Host fields provide information related to a host. A host can be a physical machine, a virtual machine, or a Docker container.
Normally the host information is related to the machine on which the event was generated/collected, but they can be used differently if needed.



*`host.hostname`*::
+
--
type: keyword

Hostname of the host.
It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.


--

*`host.id`*::
+
--
type: keyword

Unique host id.
As hostname is not always unique, use values that are meaningful in your environment.
Example: The current usage of `beat.name`.


--

*`host.ip`*::
+
--
type: ip

Host ip address.


--

*`host.mac`*::
+
--
type: keyword

Host mac address.


--

*`host.type`*::
+
--
type: keyword

Type of host.
For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.


--

*`host.architecture`*::
+
--
type: keyword

example: x86_64

Operating system architecture.


--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information derived from an IP field.



*`host.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.


--

*`host.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.


--

*`host.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.


--

*`host.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.


--

*`host.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.


--

[float]
== os fields

The OS fields contain information about the operating system.



*`host.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).


--

*`host.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name.


--

*`host.os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).


--

*`host.os.version`*::
+
--
type: keyword

example: 10.12.6-rc2

Operating system version as a raw string.


--

*`host.os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.


--

[float]
== user fields

The user fields describe information about the user that is relevant to  the event. Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.



*`host.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`host.user.name`*::
+
--
type: keyword

Name of the user.
The field is a keyword, and will not be tokenized.


--

*`host.user.email`*::
+
--
type: keyword

User email address.


--

*`host.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.


--

[float]
== log fields

Fields which are specific to log events.



*`log.level`*::
+
--
type: keyword

example: ERR

Log level of the log event.
Some examples are `WARN`, `ERR`, `INFO`.


--

*`log.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 localhost My log


This is the original log message and contains the full log message before splitting it up in multiple parts.
In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.


Field is not indexed.

--

[float]
== network fields

Fields related to network data.



*`network.name`*::
+
--
type: keyword

example: Guest Wifi

Name given by operators to sections of their network.


--

*`network.type`*::
+
--
type: keyword

example: IPv4

In the OSI Model this would be the Network Layer. IPv4, IPv6, IPSec, PIM, etc


--

*`network.iana_number`*::
+
--
type: keyword

example: 6

IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.


--

*`network.transport`*::
+
--
type: keyword

example: TCP

Same as network.iana_number, but instead using the Keyword name of the transport layer (UDP, TCP, IPv6-ICMP, etc.)


--

*`network.application`*::
+
--
type: keyword

example: AIM

A name given to an application. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.


--

*`network.protocol`*::
+
--
type: keyword

example: http

L7 Network protocol name. ex. http, lumberjack, transport protocol


--

*`network.direction`*::
+
--
type: keyword

example: inbound

Direction of the network traffic.
Recommended values are:
  * inbound
  * outbound
  * unknown


--

*`network.forwarded_ip`*::
+
--
type: ip

example: 192.1.1.2

Host IP address when the source IP address is the proxy.


--

*`network.inbound.bytes`*::
+
--
type: long

example: 184

Network inbound bytes.


--

*`network.inbound.packets`*::
+
--
type: long

example: 12

Network inbound packets.


--

*`network.outbound.bytes`*::
+
--
type: long

example: 184

Network outbound bytes.


--

*`network.outbound.packets`*::
+
--
type: long

example: 12

Network outbound packets.


--

*`network.total.bytes`*::
+
--
type: long

example: 368

Network total bytes. The sum of inbound.bytes + outbound.bytes.


--

*`network.total.packets`*::
+
--
type: long

example: 24

Network outbound packets. The sum of inbound.packets + outbound.packets


--

[float]
== organization fields

The organization fields enrich data with information about the company or entity the data is associated with. These fields help you arrange or filter data stored in an index by one or multiple organizations.



*`organization.name`*::
+
--
type: keyword

Organization name.


--

*`organization.id`*::
+
--
type: keyword

Unique identifier for the organization.


--

[float]
== os fields

The OS fields contain information about the operating system.



*`os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).


--

*`os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name.


--

*`os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).


--

*`os.version`*::
+
--
type: keyword

example: 10.12.6-rc2

Operating system version as a raw string.


--

*`os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.


--

[float]
== process fields

These fields contain information about a process. These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.



*`process.args`*::
+
--
type: keyword

example: ['-l', 'user', '10.0.0.16']

Process arguments.
May be filtered to protect sensitive information.


--

*`process.name`*::
+
--
type: keyword

example: ssh

Process name.
Sometimes called program name or similar.


--

*`process.pid`*::
+
--
type: long

Process id.


--

*`process.ppid`*::
+
--
type: long

Process parent id.


--

*`process.title`*::
+
--
type: keyword

Process title.
The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.


--

[float]
== service fields

The service fields describe the service for or from which the data was collected. These fields help you find and correlate logs for a specific service and version.



*`service.id`*::
+
--
type: keyword

example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

Unique identifier of the running service.
This id should uniquely identify this service. This makes it possible to correlate logs and metrics for one specific service.
Example: If you are experiencing issues with one redis instance, you can filter on that id to see metrics and logs for that single instance.


--

*`service.name`*::
+
--
type: keyword

example: elasticsearch-metrics

Name of the service data is collected from.
The name of the service is normally user given. This allows if two instances of the same service are running on the same machine they can be differentiated by the `service.name`.
Also it allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
In the case of Elasticsearch the service.name could contain the cluster name. For Beats the service.name is by default a copy of the `service.type` field if no name is specified.


--

*`service.type`*::
+
--
type: keyword

example: elasticsearch

The type of the service data is collected from.
The type can be used to group and correlate logs and metrics from one service type.
Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.


--

*`service.state`*::
+
--
type: keyword

Current state of the service.


--

*`service.version`*::
+
--
type: keyword

example: 3.2.4

Version of the service the data was collected from.
This allows to look at a data set only for a specific version of a service.


--

*`service.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this service (if one exists).
This id normally changes across restarts, but `service.id` does not.


--

[float]
== source fields

Source fields describe details about the destination of a packet/event.



*`source.ip`*::
+
--
type: ip

IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.


--

*`source.port`*::
+
--
type: long

Port of the source.


--

*`source.mac`*::
+
--
type: keyword

MAC address of the source.


--

*`source.domain`*::
+
--
type: keyword

Source domain.


--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event or geo information derived from an IP field.



*`source.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.


--

*`source.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.


--

*`source.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.


--

*`source.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.


--

*`source.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.


--

[float]
== user fields

The user fields describe information about the user that is relevant to  the event. Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.



*`source.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`source.user.name`*::
+
--
type: keyword

Name of the user.
The field is a keyword, and will not be tokenized.


--

*`source.user.email`*::
+
--
type: keyword

User email address.


--

*`source.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.


--

[float]
== url fields

URL fields provide a complete URL, with scheme, host, and path.



*`url.original`*::
+
--
type: keyword

example: https://www.elastic.co:443/search?q=elasticsearch#top

Full original url. The field is stored as keyword.


--

*`url.scheme`*::
+
--
type: keyword

example: https

Scheme of the request, such as "https".
Note: The `:` is not part of the scheme.


--

*`url.domain`*::
+
--
type: keyword

example: www.elastic.co

Domain of the request, such as "www.elastic.co".
In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.


--

*`url.port`*::
+
--
type: integer

example: 443

Port of the request, such as 443.


--

*`url.path`*::
+
--
type: keyword

Path of the request, such as "/search".


--

*`url.query`*::
+
--
type: keyword

The query field describes the query string of the request, such as "q=elasticsearch".
The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.


--

*`url.fragment`*::
+
--
type: keyword

Portion of the url after the `#`, such as "top".
The `#` is not part of the fragment.


--

*`url.username`*::
+
--
type: keyword

Username of the request.


--

*`url.password`*::
+
--
type: keyword

Password of the request.


--

[float]
== user fields

The user fields describe information about the user that is relevant to  the event. Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.



*`user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.name`*::
+
--
type: keyword

Name of the user.
The field is a keyword, and will not be tokenized.


--

*`user.email`*::
+
--
type: keyword

User email address.


--

*`user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.


--

[[exported-fields-http]]

*`http.request.method`*::
+
--
type: keyword

example: get, post, put

http request method.


--

*`http.response.status_code`*::
+
--
type: long

example: 404

http response status code.


--

*`http.response.body`*::
+
--
type: text

example: hello world

the full http response body.


--

*`http.version`*::
+
--
type: keyword

example: 1.1

http version.


--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.pod.uid`*::
+
--
type: keyword

Kubernetes Pod UID


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

