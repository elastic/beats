[[filebeat-getting-started]]
== Get started

//TODO: We need to add a separate topic that provides a summary of the different
//ways to parse log lines: ingest node, dissect processor, Logstash, etc. That
//is beyond the scope of a quick start, IMO.

++++
<titleabbrev>Get started</titleabbrev>
++++

This guide describes how to get up and running quickly with log collection.
You'll learn how to:

* install {beatname_uc} on each system you want to monitor
* specify the location of your log files
* parse log data into fields and send it to {es}
* visualize the log data in {kib}

[float]
=== Before you begin

You need access to {es} to store and search your data, and {kib}
to visualize and manage it. 

To get started quickly, spin up a deployment of our
https://www.elastic.co/cloud/elasticsearch-service[hosted {ess}] on
{ecloud}. The {ess} is available on AWS, GCP, and Azure.
{ess-trial}[Try out the {ess} for free].

//TODO: Ask cloud-first working group about preferred wording.

Or you can {stack-gs}/get-started-elastic-stack.html[set up the {stack}] on your
own hardware.

[float]
[[filebeat-installation]]
=== Step 1: Install {beatname_uc}

:release-state: released

include::{libbeat-dir}/shared-download-and-install.asciidoc[]

[[deb]]
*deb:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of {beatname_uc} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes,callouts"]
------------------------------------------------
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-amd64.deb
sudo dpkg -i filebeat-{version}-amd64.deb
------------------------------------------------

endif::[]

[[rpm]]
*rpm:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of {beatname_uc} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes,callouts"]
------------------------------------------------
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-x86_64.rpm
sudo rpm -vi filebeat-{version}-x86_64.rpm
------------------------------------------------

endif::[]

[[mac]]
*mac:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of {beatname_uc} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes,callouts"]
------------------------------------------------
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-darwin-x86_64.tar.gz
tar xzvf filebeat-{version}-darwin-x86_64.tar.gz
------------------------------------------------

endif::[]

include::{libbeat-dir}/shared-brew-install.asciidoc[]

[[linux]]
*linux:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of {beatname_uc} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

["source","sh",subs="attributes,callouts"]
------------------------------------------------
curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-linux-x86_64.tar.gz
tar xzvf filebeat-{version}-linux-x86_64.tar.gz
------------------------------------------------

endif::[]

[[docker]]
*docker:*

See <<running-on-docker, Running on Docker>> for deploying Docker containers.

[[kubernetes]]
*kubernetes:*

See <<running-on-kubernetes, Running on Kubernetes>> for deploying with Kubernetes.

[[cloudfoundry]]
*cloudfoundry:*

See <<running-on-cloudfoundry, Running on Cloud Foundry>> for deploying with Cloud Foundry.

[[win]]
*win:*

ifeval::["{release-state}"=="unreleased"]

Version {version} of {beatname_uc} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

. Download the Filebeat Windows zip file from the
https://www.elastic.co/downloads/beats/filebeat[downloads page].

. Extract the contents of the zip file into `C:\Program Files`.

. Rename the `filebeat-<version>-windows` directory to `Filebeat`.

. Open a PowerShell prompt as an Administrator (right-click the PowerShell icon and select *Run As Administrator*).

. From the PowerShell prompt, run the following commands to install Filebeat as a
Windows service:
+
[source,shell]
----------------------------------------------------------------------
PS > cd 'C:\Program Files\Filebeat'
PS C:\Program Files\Filebeat> .\install-service-filebeat.ps1
----------------------------------------------------------------------

NOTE: If script execution is disabled on your system, you need to set the execution policy for the current session to allow the script to run. For example: `PowerShell.exe -ExecutionPolicy UnRestricted -File .\install-service-filebeat.ps1`.

endif::[]

[float]
[[set-connection]]
=== Step 2: Set the connection information

Connections to {es} and {kib} are required to set up and run {beatname_uc}.

include::{libbeat-dir}/step-configure-output.asciidoc[]

include::{libbeat-dir}/step-configure-kibana-endpoint.asciidoc[]

include::{libbeat-dir}/step-configure-credentials.asciidoc[]

include::{libbeat-dir}/step-test-config.asciidoc[]

[float]
[[enable-modules]]
=== Step 3: Enable and configure data collection modules

{beatname_uc} uses modules to collect and parse log data.

. Look under <<filebeat-modules,modules>> to see what's available for your file type.
+
Can't find a module for your log file type? You'll need to
<<configuration-filebeat-options,configure the input>> and parse the log
messages manually.

. From the installation directory, enable one or more modules. For example, the
following command enables the system, nginx, and mysql modules:
+
include::./include/enable-modules-command.asciidoc[]
+
To see a list of enabled and disabled modules, run:
+
include::./include/list-modules-command.asciidoc[]

. In the `.yml` configs under `modules.d`, change the module settings to match
your environment.
+
The default log locations are set based on the OS. If your logs aren't in
default locations, set the `paths` variable. For example:
+
[source,yaml]
----
- module: nginx
  access:
    var.paths: ["/var/log/nginx/access.log*"] <1> 
----
+
See <<configuration-filebeat-modules>> for more information about setting
variables and advanced options.

[float]
[[setup-modules]]
=== Step 4: Set up assets

{beatname_uc} comes with preconfigured assets for visualizing and parsing log
data. To set up these assets, the user specified in +{beatname_lc}.yml+ 
requires extra privileges. For more information, see
<<privileges-to-setup-beats>>.

To set up {beatname_uc}, from the installation directory, run:

include::./include/setup-command.asciidoc[]
 

[float]
[[filebeat-starting]]
=== Step 5: Start {beatname_uc}

Before starting {beatname_uc}, change the user credentials in
the +{beatname_lc}.yml+ to a user that has restricted privileges,
especially if you're running {beatname_uc} in a production environment.
For more information, see <<privileges-to-publish-events>>.

To start {beatname_uc}, run:

*deb and rpm:*

["source","sh",subs="attributes"]
----------------------------------------------------------------------
sudo service {beatname_lc} start
----------------------------------------------------------------------

*docker:*

See <<running-on-docker>>.

*mac and linux:*

[source,shell]
----------------------------------------------------------------------
sudo chown root filebeat.yml <1>
sudo ./filebeat -e
----------------------------------------------------------------------
<1> You'll be running {beatname_uc} as root, so you need to change ownership
of the configuration file, or run Filebeat with `--strict.perms=false`
specified. See
{beats-ref}/config-file-permissions.html[Config File Ownership and Permissions]
in the _Beats Platform Reference_.

include::{libbeat-dir}/shared-brew-run.asciidoc[]

*win:*

[source,shell]
----------------------------------------------------------------------
PS C:\Program Files\Filebeat> Start-Service filebeat
----------------------------------------------------------------------

By default, Windows log files are stored in `C:\ProgramData\filebeat\Logs`.

{beatname_uc} should begin streaming log events to {es}.

[float]
[[view-kibana-dashboards]]
=== Step 6: View the {kib} dashboards

{beatname_uc} comes with preconfigured dashboards and UIs for visualizing log
data. 

include::{libbeat-dir}/opendashboards.asciidoc[]

Here is an example of the system dashboard:

[role="screenshot"]
image::./images/kibana-system.png[]
