:modulename: system nginx mysql
:release-state: released

[[filebeat-getting-started]]
== Get started

//TODO: We need to add a separate topic that provides a summary of the different
//ways to parse log lines: ingest node, dissect processor, Logstash, etc. That
//is beyond the scope of a quick start, IMO.

++++
<titleabbrev>Get started</titleabbrev>
++++

This guide describes how to get up and running quickly with log collection.
You'll learn how to:

* install {beatname_uc} on each system you want to monitor
* specify the location of your log files
* parse log data into fields and send it to {es}
* visualize the log data in {kib}

[float]
=== Before you begin

You need {es} for storing and searching your data, and {kib} for visualizing and
managing it.

// TODO: We might want to provide the instructions for spinning up a deployment
// here. See
// https://github.com/elastic/docs/pull/1815/files#diff-934228d98950ff95c8c53444966daeaeR10
// Or link to the topic that's avaialable for cloud.

include::{libbeat-dir}/tab-widgets/spinup-stack-widget.asciidoc[]

[float]
[[filebeat-installation]]
=== Step 1: Install {beatname_uc}

//REVIEWERS: We don't currently say anything about licensing here. Should we?

To download and install {beatname_uc}, use the commands that work with your
system.

include::{libbeat-dir}/tab-widgets/install-widget.asciidoc[]

[float]
[[other-installation-options]]
==== Other installation options

* <<setup-repositories>>
* https://www.elastic.co/downloads/beats/{beatname_lc}[Download page] 
* <<running-on-docker>>
* <<running-on-kubernetes>> 
* <<running-on-cloudfoundry>> 

[float]
[[set-connection]]
=== Step 2: Set the connection information

Connections to {es} and {kib} are required to set up {beatname_uc}.

Set the connection information in +{beatname_lc}.yml+:

include::{libbeat-dir}/tab-widgets/set-connection-widget.asciidoc[]

NOTE: {beatname_uc} supports other <<configuring-output,outputs>>,
ifndef::no-output-logstash[]
such as {ls},
endif::no-output-logstash[]
but typically you'll send events directly to {es}.

To learn more about required roles and privileges, see
<<feature-roles>>.

include::{libbeat-dir}/step-test-config.asciidoc[]


[float]
[[enable-modules]]
=== Step 3: Enable and configure data collection modules

{beatname_uc} uses modules to collect and parse log data.

. Identify the modules you need to enable.
+
To see the list of available <<filebeat-modules,modules>>,
run:
+
--
include::{libbeat-dir}/tab-widgets/list-modules-widget.asciidoc[]
--
+
Can't find a module for your file type? You'll need to
<<configuration-filebeat-options,configure the input>> manually.

. From the installation directory, enable one or more modules. For example, the
following command enables the `system`, `nginx`, and `mysql` module
configs:
+
--
include::{libbeat-dir}/tab-widgets/enable-modules-widget.asciidoc[]
--
+
In the module configs under `modules.d`, change the module settings to match
your environment.
+
The default log locations are set based on the OS. If your logs aren't in
default locations, set the `paths` variable. For example:
+
--
[source,yaml]
----
- module: nginx
  access:
    var.paths: ["/var/log/nginx/access.log*"] <1> 
----
--
+
See <<configuration-filebeat-modules>> for more information about setting
variables and advanced options.

[float]
[[setup-modules]]
=== Step 4: Set up assets

{beatname_uc} comes with preconfigured assets for visualizing and parsing log
data. To set up these assets, the user specified in +{beatname_lc}.yml+ 
requires extra privileges. For more information, see
<<privileges-to-setup-beats>>.

To set up {beatname_uc}, from the installation directory, run:

include::{libbeat-dir}/tab-widgets/setup-widget.asciidoc[]

//TODO: This text should be single-sourced
The <<setup-command,`setup`>> command loads the recommended index template for
writing to {es} and deploys the sample dashboards (if available) for visualizing
the data in {kib}. This is a one-time setup step. 

The `-e` flag is optional and sends output to standard error instead of syslog.

The ingest pipelines used to parse log lines are set up automatically the first
time you run the module, assuming the {es} output is enabled. If you're sending
events to {ls}, also see <<load-ingest-pipelines>>.

[float]
[[filebeat-starting]]
=== Step 5: Start {beatname_uc}

Before starting {beatname_uc}, change the user credentials in
the +{beatname_lc}.yml+ to a user that has restricted privileges,
especially if you're running {beatname_uc} in a production environment.
For more information, see <<privileges-to-publish-events>>.

To start {beatname_uc}, run:

include::{libbeat-dir}/tab-widgets/start-widget.asciidoc[]

[float]
[[view-kibana-dashboards]]
=== Step 6: View the {kib} dashboards

{beatname_uc} comes with preconfigured dashboards and UIs for visualizing log
data. 

include::{libbeat-dir}/opendashboards.asciidoc[]

Here is an example of the system dashboard:

[role="screenshot"]
image::./images/kibana-system.png[]

//Add links to the Logs UI here.

[float]
=== What's next?

//Highlight the other pillars of observability here.

Now that you have logs streaming into {es}, read Get started with Metricbeat
to learn how to collect metrics about the systems and services running in your
infrastructure.
