[[migrate-to-filestream]]
== Migrate `log` input configurations to `filestream`

The `filestream` input has been generally available since 7.14 and it is highly recommended
you migrate your existing `log` input configurations. The `filestream` input comes with many
improvements over the old `log` input, such as configurable order for parsers and more.

The `log` input is deprecated and will eventually be removed from Filebeat. We are not fixing
new issues or adding any enhancements to the `log` input. Our focus is on `filestream`.

This manual migration is required only if you've defined `log` inputs manually
in your stand-alone Filebeat configuration. All the integrations or modules that are still using
`log` inputs under the hood will be eventually migrated automatically without any additional actions
required from the user.

In this guide, you'll learn how to migrate an existing `log` input configuration.

IMPORTANT: You must replace `log` inputs with `filestream` inputs, make sure you have removed
all the old `log` inputs from the configuration before starting Filebeat with the new `filestream` inputs. Running old `log` inputs and new `filestream` inputs pointed to the same files will lead to data duplication.

The following example shows three `log` inputs:

[source,yaml]
----
filebeat.inputs:
 - type: log
   enabled: true
   paths:
     - /var/log/java-exceptions*.log
   multiline:
    pattern: '^\['
    negate: true
    match: after
  close_removed: true
  close_renamed: true

- type: log
  enabled: true
  paths:
    - /var/log/my-application*.json
  scan_frequency: 1m
  json.keys_under_root: true

- type: log
  enabled: true
  paths:
    - /var/log/my-old-files*.log
  tail_files: true
----

For this example, let's assume that the `log` input is used to collect logs from the following files. The progress of data collection is shown for each file.
["source","sh",subs="attributes"]
----
/var/log/java-exceptions1.log (100%)
/var/log/java-exceptions2.log (100%)
/var/log/java-exceptions3.log (75%)
/var/log/java-exceptions4.log (0%)
/var/log/java-exceptions5.log (0%)
/var/log/my-application1.json (100%)
/var/log/my-application2.json (5%)
/var/log/my-application3.json (0%)
/var/log/my-old-files1.json (0%)
----

=== Step 1: Set an identifier for each `filestream` input

All `filestream` inputs require an ID. Ensure you set a unique identifier for every input.

IMPORTANT: Never change the ID of an input, or you will end up with duplicate events.

[source,yaml]
----
filebeat.inputs:
- type: filestream
  enabled: true
  id: my-java-collector
  paths:
    - /var/log/java-exceptions*.log

- type: filestream
  enabled: true
  id: my-application-input
  paths:
    - /var/log/my-application*.json

- type: filestream
  enabled: true
  id: my-old-files
  paths:
    - /var/log/my-old-files*.log
----

=== Step 2: Enable the `take over` mode

Now, to indicate that the new `filestream` is supposed to take over the files from a previously
defined `log` input, we need to add `take_over: true` to each new `filestream`. This will make sure
that the new `filestream` inputs will continue ingesting files from the same offset where the `log`
inputs stopped.

IMPORTANT: If this parameter is not set, all the files will be re-ingested from the beginning
and this will lead to data duplication. Please, double-check that this parameter is set.

[source,yaml]
----
filebeat.inputs:
- type: filestream
  enabled: true
  id: my-java-collector
  take_over: true
  paths:
    - /var/log/java-exceptions*.log

- type: filestream
  enabled: true
  id: my-application-input
  take_over: true
  paths:
    - /var/log/my-application*.json

- type: filestream
  enabled: true
  id: my-old-files
  take_over: true
  paths:
    - /var/log/my-old-files*.log
----

=== Step 3: Use new option names

Several options are renamed in `filestream`. You can find a table with all of the
changed configuration names at the end of this guide.

The most significant change you have to know about is in parsers. The configuration of
`multiline`, `json`, and other parsers has changed. Now the ordering is
configurable, so `filestream` expects a list of parsers. Furthermore, the `json`
parser was renamed to `ndjson`.

The example configuration shown earlier needs to be adjusted as well:

[source,yaml]
----
- type: filestream
  enabled: true
  id: my-java-collector
  take_over: true
  paths:
    - /var/log/java-exceptions*.log
  parsers:
    - multiline:
        pattern: '^\['
        negate: true
        match: after
  close.on_state_change.removed: true
  close.on_state_change.renamed: true

- type: filestream
  enabled: true
  id: my-application-input
  take_over: true
  paths:
    - /var/log/my-application*.json
  prospector.scanner.check_interval: 1m
  parsers:
    - ndjson:
        keys_under_root: true

- type: filestream
  enabled: true
  id: my-old-files
  take_over: true
  paths:
    - /var/log/my-old-files*.log
  ignore_inactive: since_last_start
----

[cols="1,1"]
|===
|Option name in log input
|Option name in filestream input

|recursive_glob.enabled
|prospector.scanner.recursive_glob

|harvester_buffer_size
|buffer_size

|max_bytes
|message_max_bytes

|json
|parsers.n.ndjson

|multiline
|parsers.n.multiline

|exclude_files
|prospector.scanner.exclude_files

|close_inactive
|close.on_state_change.inactive

|close_removed
|close.on_state_change.removed

|close_eof
|close.reader.on_eof

|close_timeout
|close.reader.after_interval

|close_inactive
|close.on_state_change.inactive

|scan_frequency
|prospector.scanner.check_interval

|tail_files
|ignore_inactive.since_last_start

|symlinks
|prospector.scanner.symlinks

|backoff
|backoff.init

|backoff_max
|backoff.max
|===

=== If something went wrong

If for whatever reason you'd like to revert the configuration after running the migrated configuration
and return to old `log` inputs the files that were taken by `filestream` inputs, you need to do the following:

1. Stop Filebeat as soon as possible
2. Find your <<configuration-global-options,`registry.path/filebeat` directory>>
3. Find the created backup files, they have the `<timestamp>.bak` suffix. If you have multiple backups for the same file, choose the one with the more recent timestamp.
4. Replace the files with their backups, e.g. `log.json` should be replaced by `log.json-1674152412247684000.bak`
5. Run Filebeat with the old configuration (no `filestream` inputs with `take_over: true`).

NOTE: Reverting to backups might cause some events to repeat, depends on the amount of time the new configuration was running.
