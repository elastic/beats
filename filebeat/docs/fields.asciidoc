
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by Filebeat. They are
grouped in the following categories:

* <<exported-fields-apache>>
* <<exported-fields-auditd>>
* <<exported-fields-beat>>
* <<exported-fields-cisco>>
* <<exported-fields-cloud>>
* <<exported-fields-coredns>>
* <<exported-fields-docker-processor>>
* <<exported-fields-ecs>>
* <<exported-fields-elasticsearch>>
* <<exported-fields-envoyproxy>>
* <<exported-fields-haproxy>>
* <<exported-fields-host-processor>>
* <<exported-fields-icinga>>
* <<exported-fields-iis>>
* <<exported-fields-iptables>>
* <<exported-fields-jolokia-autodiscover>>
* <<exported-fields-kafka>>
* <<exported-fields-kibana>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-log>>
* <<exported-fields-logstash>>
* <<exported-fields-mongodb>>
* <<exported-fields-mssql>>
* <<exported-fields-mysql>>
* <<exported-fields-nats>>
* <<exported-fields-netflow>>
* <<exported-fields-netflow-module>>
* <<exported-fields-nginx>>
* <<exported-fields-osquery>>
* <<exported-fields-panw>>
* <<exported-fields-postgresql>>
* <<exported-fields-process>>
* <<exported-fields-rabbitmq>>
* <<exported-fields-redis>>
* <<exported-fields-santa>>
* <<exported-fields-suricata>>
* <<exported-fields-system>>
* <<exported-fields-traefik>>
* <<exported-fields-zeek>>

--
[[exported-fields-apache]]
== Apache fields

Apache Module



[float]
== apache2 fields

Aliases for backward compatibility with old apache2 fields




*`apache2.access.remote_ip`*::
+
--
type: alias

alias to: source.address

--

*`apache2.access.ssl.protocol`*::
+
--
type: alias

alias to: apache.access.ssl.protocol

--

*`apache2.access.ssl.cipher`*::
+
--
type: alias

alias to: apache.access.ssl.cipher

--

*`apache2.access.body_sent.bytes`*::
+
--
type: alias

alias to: http.response.body.bytes

--

*`apache2.access.user_name`*::
+
--
type: alias

alias to: user.name

--

*`apache2.access.method`*::
+
--
type: alias

alias to: http.request.method

--

*`apache2.access.url`*::
+
--
type: alias

alias to: url.original

--

*`apache2.access.http_version`*::
+
--
type: alias

alias to: http.version

--

*`apache2.access.response_code`*::
+
--
type: alias

alias to: http.response.status_code

--

*`apache2.access.referrer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`apache2.access.agent`*::
+
--
type: alias

alias to: user_agent.original

--


*`apache2.access.user_agent.device`*::
+
--
type: alias

alias to: user_agent.device.name

--

*`apache2.access.user_agent.name`*::
+
--
type: alias

alias to: user_agent.name

--

*`apache2.access.user_agent.os`*::
+
--
type: alias

alias to: user_agent.os.full_name

--

*`apache2.access.user_agent.os_name`*::
+
--
type: alias

alias to: user_agent.os.name

--

*`apache2.access.user_agent.original`*::
+
--
type: alias

alias to: user_agent.original

--


*`apache2.access.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`apache2.access.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`apache2.access.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`apache2.access.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`apache2.access.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`apache2.access.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--


*`apache2.error.level`*::
+
--
type: alias

alias to: log.level

--

*`apache2.error.message`*::
+
--
type: alias

alias to: message

--

*`apache2.error.pid`*::
+
--
type: alias

alias to: process.pid

--

*`apache2.error.tid`*::
+
--
type: alias

alias to: process.thread.id

--

*`apache2.error.module`*::
+
--
type: alias

alias to: apache.error.module

--

[float]
== apache fields

Apache fields.



[float]
== access fields

Contains fields for the Apache HTTP Server access logs.



*`apache.access.ssl.protocol`*::
+
--
type: keyword

SSL protocol version.


--

*`apache.access.ssl.cipher`*::
+
--
type: keyword

SSL cipher name.


--

[float]
== error fields

Fields from the Apache error logs.



*`apache.error.module`*::
+
--
type: keyword

The module producing the logged message.


--

[[exported-fields-auditd]]
== Auditd fields

Module for parsing auditd logs.




*`user.terminal`*::
+
--
type: keyword

Terminal or tty device on which the user is performing the observed activity.


--


*`user.audit.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.audit.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.


--

*`user.audit.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.


--

*`user.audit.group.name`*::
+
--
type: keyword

Name of the group.


--


*`user.effective.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.effective.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.


--

*`user.effective.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.


--

*`user.effective.group.name`*::
+
--
type: keyword

Name of the group.


--


*`user.filesystem.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.filesystem.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.


--

*`user.filesystem.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.


--

*`user.filesystem.group.name`*::
+
--
type: keyword

Name of the group.


--


*`user.owner.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.owner.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.


--

*`user.owner.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.


--

*`user.owner.group.name`*::
+
--
type: keyword

Name of the group.


--


*`user.saved.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.


--

*`user.saved.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.


--

*`user.saved.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.


--

*`user.saved.group.name`*::
+
--
type: keyword

Name of the group.


--

[float]
== auditd fields

Fields from the auditd logs.



[float]
== log fields

Fields from the Linux audit log. Not all fields are documented here because they are dynamic and vary by audit event type.



*`auditd.log.old_auid`*::
+
--
For login events this is the old audit ID used for the user prior to this login.


--

*`auditd.log.new_auid`*::
+
--
For login events this is the new audit ID. The audit ID can be used to trace future events to the user even if their identity changes (like becoming root).


--

*`auditd.log.old_ses`*::
+
--
For login events this is the old session ID used for the user prior to this login.


--

*`auditd.log.new_ses`*::
+
--
For login events this is the new session ID. It can be used to tie a user to future events by session ID.


--

*`auditd.log.sequence`*::
+
--
type: long

The audit event sequence number.


--

*`auditd.log.items`*::
+
--
The number of items in an event.


--

*`auditd.log.item`*::
+
--
The item field indicates which item out of the total number of items. This number is zero-based; a value of 0 means it is the first item.


--

*`auditd.log.tty`*::
+
--
type: keyword

--

*`auditd.log.a0`*::
+
--
The first argument to the system call.


--

*`auditd.log.addr`*::
+
--
type: ip

--

*`auditd.log.rport`*::
+
--
type: long

--

*`auditd.log.laddr`*::
+
--
type: ip

--

*`auditd.log.lport`*::
+
--
type: long

--

*`auditd.log.acct`*::
+
--
type: alias

alias to: user.name

--

*`auditd.log.pid`*::
+
--
type: alias

alias to: process.pid

--

*`auditd.log.ppid`*::
+
--
type: alias

alias to: process.ppid

--

*`auditd.log.res`*::
+
--
type: alias

alias to: event.outcome

--

*`auditd.log.record_type`*::
+
--
type: alias

alias to: event.action

--


*`auditd.log.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`auditd.log.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`auditd.log.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`auditd.log.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`auditd.log.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`auditd.log.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

*`auditd.log.arch`*::
+
--
type: alias

alias to: host.architecture

--

*`auditd.log.gid`*::
+
--
type: alias

alias to: user.group.id

--

*`auditd.log.uid`*::
+
--
type: alias

alias to: user.id

--

*`auditd.log.agid`*::
+
--
type: alias

alias to: user.audit.group.id

--

*`auditd.log.auid`*::
+
--
type: alias

alias to: user.audit.id

--

*`auditd.log.fsgid`*::
+
--
type: alias

alias to: user.filesystem.group.id

--

*`auditd.log.fsuid`*::
+
--
type: alias

alias to: user.filesystem.id

--

*`auditd.log.egid`*::
+
--
type: alias

alias to: user.effective.group.id

--

*`auditd.log.euid`*::
+
--
type: alias

alias to: user.effective.id

--

*`auditd.log.sgid`*::
+
--
type: alias

alias to: user.saved.group.id

--

*`auditd.log.suid`*::
+
--
type: alias

alias to: user.saved.id

--

*`auditd.log.ogid`*::
+
--
type: alias

alias to: user.owner.group.id

--

*`auditd.log.ouid`*::
+
--
type: alias

alias to: user.owner.id

--

*`auditd.log.comm`*::
+
--
type: alias

alias to: process.name

--

*`auditd.log.exe`*::
+
--
type: alias

alias to: process.executable

--

*`auditd.log.terminal`*::
+
--
type: alias

alias to: user.terminal

--

*`auditd.log.msg`*::
+
--
type: alias

alias to: message

--

*`auditd.log.src`*::
+
--
type: alias

alias to: source.address

--

*`auditd.log.dst`*::
+
--
type: alias

alias to: destination.address

--

[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`agent.hostname`*::
+
--
type: keyword

Hostname of the agent.

--

*`beat.timezone`*::
+
--
type: alias

alias to: event.timezone

--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.type`*::
+
--
type: keyword

Error type.


--

*`beat.name`*::
+
--
type: alias

alias to: host.name

--

*`beat.hostname`*::
+
--
type: alias

alias to: agent.hostname

--

*`timeseries.instance`*::
+
--
type: keyword

Time series instance id

--

[[exported-fields-cisco]]
== Cisco fields

Module for handling Cisco network device logs.



[float]
== cisco fields

Fields from Cisco logs.



[float]
== asa fields

Fields for Cisco ASA Firewall.



*`cisco.asa.message_id`*::
+
--
type: keyword

The Cisco ASA message identifier.


--

*`cisco.asa.suffix`*::
+
--
type: keyword

example: session

Optional suffix after %ASA identifier.


--

*`cisco.asa.source_interface`*::
+
--
type: keyword

Source interface for the flow or event.


--

*`cisco.asa.destination_interface`*::
+
--
type: keyword

Destination interface for the flow or event.


--

*`cisco.asa.list_id`*::
+
--
type: keyword

Name of the Access Control List that matched this event.


--

*`cisco.asa.source_username`*::
+
--
type: keyword

Name of the user that is the source for this event.


--

*`cisco.asa.destination_username`*::
+
--
type: keyword

Name of the user that is the destination for this event.


--

*`cisco.asa.mapped_source_ip`*::
+
--
type: ip

The translated source IP address.


--

*`cisco.asa.mapped_source_port`*::
+
--
type: long

The translated source port.


--

*`cisco.asa.mapped_destination_ip`*::
+
--
type: ip

The translated destination IP address.


--

*`cisco.asa.mapped_destination_port`*::
+
--
type: long

The translated destination port.


--

*`cisco.asa.threat_level`*::
+
--
type: keyword

Threat level for malware / botnet traffic. One of very-low, low, moderate, high or very-high.


--

*`cisco.asa.threat_category`*::
+
--
type: keyword

Category for the malware / botnet traffic. For example: virus, botnet, trojan, etc.


--

*`cisco.asa.connection_id`*::
+
--
type: keyword

Unique identifier for a flow.


--

*`cisco.asa.icmp_type`*::
+
--
type: short

ICMP type.


--

*`cisco.asa.icmp_code`*::
+
--
type: short

ICMP code.


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`cloud.project.id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`cloud.image.id`*::
+
--
example: ami-abcd1234

Image ID for the cloud instance.


--

*`meta.cloud.provider`*::
+
--
type: alias

alias to: cloud.provider

--

*`meta.cloud.instance_id`*::
+
--
type: alias

alias to: cloud.instance.id

--

*`meta.cloud.instance_name`*::
+
--
type: alias

alias to: cloud.instance.name

--

*`meta.cloud.machine_type`*::
+
--
type: alias

alias to: cloud.machine.type

--

*`meta.cloud.availability_zone`*::
+
--
type: alias

alias to: cloud.availability_zone

--

*`meta.cloud.project_id`*::
+
--
type: alias

alias to: cloud.project.id

--

*`meta.cloud.region`*::
+
--
type: alias

alias to: cloud.region

--

[[exported-fields-coredns]]
== Coredns fields

Module for handling logs produced by coredns



[float]
== coredns fields

coredns fields after normalization



*`coredns.id`*::
+
--
type: keyword

id of the DNS transaction


--

*`coredns.query.size`*::
+
--
type: integer

format: bytes

size of the DNS query


--

*`coredns.query.class`*::
+
--
type: keyword

DNS query class


--

*`coredns.query.name`*::
+
--
type: keyword

DNS query name


--

*`coredns.query.type`*::
+
--
type: keyword

DNS query type


--

*`coredns.response.code`*::
+
--
type: keyword

DNS response code


--

*`coredns.response.flags`*::
+
--
type: keyword

DNS response flags


--

*`coredns.response.size`*::
+
--
type: integer

format: bytes

size of the DNS response


--

*`coredns.dnssec_ok`*::
+
--
type: boolean

dnssec flag


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: alias

alias to: container.id

--

*`docker.container.image`*::
+
--
type: alias

alias to: container.image.name

--

*`docker.container.name`*::
+
--
type: alias

alias to: container.name

--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-ecs]]
== ECS fields

ECS Fields.


*`@timestamp`*::
+
--
type: date

example: 2016-05-23T08:05:34.853Z

required: True

Date/time when the event originated.
This is the date/time extracted from the event, typically representing when the event was generated by the source.
If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
Required field for all events.

--

*`labels`*::
+
--
type: object

example: {'application': 'foo-bar', 'env': 'production'}

Custom key/value pairs.
Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
Example: `docker` and `k8s` labels.

--

*`message`*::
+
--
type: text

example: Hello World

For log events the message field contains the log message, optimized for viewing in a log viewer.
For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
If multiple messages exist, they can be combined into one message.

--

*`tags`*::
+
--
type: keyword

example: ["production", "env2"]

List of keywords used to tag each event.

--

[float]
== agent fields

The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.
Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.


*`agent.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this agent (if one exists).
This id normally changes across restarts, but `agent.id` does not.

--

*`agent.id`*::
+
--
type: keyword

example: 8a4f500d

Unique identifier of this agent (if one exists).
Example: For Beats this would be beat.id.

--

*`agent.name`*::
+
--
type: keyword

example: foo

Custom name of the agent.
This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
If no name is given, the name is often left empty.

--

*`agent.type`*::
+
--
type: keyword

example: filebeat

Type of the agent.
The agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.

--

*`agent.version`*::
+
--
type: keyword

example: 6.0.0-rc2

Version of the agent.

--

[float]
== client fields

A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term "originator" to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields. Client fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.


*`client.address`*::
+
--
type: keyword

Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

--

*`client.bytes`*::
+
--
type: long

example: 184

format: bytes

Bytes sent from the client to the server.

--

*`client.domain`*::
+
--
type: keyword

Client domain.

--

*`client.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`client.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`client.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`client.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`client.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`client.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`client.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`client.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`client.ip`*::
+
--
type: ip

IP address of the client.
Can be one or multiple IPv4 or IPv6 addresses.

--

*`client.mac`*::
+
--
type: keyword

MAC address of the client.

--

*`client.packets`*::
+
--
type: long

example: 12

Packets sent from the client to the server.

--

*`client.port`*::
+
--
type: long

format: string

Port of the client.

--

*`client.user.email`*::
+
--
type: keyword

User email address.

--

*`client.user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`client.user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`client.user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`client.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`client.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`client.user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== cloud fields

Fields related to the cloud or infrastructure the events are coming from.


*`cloud.account.id`*::
+
--
type: keyword

example: 666777888999

The cloud account or organization id used to identify different entities in a multi-tenant environment.
Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

--

*`cloud.availability_zone`*::
+
--
type: keyword

example: us-east-1c

Availability zone in which this host is running.

--

*`cloud.instance.id`*::
+
--
type: keyword

example: i-1234567890abcdef0

Instance ID of the host machine.

--

*`cloud.instance.name`*::
+
--
type: keyword

Instance name of the host machine.

--

*`cloud.machine.type`*::
+
--
type: keyword

example: t2.medium

Machine type of the host machine.

--

*`cloud.provider`*::
+
--
type: keyword

example: aws

Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

--

*`cloud.region`*::
+
--
type: keyword

example: us-east-1

Region in which this host is running.

--

[float]
== container fields

Container fields are used for meta information about the specific container that is the source of information.
These fields help correlate data based containers from any runtime.


*`container.id`*::
+
--
type: keyword

Unique container id.

--

*`container.image.name`*::
+
--
type: keyword

Name of the image the container was built on.

--

*`container.image.tag`*::
+
--
type: keyword

Container image tag.

--

*`container.labels`*::
+
--
type: object

Image labels.

--

*`container.name`*::
+
--
type: keyword

Container name.

--

*`container.runtime`*::
+
--
type: keyword

example: docker

Runtime managing this container.

--

[float]
== destination fields

Destination fields describe details about the destination of a packet/event.
Destination fields are usually populated in conjunction with source fields.


*`destination.address`*::
+
--
type: keyword

Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

--

*`destination.bytes`*::
+
--
type: long

example: 184

format: bytes

Bytes sent from the destination to the source.

--

*`destination.domain`*::
+
--
type: keyword

Destination domain.

--

*`destination.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`destination.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`destination.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`destination.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`destination.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`destination.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`destination.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`destination.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`destination.ip`*::
+
--
type: ip

IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.

--

*`destination.mac`*::
+
--
type: keyword

MAC address of the destination.

--

*`destination.packets`*::
+
--
type: long

example: 12

Packets sent from the destination to the source.

--

*`destination.port`*::
+
--
type: long

format: string

Port of the destination.

--

*`destination.user.email`*::
+
--
type: keyword

User email address.

--

*`destination.user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`destination.user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`destination.user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`destination.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`destination.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`destination.user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== ecs fields

Meta-information specific to ECS.


*`ecs.version`*::
+
--
type: keyword

example: 1.0.0

required: True

ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.

--

[float]
== error fields

These fields can represent errors of any kind.
Use them for errors that happen while fetching events or in cases where the event itself contains an error.


*`error.code`*::
+
--
type: keyword

Error code describing the error.

--

*`error.id`*::
+
--
type: keyword

Unique identifier for the error.

--

*`error.message`*::
+
--
type: text

Error message.

--

[float]
== event fields

The event fields are used for context information about the log or metric event itself.
A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical or categorical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host, or vulnerabilities measured on a scanned host.


*`event.action`*::
+
--
type: keyword

example: user-password-change

The action captured by the event.
This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.

--

*`event.category`*::
+
--
type: keyword

example: user-management

Event category.
This contains high-level information about the contents of the event. It is more generic than `event.action`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

--

*`event.created`*::
+
--
type: date

event.created contains the date/time when the event was first read by an agent, or by your pipeline.
This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
In case the two timestamps are identical, @timestamp should be used.

--

*`event.dataset`*::
+
--
type: keyword

example: stats

Name of the dataset.
The concept of a `dataset` (fileset / metricset) is used in Beats as a subset of modules. It contains the information which is currently stored in metricset.name and metricset.module or fileset.name.

--

*`event.duration`*::
+
--
type: long

format: duration

Duration of the event in nanoseconds.
If event.start and event.end are known this value should be the difference between the end and start time.

--

*`event.end`*::
+
--
type: date

event.end contains the date when the event ended or when the activity was last observed.

--

*`event.hash`*::
+
--
type: keyword

example: 123456789012345678901234567890ABCD

Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.

--

*`event.id`*::
+
--
type: keyword

example: 8a4f500d

Unique ID to describe the event.

--

*`event.kind`*::
+
--
type: keyword

example: state

The kind of the event.
This gives information about what type of information the event contains, without being specific to the contents of the event.  Examples are `event`, `state`, `alarm`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

--

*`event.module`*::
+
--
type: keyword

example: mysql

Name of the module this data is coming from.
This information is coming from the modules used in Beats or Logstash.

--

*`event.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232

Raw text message of entire event. Used to demonstrate log integrity.
This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.

--

*`event.outcome`*::
+
--
type: keyword

example: success

The outcome of the event.
If the event describes an action, this fields contains the outcome of that action. Examples outcomes are `success` and `failure`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

--

*`event.risk_score`*::
+
--
type: float

Risk score or priority of the event (e.g. security solutions). Use your system's original value here.

--

*`event.risk_score_norm`*::
+
--
type: float

Normalized risk score or priority of the event, on a scale of 0 to 100.
This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.

--

*`event.severity`*::
+
--
type: long

example: 7

format: string

Severity describes the original severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.

--

*`event.start`*::
+
--
type: date

event.start contains the date when the event started or when the activity was first observed.

--

*`event.timezone`*::
+
--
type: keyword

This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").

--

*`event.type`*::
+
--
type: keyword

Reserved for future usage.
Please avoid using this field for user data.

--

[float]
== file fields

A file is defined as a set of information that has been created on, or has existed on a filesystem.
File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.


*`file.ctime`*::
+
--
type: date

Last time file metadata changed.

--

*`file.device`*::
+
--
type: keyword

Device that is the source of the file.

--

*`file.extension`*::
+
--
type: keyword

example: png

File extension.
This should allow easy filtering by file extensions.

--

*`file.gid`*::
+
--
type: keyword

Primary group ID (GID) of the file.

--

*`file.group`*::
+
--
type: keyword

Primary group name of the file.

--

*`file.inode`*::
+
--
type: keyword

Inode representing the file in the filesystem.

--

*`file.mode`*::
+
--
type: keyword

example: 416

Mode of the file in octal representation.

--

*`file.mtime`*::
+
--
type: date

Last time file content was modified.

--

*`file.owner`*::
+
--
type: keyword

File owner's username.

--

*`file.path`*::
+
--
type: keyword

Path to the file.

--

*`file.size`*::
+
--
type: long

File size in bytes (field is only added when `type` is `file`).

--

*`file.target_path`*::
+
--
type: keyword

Target path for symlinks.

--

*`file.type`*::
+
--
type: keyword

File type (file, dir, or symlink).

--

*`file.uid`*::
+
--
type: keyword

The user ID (UID) or security identifier (SID) of the file owner.

--

[float]
== geo fields

Geo fields can carry data about a specific location related to an event.
This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.


*`geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

[float]
== group fields

The group fields are meant to represent groups that are relevant to the event.


*`group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`group.name`*::
+
--
type: keyword

Name of the group.

--

[float]
== host fields

A host is defined as a general computing instance.
ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.


*`host.architecture`*::
+
--
type: keyword

example: x86_64

Operating system architecture.

--

*`host.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`host.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`host.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`host.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`host.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`host.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`host.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`host.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`host.hostname`*::
+
--
type: keyword

Hostname of the host.
It normally contains what the `hostname` command returns on the host machine.

--

*`host.id`*::
+
--
type: keyword

Unique host id.
As hostname is not always unique, use values that are meaningful in your environment.
Example: The current usage of `beat.name`.

--

*`host.ip`*::
+
--
type: ip

Host ip address.

--

*`host.mac`*::
+
--
type: keyword

Host mac address.

--

*`host.name`*::
+
--
type: keyword

Name of the host.
It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.

--

*`host.os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).

--

*`host.os.full`*::
+
--
type: keyword

example: Mac OS Mojave

Operating system name, including the version or code name.

--

*`host.os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.

--

*`host.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name, without the version.

--

*`host.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).

--

*`host.os.version`*::
+
--
type: keyword

example: 10.14.1

Operating system version as a raw string.

--

*`host.type`*::
+
--
type: keyword

Type of host.
For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.

--

*`host.user.email`*::
+
--
type: keyword

User email address.

--

*`host.user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`host.user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`host.user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`host.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`host.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`host.user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== http fields

Fields related to HTTP activity. Use the `url` field set to store the url of the request.


*`http.request.body.bytes`*::
+
--
type: long

example: 887

format: bytes

Size in bytes of the request body.

--

*`http.request.body.content`*::
+
--
type: keyword

example: Hello world

The full HTTP request body.

--

*`http.request.bytes`*::
+
--
type: long

example: 1437

format: bytes

Total size in bytes of the request (body and headers).

--

*`http.request.method`*::
+
--
type: keyword

example: get, post, put

HTTP request method.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

--

*`http.request.referrer`*::
+
--
type: keyword

example: https://blog.example.com/

Referrer for this HTTP request.

--

*`http.response.body.bytes`*::
+
--
type: long

example: 887

format: bytes

Size in bytes of the response body.

--

*`http.response.body.content`*::
+
--
type: keyword

example: Hello world

The full HTTP response body.

--

*`http.response.bytes`*::
+
--
type: long

example: 1437

format: bytes

Total size in bytes of the response (body and headers).

--

*`http.response.status_code`*::
+
--
type: long

example: 404

format: string

HTTP response status code.

--

*`http.version`*::
+
--
type: keyword

example: 1.1

HTTP version.

--

[float]
== log fields

Fields which are specific to log events.


*`log.level`*::
+
--
type: keyword

example: err

Original log level of the log event.
Some examples are `warn`, `error`, `i`.

--

*`log.original`*::
+
--
type: keyword

example: Sep 19 08:26:10 localhost My log

This is the original log message and contains the full log message before splitting it up in multiple parts.
In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.

--

[float]
== network fields

The network is defined as the communication path over which a host or network event happens.
The network.* fields should be populated with details about the network activity associated with an event.


*`network.application`*::
+
--
type: keyword

example: aim

A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

--

*`network.bytes`*::
+
--
type: long

example: 368

format: bytes

Total bytes transferred in both directions.
If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.

--

*`network.community_id`*::
+
--
type: keyword

example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=

A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
Learn more at https://github.com/corelight/community-id-spec.

--

*`network.direction`*::
+
--
type: keyword

example: inbound

Direction of the network traffic.
Recommended values are:
  * inbound
  * outbound
  * internal
  * external
  * unknown

When mapping events from a host-based monitoring context, populate this field from the host's point of view.
When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.

--

*`network.forwarded_ip`*::
+
--
type: ip

example: 192.1.1.2

Host IP address when the source IP address is the proxy.

--

*`network.iana_number`*::
+
--
type: keyword

example: 6

IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.

--

*`network.name`*::
+
--
type: keyword

example: Guest Wifi

Name given by operators to sections of their network.

--

*`network.packets`*::
+
--
type: long

example: 24

Total packets transferred in both directions.
If `source.packets` and `destination.packets` are known, `network.packets` is their sum.

--

*`network.protocol`*::
+
--
type: keyword

example: http

L7 Network protocol name. ex. http, lumberjack, transport protocol.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

--

*`network.transport`*::
+
--
type: keyword

example: tcp

Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

--

*`network.type`*::
+
--
type: keyword

example: ipv4

In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

--

[float]
== observer fields

An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics.
This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.


*`observer.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`observer.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`observer.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`observer.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`observer.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`observer.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`observer.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`observer.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`observer.hostname`*::
+
--
type: keyword

Hostname of the observer.

--

*`observer.ip`*::
+
--
type: ip

IP address of the observer.

--

*`observer.mac`*::
+
--
type: keyword

MAC address of the observer

--

*`observer.os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).

--

*`observer.os.full`*::
+
--
type: keyword

example: Mac OS Mojave

Operating system name, including the version or code name.

--

*`observer.os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.

--

*`observer.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name, without the version.

--

*`observer.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).

--

*`observer.os.version`*::
+
--
type: keyword

example: 10.14.1

Operating system version as a raw string.

--

*`observer.serial_number`*::
+
--
type: keyword

Observer serial number.

--

*`observer.type`*::
+
--
type: keyword

example: firewall

The type of the observer the data is coming from.
There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.

--

*`observer.vendor`*::
+
--
type: keyword

observer vendor information.

--

*`observer.version`*::
+
--
type: keyword

Observer version.

--

[float]
== organization fields

The organization fields enrich data with information about the company or entity the data is associated with.
These fields help you arrange or filter data stored in an index by one or multiple organizations.


*`organization.id`*::
+
--
type: keyword

Unique identifier for the organization.

--

*`organization.name`*::
+
--
type: keyword

Organization name.

--

[float]
== os fields

The OS fields contain information about the operating system.


*`os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).

--

*`os.full`*::
+
--
type: keyword

example: Mac OS Mojave

Operating system name, including the version or code name.

--

*`os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.

--

*`os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name, without the version.

--

*`os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).

--

*`os.version`*::
+
--
type: keyword

example: 10.14.1

Operating system version as a raw string.

--

[float]
== process fields

These fields contain information about a process.
These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.


*`process.args`*::
+
--
type: keyword

example: ['ssh', '-l', 'user', '10.0.0.16']

Array of process arguments.
May be filtered to protect sensitive information.

--

*`process.executable`*::
+
--
type: keyword

example: /usr/bin/ssh

Absolute path to the process executable.

--

*`process.name`*::
+
--
type: keyword

example: ssh

Process name.
Sometimes called program name or similar.

--

*`process.pid`*::
+
--
type: long

example: 4242

format: string

Process id.

--

*`process.ppid`*::
+
--
type: long

example: 4241

format: string

Parent process' pid.

--

*`process.start`*::
+
--
type: date

example: 2016-05-23T08:05:34.853Z

The time the process started.

--

*`process.thread.id`*::
+
--
type: long

example: 4242

format: string

Thread ID.

--

*`process.title`*::
+
--
type: keyword

Process title.
The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

--

*`process.working_directory`*::
+
--
type: keyword

example: /home/alice

The working directory of the process.

--

[float]
== related fields

This field set is meant to facilitate pivoting around a piece of data.
Some pieces of information can be seen in many places in an ECS event. To facilitate searching for them, store an array of all seen values to their corresponding field in `related.`.
A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to `related.ip`, you can then search for a given IP trivially, no matter where it appeared, by querying `related.ip:a.b.c.d`.


*`related.ip`*::
+
--
type: ip

All of the IPs seen on your event.

--

[float]
== server fields

A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the server is the receiver of the initial SYN packet(s) of the TCP connection. For other protocols, the server is generally the responder in the network transaction. Some systems actually use the term "responder" to refer the server in TCP connections. The server fields describe details about the system acting as the server in the network event. Server fields are usually populated in conjunction with client fields. Server fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.


*`server.address`*::
+
--
type: keyword

Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

--

*`server.bytes`*::
+
--
type: long

example: 184

format: bytes

Bytes sent from the server to the client.

--

*`server.domain`*::
+
--
type: keyword

Server domain.

--

*`server.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`server.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`server.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`server.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`server.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`server.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`server.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`server.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`server.ip`*::
+
--
type: ip

IP address of the server.
Can be one or multiple IPv4 or IPv6 addresses.

--

*`server.mac`*::
+
--
type: keyword

MAC address of the server.

--

*`server.packets`*::
+
--
type: long

example: 12

Packets sent from the server to the client.

--

*`server.port`*::
+
--
type: long

format: string

Port of the server.

--

*`server.user.email`*::
+
--
type: keyword

User email address.

--

*`server.user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`server.user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`server.user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`server.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`server.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`server.user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== service fields

The service fields describe the service for or from which the data was collected.
These fields help you find and correlate logs for a specific service and version.


*`service.ephemeral_id`*::
+
--
type: keyword

example: 8a4f500f

Ephemeral identifier of this service (if one exists).
This id normally changes across restarts, but `service.id` does not.

--

*`service.id`*::
+
--
type: keyword

example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

Unique identifier of the running service.
This id should uniquely identify this service. This makes it possible to correlate logs and metrics for one specific service.
Example: If you are experiencing issues with one redis instance, you can filter on that id to see metrics and logs for that single instance.

--

*`service.name`*::
+
--
type: keyword

example: elasticsearch-metrics

Name of the service data is collected from.
The name of the service is normally user given. This allows if two instances of the same service are running on the same machine they can be differentiated by the `service.name`.
Also it allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
In the case of Elasticsearch the service.name could contain the cluster name. For Beats the service.name is by default a copy of the `service.type` field if no name is specified.

--

*`service.state`*::
+
--
type: keyword

Current state of the service.

--

*`service.type`*::
+
--
type: keyword

example: elasticsearch

The type of the service data is collected from.
The type can be used to group and correlate logs and metrics from one service type.
Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.

--

*`service.version`*::
+
--
type: keyword

example: 3.2.4

Version of the service the data was collected from.
This allows to look at a data set only for a specific version of a service.

--

[float]
== source fields

Source fields describe details about the source of a packet/event.
Source fields are usually populated in conjunction with destination fields.


*`source.address`*::
+
--
type: keyword

Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

--

*`source.bytes`*::
+
--
type: long

example: 184

format: bytes

Bytes sent from the source to the destination.

--

*`source.domain`*::
+
--
type: keyword

Source domain.

--

*`source.geo.city_name`*::
+
--
type: keyword

example: Montreal

City name.

--

*`source.geo.continent_name`*::
+
--
type: keyword

example: North America

Name of the continent.

--

*`source.geo.country_iso_code`*::
+
--
type: keyword

example: CA

Country ISO code.

--

*`source.geo.country_name`*::
+
--
type: keyword

example: Canada

Country name.

--

*`source.geo.location`*::
+
--
type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

Longitude and latitude.

--

*`source.geo.name`*::
+
--
type: keyword

example: boston-dc

User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

--

*`source.geo.region_iso_code`*::
+
--
type: keyword

example: CA-QC

Region ISO code.

--

*`source.geo.region_name`*::
+
--
type: keyword

example: Quebec

Region name.

--

*`source.ip`*::
+
--
type: ip

IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.

--

*`source.mac`*::
+
--
type: keyword

MAC address of the source.

--

*`source.packets`*::
+
--
type: long

example: 12

Packets sent from the source to the destination.

--

*`source.port`*::
+
--
type: long

format: string

Port of the source.

--

*`source.user.email`*::
+
--
type: keyword

User email address.

--

*`source.user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`source.user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`source.user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`source.user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`source.user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`source.user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== url fields

URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.


*`url.domain`*::
+
--
type: keyword

example: www.elastic.co

Domain of the url, such as "www.elastic.co".
In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.

--

*`url.fragment`*::
+
--
type: keyword

Portion of the url after the `#`, such as "top".
The `#` is not part of the fragment.

--

*`url.full`*::
+
--
type: keyword

example: https://www.elastic.co:443/search?q=elasticsearch#top

If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.

--

*`url.original`*::
+
--
type: keyword

example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

Unmodified original url as seen in the event source.
Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
This field is meant to represent the URL as it was observed, complete or not.

--

*`url.password`*::
+
--
type: keyword

Password of the request.

--

*`url.path`*::
+
--
type: keyword

Path of the request, such as "/search".

--

*`url.port`*::
+
--
type: long

example: 443

format: string

Port of the request, such as 443.

--

*`url.query`*::
+
--
type: keyword

The query field describes the query string of the request, such as "q=elasticsearch".
The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.

--

*`url.scheme`*::
+
--
type: keyword

example: https

Scheme of the request, such as "https".
Note: The `:` is not part of the scheme.

--

*`url.username`*::
+
--
type: keyword

Username of the request.

--

[float]
== user fields

The user fields describe information about the user that is relevant to the event.
Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.


*`user.email`*::
+
--
type: keyword

User email address.

--

*`user.full_name`*::
+
--
type: keyword

example: Albert Einstein

User's full name, if available.

--

*`user.group.id`*::
+
--
type: keyword

Unique identifier for the group on the system/platform.

--

*`user.group.name`*::
+
--
type: keyword

Name of the group.

--

*`user.hash`*::
+
--
type: keyword

Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

--

*`user.id`*::
+
--
type: keyword

One or multiple unique identifiers of the user.

--

*`user.name`*::
+
--
type: keyword

example: albert

Short name or login of the user.

--

[float]
== user_agent fields

The user_agent fields normally come from a browser request.
They often show up in web service logs coming from the parsed user agent string.


*`user_agent.device.name`*::
+
--
type: keyword

example: iPhone

Name of the device.

--

*`user_agent.name`*::
+
--
type: keyword

example: Safari

Name of the user agent.

--

*`user_agent.original`*::
+
--
type: keyword

example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1

Unparsed version of the user_agent.

--

*`user_agent.os.family`*::
+
--
type: keyword

example: debian

OS family (such as redhat, debian, freebsd, windows).

--

*`user_agent.os.full`*::
+
--
type: keyword

example: Mac OS Mojave

Operating system name, including the version or code name.

--

*`user_agent.os.kernel`*::
+
--
type: keyword

example: 4.4.0-112-generic

Operating system kernel version as a raw string.

--

*`user_agent.os.name`*::
+
--
type: keyword

example: Mac OS X

Operating system name, without the version.

--

*`user_agent.os.platform`*::
+
--
type: keyword

example: darwin

Operating system platform (such centos, ubuntu, windows).

--

*`user_agent.os.version`*::
+
--
type: keyword

example: 10.14.1

Operating system version as a raw string.

--

*`user_agent.version`*::
+
--
type: keyword

example: 12.0

Version of the user agent.

--

[[exported-fields-elasticsearch]]
== elasticsearch fields

elasticsearch Module



[float]
== elasticsearch fields




*`elasticsearch.component`*::
+
--
type: keyword

example: o.e.c.m.MetaDataCreateIndexService

Elasticsearch component from where the log event originated

--

*`elasticsearch.cluster.uuid`*::
+
--
type: keyword

example: GmvrbHlNTiSVYiPf8kxg9g

UUID of the cluster

--

*`elasticsearch.cluster.name`*::
+
--
type: keyword

example: docker-cluster

Name of the cluster

--

*`elasticsearch.node.id`*::
+
--
type: keyword

example: DSiWcTyeThWtUXLB9J0BMw

ID of the node

--

*`elasticsearch.node.name`*::
+
--
type: keyword

example: vWNJsZ3

Name of the node

--

*`elasticsearch.index.name`*::
+
--
type: keyword

example: filebeat-test-input

Index name

--

*`elasticsearch.index.id`*::
+
--
type: keyword

example: aOGgDwbURfCV57AScqbCgw

Index id

--

*`elasticsearch.shard.id`*::
+
--
type: keyword

example: 0

Id of the shard

--

[float]
== audit fields




*`elasticsearch.audit.layer`*::
+
--
type: keyword

example: rest

The layer from which this event originated: rest, transport or ip_filter

--

*`elasticsearch.audit.event_type`*::
+
--
type: keyword

example: access_granted

The type of event that occurred: anonymous_access_denied, authentication_failed, access_denied, access_granted, connection_granted, connection_denied, tampered_request, run_as_granted, run_as_denied

--

*`elasticsearch.audit.origin.type`*::
+
--
type: keyword

example: local_node

Where the request originated: rest (request originated from a REST API request), transport (request was received on the transport channel), local_node (the local node issued the request)

--

*`elasticsearch.audit.realm`*::
+
--
type: keyword

The authentication realm the authentication was validated against

--

*`elasticsearch.audit.user.realm`*::
+
--
type: keyword

The user's authentication realm, if authenticated

--

*`elasticsearch.audit.user.roles`*::
+
--
type: keyword

example: ['kibana_user', 'beats_admin']

Roles to which the principal belongs

--

*`elasticsearch.audit.action`*::
+
--
type: keyword

example: cluster:monitor/main

The name of the action that was executed

--

*`elasticsearch.audit.url.params`*::
+
--
example: {username=jacknich2}

REST URI parameters

--

*`elasticsearch.audit.indices`*::
+
--
type: keyword

example: ['foo-2019.01.04', 'foo-2019.01.03', 'foo-2019.01.06']

Indices accessed by action

--

*`elasticsearch.audit.request.id`*::
+
--
type: keyword

example: WzL_kb6VSvOhAq0twPvHOQ

Unique ID of request

--

*`elasticsearch.audit.request.name`*::
+
--
type: keyword

example: ClearScrollRequest

The type of request that was executed

--

*`elasticsearch.audit.request_body`*::
+
--
type: alias

alias to: http.request.body.content

--

*`elasticsearch.audit.origin_address`*::
+
--
type: alias

alias to: source.ip

--

*`elasticsearch.audit.uri`*::
+
--
type: alias

alias to: url.original

--

*`elasticsearch.audit.principal`*::
+
--
type: alias

alias to: user.name

--

*`elasticsearch.audit.message`*::
+
--
type: text

--

[float]
== deprecation fields



[float]
== gc fields

GC fileset fields.



[float]
== phase fields

Fields specific to GC phase.



*`elasticsearch.gc.phase.name`*::
+
--
type: keyword

Name of the GC collection phase.


--

*`elasticsearch.gc.phase.duration_sec`*::
+
--
type: float

Collection phase duration according to the Java virtual machine.


--

*`elasticsearch.gc.phase.scrub_symbol_table_time_sec`*::
+
--
type: float

Pause time in seconds cleaning up symbol tables.


--

*`elasticsearch.gc.phase.scrub_string_table_time_sec`*::
+
--
type: float

Pause time in seconds cleaning up string tables.


--

*`elasticsearch.gc.phase.weak_refs_processing_time_sec`*::
+
--
type: float

Time spent processing weak references in seconds.


--

*`elasticsearch.gc.phase.parallel_rescan_time_sec`*::
+
--
type: float

Time spent in seconds marking live objects while application is stopped.


--

*`elasticsearch.gc.phase.class_unload_time_sec`*::
+
--
type: float

Time spent unloading unused classes in seconds.


--

[float]
== cpu_time fields

Process CPU time spent performing collections.



*`elasticsearch.gc.phase.cpu_time.user_sec`*::
+
--
type: float

CPU time spent outside the kernel.


--

*`elasticsearch.gc.phase.cpu_time.sys_sec`*::
+
--
type: float

CPU time spent inside the kernel. 


--

*`elasticsearch.gc.phase.cpu_time.real_sec`*::
+
--
type: float

Total elapsed CPU time spent to complete the collection from start to finish.


--

*`elasticsearch.gc.jvm_runtime_sec`*::
+
--
type: float

The time from JVM start up in seconds, as a floating point number.


--

*`elasticsearch.gc.threads_total_stop_time_sec`*::
+
--
type: float

Garbage collection threads total stop time seconds.


--

*`elasticsearch.gc.stopping_threads_time_sec`*::
+
--
type: float

Time took to stop threads seconds.


--

*`elasticsearch.gc.tags`*::
+
--
type: keyword

GC logging tags.


--

[float]
== heap fields

Heap allocation and total size.



*`elasticsearch.gc.heap.size_kb`*::
+
--
type: integer

Total heap size in kilobytes.


--

*`elasticsearch.gc.heap.used_kb`*::
+
--
type: integer

Used heap in kilobytes.


--

[float]
== old_gen fields

Old generation occupancy and total size.



*`elasticsearch.gc.old_gen.size_kb`*::
+
--
type: integer

Total size of old generation in kilobytes.


--

*`elasticsearch.gc.old_gen.used_kb`*::
+
--
type: integer

Old generation occupancy in kilobytes.


--

[float]
== young_gen fields

Young generation occupancy and total size.



*`elasticsearch.gc.young_gen.size_kb`*::
+
--
type: integer

Total size of young generation in kilobytes.


--

*`elasticsearch.gc.young_gen.used_kb`*::
+
--
type: integer

Young generation occupancy in kilobytes.


--

[float]
== server fields

Server log file


*`elasticsearch.server.stacktrace`*::
+
--
Field is not indexed.

--

[float]
== gc fields

GC log


[float]
== young fields

Young GC


*`elasticsearch.server.gc.young.one`*::
+
--
type: long

example: 



--

*`elasticsearch.server.gc.young.two`*::
+
--
type: long

example: 



--

*`elasticsearch.server.gc.overhead_seq`*::
+
--
type: long

example: 3449992

Sequence number

--

*`elasticsearch.server.gc.collection_duration.ms`*::
+
--
type: float

example: 1600

Time spent in GC, in milliseconds

--

*`elasticsearch.server.gc.observation_duration.ms`*::
+
--
type: float

example: 1800

Total time over which collection was observed, in milliseconds

--

[float]
== slowlog fields

Slowlog events from Elasticsearch


*`elasticsearch.slowlog.logger`*::
+
--
type: keyword

example: index.search.slowlog.fetch

Logger name

--

*`elasticsearch.slowlog.took`*::
+
--
type: keyword

example: 300ms

Time it took to execute the query

--

*`elasticsearch.slowlog.types`*::
+
--
type: keyword

example: 

Types

--

*`elasticsearch.slowlog.stats`*::
+
--
type: keyword

example: group1

Stats groups

--

*`elasticsearch.slowlog.search_type`*::
+
--
type: keyword

example: QUERY_THEN_FETCH

Search type

--

*`elasticsearch.slowlog.source_query`*::
+
--
type: keyword

example: {"query":{"match_all":{"boost":1.0}}}

Slow query

--

*`elasticsearch.slowlog.extra_source`*::
+
--
type: keyword

example: 

Extra source information

--

*`elasticsearch.slowlog.total_hits`*::
+
--
type: keyword

example: 42

Total hits

--

*`elasticsearch.slowlog.total_shards`*::
+
--
type: keyword

example: 22

Total queried shards

--

*`elasticsearch.slowlog.routing`*::
+
--
type: keyword

example: s01HZ2QBk9jw4gtgaFtn

Routing

--

*`elasticsearch.slowlog.id`*::
+
--
type: keyword

example: 

Id

--

*`elasticsearch.slowlog.type`*::
+
--
type: keyword

example: doc

Type

--

[[exported-fields-envoyproxy]]
== Envoyproxy fields

Module for handling logs produced by envoy



[float]
== envoyproxy fields

Fields from envoy proxy logs after normalization



*`envoyproxy.log_type`*::
+
--
type: keyword

Envoy log type, normally ACCESS


--

*`envoyproxy.response_flags`*::
+
--
type: keyword

Response flags


--

*`envoyproxy.upstream_service_time`*::
+
--
type: long

format: duration

Upstream service time in nanoseconds


--

*`envoyproxy.request_id`*::
+
--
type: keyword

ID of the request


--

*`envoyproxy.authority`*::
+
--
type: keyword

Envoy proxy authority field


--

*`envoyproxy.proxy_type`*::
+
--
type: keyword

Envoy proxy type, tcp or http


--

[[exported-fields-haproxy]]
== haproxy fields

haproxy Module



[float]
== haproxy fields




*`haproxy.frontend_name`*::
+
--
Name of the frontend (or listener) which received and processed the connection.

--

*`haproxy.backend_name`*::
+
--
Name of the backend (or listener) which was selected to manage the connection to the server.

--

*`haproxy.server_name`*::
+
--
Name of the last server to which the connection was sent.

--

*`haproxy.total_waiting_time_ms`*::
+
--
type: long

Total time in milliseconds spent waiting in the various queues

--

*`haproxy.connection_wait_time_ms`*::
+
--
type: long

Total time in milliseconds spent waiting for the connection to establish to the final server

--

*`haproxy.bytes_read`*::
+
--
type: long

Total number of bytes transmitted to the client when the log is emitted.

--

*`haproxy.time_queue`*::
+
--
type: long

Total time in milliseconds spent waiting in the various queues.

--

*`haproxy.time_backend_connect`*::
+
--
type: long

Total time in milliseconds spent waiting for the connection to establish to the final server, including retries.

--

*`haproxy.server_queue`*::
+
--
type: long

Total number of requests which were processed before this one in the server queue.

--

*`haproxy.backend_queue`*::
+
--
type: long

Total number of requests which were processed before this one in the backend's global queue.

--

*`haproxy.bind_name`*::
+
--
Name of the listening address which received the connection.

--

*`haproxy.error_message`*::
+
--
type: text

Error message logged by HAProxy in case of error.

--

*`haproxy.source`*::
+
--
type: keyword

The HAProxy source of the log

--

*`haproxy.termination_state`*::
+
--
Condition the session was in when the session ended.

--

*`haproxy.mode`*::
+
--
type: keyword

mode that the frontend is operating (TCP or HTTP)

--

[float]
== connections fields

Contains various counts of connections active in the process.


*`haproxy.connections.active`*::
+
--
type: long

Total number of concurrent connections on the process when the session was logged.

--

*`haproxy.connections.frontend`*::
+
--
type: long

Total number of concurrent connections on the frontend when the session was logged.

--

*`haproxy.connections.backend`*::
+
--
type: long

Total number of concurrent connections handled by the backend when the session was logged.

--

*`haproxy.connections.server`*::
+
--
type: long

Total number of concurrent connections still active on the server when the session was logged.

--

*`haproxy.connections.retries`*::
+
--
type: long

Number of connection retries experienced by this session when trying to connect to the server.

--

[float]
== client fields

Information about the client doing the request


*`haproxy.client.ip`*::
+
--
type: alias

alias to: source.address

--

*`haproxy.client.port`*::
+
--
type: alias

alias to: source.port

--

*`haproxy.process_name`*::
+
--
type: alias

alias to: process.name

--

*`haproxy.pid`*::
+
--
type: alias

alias to: process.pid

--

[float]
== destination fields

Destination information


*`haproxy.destination.port`*::
+
--
type: alias

alias to: destination.port

--

*`haproxy.destination.ip`*::
+
--
type: alias

alias to: destination.ip

--

[float]
== geoip fields

Contains GeoIP information gathered based on the client.ip field. Only present if the GeoIP Elasticsearch plugin is available and used.



*`haproxy.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`haproxy.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`haproxy.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`haproxy.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`haproxy.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`haproxy.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[float]
== http fields

Please add description


[float]
== response fields

Fields related to the HTTP response


*`haproxy.http.response.captured_cookie`*::
+
--
Optional "name=value" entry indicating that the client had this cookie in the response.


--

*`haproxy.http.response.captured_headers`*::
+
--
type: keyword

List of headers captured in the response due to the presence of the "capture response header" statement in the frontend.


--

*`haproxy.http.response.status_code`*::
+
--
type: alias

alias to: http.response.status_code

--

[float]
== request fields

Fields related to the HTTP request


*`haproxy.http.request.captured_cookie`*::
+
--
Optional "name=value" entry indicating that the server has returned a cookie with its request.


--

*`haproxy.http.request.captured_headers`*::
+
--
type: keyword

List of headers captured in the request due to the presence of the "capture request header" statement in the frontend.


--

*`haproxy.http.request.raw_request_line`*::
+
--
type: keyword

Complete HTTP request line, including the method, request and HTTP version string.

--

*`haproxy.http.request.time_wait_without_data_ms`*::
+
--
type: long

Total time in milliseconds spent waiting for the server to send a full HTTP response, not counting data.

--

*`haproxy.http.request.time_wait_ms`*::
+
--
type: long

Total time in milliseconds spent waiting for a full HTTP request from the client (not counting body) after the first byte was received.

--

[float]
== tcp fields

TCP log format


*`haproxy.tcp.connection_waiting_time_ms`*::
+
--
type: long

Total time in milliseconds elapsed between the accept and the last close

--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.containerized`*::
+
--
type: boolean

If the host is a container.


--

*`host.os.build`*::
+
--
type: keyword

example: 18D109

OS build information.


--

*`host.os.codename`*::
+
--
type: keyword

example: stretch

OS codename, if any.


--

[[exported-fields-icinga]]
== Icinga fields

Icinga Module



[float]
== icinga fields




[float]
== debug fields

Contains fields for the Icinga debug logs.



*`icinga.debug.facility`*::
+
--
type: keyword

Specifies what component of Icinga logged the message.


--

*`icinga.debug.severity`*::
+
--
type: alias

alias to: log.level

--

*`icinga.debug.message`*::
+
--
type: alias

alias to: message

--

[float]
== main fields

Contains fields for the Icinga main logs.



*`icinga.main.facility`*::
+
--
type: keyword

Specifies what component of Icinga logged the message.


--

*`icinga.main.severity`*::
+
--
type: alias

alias to: log.level

--

*`icinga.main.message`*::
+
--
type: alias

alias to: message

--

[float]
== startup fields

Contains fields for the Icinga startup logs.



*`icinga.startup.facility`*::
+
--
type: keyword

Specifies what component of Icinga logged the message.


--

*`icinga.startup.severity`*::
+
--
type: alias

alias to: log.level

--

*`icinga.startup.message`*::
+
--
type: alias

alias to: message

--

[[exported-fields-iis]]
== IIS fields

Module for parsing IIS log files.



[float]
== iis fields

Fields from IIS log files.



[float]
== access fields

Contains fields for IIS access logs.



*`iis.access.sub_status`*::
+
--
type: long

The HTTP substatus code.


--

*`iis.access.win32_status`*::
+
--
type: long

The Windows status code.


--

*`iis.access.site_name`*::
+
--
type: keyword

The site name and instance number.


--

*`iis.access.server_name`*::
+
--
type: keyword

The name of the server on which the log file entry was generated.


--

*`iis.access.cookie`*::
+
--
type: keyword

The content of the cookie sent or received, if any.


--

*`iis.access.body_received.bytes`*::
+
--
type: alias

alias to: http.request.body.bytes

--

*`iis.access.body_sent.bytes`*::
+
--
type: alias

alias to: http.response.body.bytes

--

*`iis.access.server_ip`*::
+
--
type: alias

alias to: destination.address

--

*`iis.access.method`*::
+
--
type: alias

alias to: http.request.method

--

*`iis.access.url`*::
+
--
type: alias

alias to: url.path

--

*`iis.access.query_string`*::
+
--
type: alias

alias to: url.query

--

*`iis.access.port`*::
+
--
type: alias

alias to: destination.port

--

*`iis.access.user_name`*::
+
--
type: alias

alias to: user.name

--

*`iis.access.remote_ip`*::
+
--
type: alias

alias to: source.address

--

*`iis.access.referrer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`iis.access.response_code`*::
+
--
type: alias

alias to: http.response.status_code

--

*`iis.access.http_version`*::
+
--
type: alias

alias to: http.version

--

*`iis.access.hostname`*::
+
--
type: alias

alias to: host.hostname

--


*`iis.access.user_agent.device`*::
+
--
type: alias

alias to: user_agent.device.name

--

*`iis.access.user_agent.name`*::
+
--
type: alias

alias to: user_agent.name

--

*`iis.access.user_agent.os`*::
+
--
type: alias

alias to: user_agent.os.full_name

--

*`iis.access.user_agent.os_name`*::
+
--
type: alias

alias to: user_agent.os.name

--

*`iis.access.user_agent.original`*::
+
--
type: alias

alias to: user_agent.original

--


*`iis.access.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`iis.access.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`iis.access.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`iis.access.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`iis.access.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`iis.access.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[float]
== error fields

Contains fields for IIS error logs.



*`iis.error.reason_phrase`*::
+
--
type: keyword

The HTTP reason phrase.


--

*`iis.error.queue_name`*::
+
--
type: keyword

The IIS application pool name.


--

*`iis.error.remote_ip`*::
+
--
type: alias

alias to: source.address

--

*`iis.error.remote_port`*::
+
--
type: alias

alias to: source.port

--

*`iis.error.server_ip`*::
+
--
type: alias

alias to: destination.address

--

*`iis.error.server_port`*::
+
--
type: alias

alias to: destination.port

--

*`iis.error.http_version`*::
+
--
type: alias

alias to: http.version

--

*`iis.error.method`*::
+
--
type: alias

alias to: http.request.method

--

*`iis.error.url`*::
+
--
type: alias

alias to: url.original

--

*`iis.error.response_code`*::
+
--
type: alias

alias to: http.response.status_code

--


*`iis.error.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`iis.error.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`iis.error.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`iis.error.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`iis.error.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`iis.error.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[[exported-fields-iptables]]
== iptables fields

Module for handling the iptables logs.



[float]
== iptables fields

Fields from the iptables logs.



*`iptables.ether_type`*::
+
--
type: long

Value of the ethernet type field identifying the network layer protocol.


--

*`iptables.flow_label`*::
+
--
type: integer

IPv6 flow label.


--

*`iptables.fragment_flags`*::
+
--
type: keyword

IP fragment flags. A combination of CE, DF and MF.


--

*`iptables.fragment_offset`*::
+
--
type: long

Offset of the current IP fragment.


--

[float]
== icmp fields

ICMP fields.



*`iptables.icmp.code`*::
+
--
type: long

ICMP code.


--

*`iptables.icmp.id`*::
+
--
type: long

ICMP ID.


--

*`iptables.icmp.parameter`*::
+
--
type: long

ICMP parameter.


--

*`iptables.icmp.redirect`*::
+
--
type: ip

ICMP redirect address.


--

*`iptables.icmp.seq`*::
+
--
type: long

ICMP sequence number.


--

*`iptables.icmp.type`*::
+
--
type: long

ICMP type.


--

*`iptables.id`*::
+
--
type: long

Packet identifier.


--

*`iptables.incomplete_bytes`*::
+
--
type: long

Number of incomplete bytes.


--

*`iptables.input_device`*::
+
--
type: keyword

Device that received the packet.


--

*`iptables.precedence_bits`*::
+
--
type: short

IP precedence bits.


--

*`iptables.tos`*::
+
--
type: long

IP Type of Service field.


--

*`iptables.length`*::
+
--
type: long

Packet length.


--

*`iptables.output_device`*::
+
--
type: keyword

Device that output the packet.


--

[float]
== tcp fields

TCP fields.



*`iptables.tcp.flags`*::
+
--
type: keyword

TCP flags.


--

*`iptables.tcp.reserved_bits`*::
+
--
type: short

TCP reserved bits.


--

*`iptables.tcp.seq`*::
+
--
type: long

TCP sequence number.


--

*`iptables.tcp.ack`*::
+
--
type: long

TCP Acknowledgment number.


--

*`iptables.tcp.window`*::
+
--
type: long

Advertised TCP window size.


--

*`iptables.ttl`*::
+
--
type: integer

Time To Live field.


--

[float]
== udp fields

UDP fields.



*`iptables.udp.length`*::
+
--
type: long

Length of the UDP header and payload.


--

[float]
== ubiquiti fields

Fields for Ubiquiti network devices.



*`iptables.ubiquiti.input_zone`*::
+
--
type: keyword

Input zone.


--

*`iptables.ubiquiti.output_zone`*::
+
--
type: keyword

Output zone.


--

*`iptables.ubiquiti.rule_number`*::
+
--
type: keyword

The rule number within the rule set.

--

*`iptables.ubiquiti.rule_set`*::
+
--
type: keyword

The rule set name.

--

[[exported-fields-jolokia-autodiscover]]
== Jolokia Discovery autodiscover provider fields

Metadata from Jolokia Discovery added by the jolokia provider.



*`jolokia.agent.version`*::
+
--
type: keyword

Version number of jolokia agent.


--

*`jolokia.agent.id`*::
+
--
type: keyword

Each agent has a unique id which can be either provided during startup of the agent in form of a configuration parameter or being autodetected. If autodected, the id has several parts: The IP, the process id, hashcode of the agent and its type.


--

*`jolokia.server.product`*::
+
--
type: keyword

The container product if detected.


--

*`jolokia.server.version`*::
+
--
type: keyword

The container's version (if detected).


--

*`jolokia.server.vendor`*::
+
--
type: keyword

The vendor of the container the agent is running in.


--

*`jolokia.url`*::
+
--
type: keyword

The URL how this agent can be contacted.


--

*`jolokia.secured`*::
+
--
type: boolean

Whether the agent was configured for authentication or not.


--

[[exported-fields-kafka]]
== Kafka fields

Kafka module



[float]
== kafka fields




[float]
== log fields

Kafka log lines.



*`kafka.log.level`*::
+
--
type: alias

alias to: log.level

--

*`kafka.log.message`*::
+
--
type: alias

alias to: message

--

*`kafka.log.component`*::
+
--
type: keyword

Component the log is coming from.


--

*`kafka.log.class`*::
+
--
type: keyword

Java class the log is coming from.


--

[float]
== trace fields

Trace in the log line.



*`kafka.log.trace.class`*::
+
--
type: keyword

Java class the trace is coming from.


--

*`kafka.log.trace.message`*::
+
--
type: text

Message part of the trace.


--

[[exported-fields-kibana]]
== kibana fields

kibana Module



[float]
== kibana fields




[float]
== log fields

Kafka log lines.



*`kibana.log.tags`*::
+
--
type: keyword

Kibana logging tags.


--

*`kibana.log.state`*::
+
--
type: keyword

Current state of Kibana.


--

*`kibana.log.meta`*::
+
--
type: object

--

*`kibana.log.kibana.log.meta.req.headers.referer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`kibana.log.kibana.log.meta.req.referer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`kibana.log.kibana.log.meta.req.headers.user-agent`*::
+
--
type: alias

alias to: user_agent.original

--

*`kibana.log.kibana.log.meta.req.remoteAddress`*::
+
--
type: alias

alias to: source.address

--

*`kibana.log.kibana.log.meta.req.url`*::
+
--
type: alias

alias to: url.original

--

*`kibana.log.kibana.log.meta.statusCode`*::
+
--
type: alias

alias to: http.response.status_code

--

*`kibana.log.kibana.log.meta.method`*::
+
--
type: alias

alias to: http.request.method

--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.pod.uid`*::
+
--
type: keyword

Kubernetes Pod UID


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.replicaset.name`*::
+
--
type: keyword

Kubernetes replicaset name


--

*`kubernetes.deployment.name`*::
+
--
type: keyword

Kubernetes deployment name


--

*`kubernetes.statefulset.name`*::
+
--
type: keyword

Kubernetes statefulset name


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

[[exported-fields-log]]
== Log file content fields

Contains log file lines.



*`log.file.path`*::
+
--
type: keyword

required: False

The file from which the line was read. This field contains the absolute path to the file. For example: `/var/log/system.log`.


--

*`log.source.address`*::
+
--
type: keyword

required: False

Source address from which the log event was read / sent from.


--

*`log.offset`*::
+
--
type: long

required: False

The file offset the reported line starts at.


--

*`stream`*::
+
--
type: keyword

required: False

Log stream when reading container logs, can be 'stdout' or 'stderr'


--

*`input.type`*::
+
--
required: True

The input type from which the event was generated. This field is set to the value specified for the `type` option in the input section of the Filebeat config file.


--

*`event.sequence`*::
+
--
type: long

required: False

The sequence number of this event.


--

*`syslog.facility`*::
+
--
type: long

required: False

The facility extracted from the priority.


--

*`syslog.priority`*::
+
--
type: long

required: False

The priority of the syslog event.


--

*`syslog.severity_label`*::
+
--
type: keyword

required: False

The human readable severity.


--

*`syslog.facility_label`*::
+
--
type: keyword

required: False

The human readable facility.


--

*`process.program`*::
+
--
type: keyword

required: False

The name of the program.


--

*`log.flags`*::
+
--
This field contains the flags of the event.


--

*`http.response.content_length`*::
+
--
type: alias

alias to: http.response.body.bytes

--



*`user_agent.os.full_name`*::
+
--
type: keyword

--

*`fileset.name`*::
+
--
type: keyword

The Filebeat fileset that generated this event.


--

*`fileset.module`*::
+
--
type: alias

alias to: event.module

--

*`read_timestamp`*::
+
--
type: alias

alias to: event.created

--

*`docker.attrs`*::
+
--
type: object

docker.attrs contains labels and environment variables written by docker's JSON File logging driver. These fields are only available when they are configured in the logging driver options.


--

[[exported-fields-logstash]]
== logstash fields

logstash Module



[float]
== logstash fields




[float]
== log fields

Fields from the Logstash logs.



*`logstash.log.module`*::
+
--
type: keyword

The module or class where the event originate.


--

*`logstash.log.thread`*::
+
--
type: keyword

Information about the running thread where the log originate.


*`logstash.log.thread.text`*::
+
--
type: text

--

--

*`logstash.log.log_event`*::
+
--
type: object

key and value debugging information.


--

*`logstash.log.message`*::
+
--
type: alias

alias to: message

--

*`logstash.log.level`*::
+
--
type: alias

alias to: log.level

--

[float]
== slowlog fields

slowlog



*`logstash.slowlog.module`*::
+
--
type: keyword

The module or class where the event originate.


--

*`logstash.slowlog.thread`*::
+
--
type: keyword

Information about the running thread where the log originate.


*`logstash.slowlog.thread.text`*::
+
--
type: text

--

--

*`logstash.slowlog.event`*::
+
--
type: keyword

Raw dump of the original event


*`logstash.slowlog.event.text`*::
+
--
type: text

--

--

*`logstash.slowlog.plugin_name`*::
+
--
type: keyword

Name of the plugin


--

*`logstash.slowlog.plugin_type`*::
+
--
type: keyword

Type of the plugin: Inputs, Filters, Outputs or Codecs.


--

*`logstash.slowlog.took_in_millis`*::
+
--
type: long

Execution time for the plugin in milliseconds.


--

*`logstash.slowlog.plugin_params`*::
+
--
type: keyword

String value of the plugin configuration


*`logstash.slowlog.plugin_params.text`*::
+
--
type: text

--

--

*`logstash.slowlog.plugin_params_object`*::
+
--
type: object

key -> value of the configuration used by the plugin.


--

*`logstash.slowlog.level`*::
+
--
type: alias

alias to: log.level

--

*`logstash.slowlog.took_in_nanos`*::
+
--
type: alias

alias to: event.duration

--

[[exported-fields-mongodb]]
== mongodb fields

Module for parsing MongoDB log files.



[float]
== mongodb fields

Fields from MongoDB logs.



[float]
== log fields

Contains fields from MongoDB logs.



*`mongodb.log.component`*::
+
--
type: keyword

example: COMMAND

Functional categorization of message


--

*`mongodb.log.context`*::
+
--
type: keyword

example: initandlisten

Context of message


--

*`mongodb.log.severity`*::
+
--
type: alias

alias to: log.level

--

*`mongodb.log.message`*::
+
--
type: alias

alias to: message

--

[[exported-fields-mssql]]
== mssql fields

MS SQL Filebeat Module


[float]
== mssql fields

Fields from the MSSQL log files


[float]
== log fields

Common log fields


*`mssql.log.origin`*::
+
--
type: keyword

Origin of the message, usually the server but it can also be a recovery process

--

[[exported-fields-mysql]]
== MySQL fields

Module for parsing the MySQL log files.



[float]
== mysql fields

Fields from the MySQL log files.



*`mysql.thread_id`*::
+
--
type: long

The connection or thread ID for the query.


--

[float]
== error fields

Contains fields from the MySQL error logs.



*`mysql.error.thread_id`*::
+
--
type: alias

alias to: mysql.thread_id

--

*`mysql.error.level`*::
+
--
type: alias

alias to: log.level

--

*`mysql.error.message`*::
+
--
type: alias

alias to: message

--

[float]
== slowlog fields

Contains fields from the MySQL slow logs.



*`mysql.slowlog.lock_time.sec`*::
+
--
type: float

The amount of time the query waited for the lock to be available. The value is in seconds, as a floating point number.


--

*`mysql.slowlog.rows_sent`*::
+
--
type: long

The number of rows returned by the query.


--

*`mysql.slowlog.rows_examined`*::
+
--
type: long

The number of rows scanned by the query.


--

*`mysql.slowlog.rows_affected`*::
+
--
type: long

The number of rows modified by the query.


--

*`mysql.slowlog.bytes_sent`*::
+
--
type: long

format: bytes

The number of bytes sent to client.


--

*`mysql.slowlog.bytes_received`*::
+
--
type: long

format: bytes

The number of bytes received from client.


--

*`mysql.slowlog.query`*::
+
--
The slow query.


--

*`mysql.slowlog.id`*::
+
--
type: alias

alias to: mysql.thread_id

--

*`mysql.slowlog.schema`*::
+
--
type: keyword

The schema where the slow query was executed.


--

*`mysql.slowlog.current_user`*::
+
--
type: keyword

Current authenticated user, used to determine access privileges. Can differ from the value for user.


--

*`mysql.slowlog.last_errno`*::
+
--
type: keyword

Last SQL error seen.


--

*`mysql.slowlog.killed`*::
+
--
type: keyword

Code of the reason if the query was killed.


--

*`mysql.slowlog.query_cache_hit`*::
+
--
type: boolean

Whether the query cache was hit.


--

*`mysql.slowlog.tmp_table`*::
+
--
type: boolean

Whether a temporary table was used to resolve the query.


--

*`mysql.slowlog.tmp_table_on_disk`*::
+
--
type: boolean

Whether the query needed temporary tables on disk.


--

*`mysql.slowlog.tmp_tables`*::
+
--
type: long

Number of temporary tables created for this query


--

*`mysql.slowlog.tmp_disk_tables`*::
+
--
type: long

Number of temporary tables created on disk for this query.


--

*`mysql.slowlog.tmp_table_sizes`*::
+
--
type: long

format: bytes

Size of temporary tables created for this query.

--

*`mysql.slowlog.filesort`*::
+
--
type: boolean

Whether filesort optimization was used.


--

*`mysql.slowlog.filesort_on_disk`*::
+
--
type: boolean

Whether filesort optimization was used and it needed temporary tables on disk.


--

*`mysql.slowlog.priority_queue`*::
+
--
type: boolean

Whether a priority queue was used for filesort.


--

*`mysql.slowlog.full_scan`*::
+
--
type: boolean

Whether a full table scan was needed for the slow query.


--

*`mysql.slowlog.full_join`*::
+
--
type: boolean

Whether a full join was needed for the slow query (no indexes were used for joins).


--

*`mysql.slowlog.merge_passes`*::
+
--
type: long

Number of merge passes executed for the query.


--

*`mysql.slowlog.sort_merge_passes`*::
+
--
type: long

Number of merge passes that the sort algorithm has had to do.


--

*`mysql.slowlog.sort_range_count`*::
+
--
type: long

Number of sorts that were done using ranges. 


--

*`mysql.slowlog.sort_rows`*::
+
--
type: long

Number of sorted rows.


--

*`mysql.slowlog.sort_scan_count`*::
+
--
type: long

Number of sorts that were done by scanning the table.


--

*`mysql.slowlog.log_slow_rate_type`*::
+
--
type: keyword

Type of slow log rate limit, it can be `session` if the rate limit is applied per session, or `query` if it applies per query.


--

*`mysql.slowlog.log_slow_rate_limit`*::
+
--
type: keyword

Slow log rate limit, a value of 100 means that one in a hundred queries or sessions are being logged.


--

*`mysql.slowlog.read_first`*::
+
--
type: long

The number of times the first entry in an index was read.


--

*`mysql.slowlog.read_last`*::
+
--
type: long

The number of times the last key in an index was read.


--

*`mysql.slowlog.read_key`*::
+
--
type: long

The number of requests to read a row based on a key.


--

*`mysql.slowlog.read_next`*::
+
--
type: long

The number of requests to read the next row in key order.


--

*`mysql.slowlog.read_prev`*::
+
--
type: long

The number of requests to read the previous row in key order.


--

*`mysql.slowlog.read_rnd`*::
+
--
type: long

The number of requests to read a row based on a fixed position. 


--

*`mysql.slowlog.read_rnd_next`*::
+
--
type: long

The number of requests to read the next row in the data file.


--

[float]
== innodb fields

Contains fields relative to InnoDB engine



*`mysql.slowlog.innodb.trx_id`*::
+
--
type: keyword

Transaction ID


--

*`mysql.slowlog.innodb.io_r_ops`*::
+
--
type: long

Number of page read operations.


--

*`mysql.slowlog.innodb.io_r_bytes`*::
+
--
type: long

format: bytes

Bytes read during page read operations.


--

*`mysql.slowlog.innodb.io_r_wait.sec`*::
+
--
type: long

How long it took to read all needed data from storage.


--

*`mysql.slowlog.innodb.rec_lock_wait.sec`*::
+
--
type: long

How long the query waited for locks.


--

*`mysql.slowlog.innodb.queue_wait.sec`*::
+
--
type: long

How long the query waited to enter the InnoDB queue and to be executed once in the queue.


--

*`mysql.slowlog.innodb.pages_distinct`*::
+
--
type: long

Approximated count of pages accessed to execute the query.


--

*`mysql.slowlog.user`*::
+
--
type: alias

alias to: user.name

--

*`mysql.slowlog.host`*::
+
--
type: alias

alias to: source.domain

--

*`mysql.slowlog.ip`*::
+
--
type: alias

alias to: source.ip

--

[[exported-fields-nats]]
== nats fields

Module for parsing NATS log files.



[float]
== nats fields

Fields from NATS logs.



[float]
== log fields

Nats log files



[float]
== client fields

Fields from NATS logs client.



*`nats.log.client.id`*::
+
--
type: integer

The id of the client


--

[float]
== msg fields

Fields from NATS logs message.



*`nats.log.msg.bytes`*::
+
--
type: long

format: bytes

Size of the payload in bytes


--

*`nats.log.msg.type`*::
+
--
type: keyword

The protocol message type


--

*`nats.log.msg.subject`*::
+
--
type: keyword

Subject name this message was received on


--

*`nats.log.msg.sid`*::
+
--
type: integer

The unique alphanumeric subscription ID of the subject


--

*`nats.log.msg.reply_to`*::
+
--
type: keyword

The inbox subject on which the publisher is listening for responses


--

*`nats.log.msg.max_messages`*::
+
--
type: integer

An optional number of messages to wait for before automatically unsubscribing


--

*`nats.log.msg.error.message`*::
+
--
type: text

Details about the error occurred


--

*`nats.log.msg.queue_group`*::
+
--
type: text

The queue group which subscriber will join


--

[[exported-fields-netflow]]
== NetFlow fields

Fields from NetFlow and IPFIX flows.



[float]
== netflow fields

Fields from NetFlow and IPFIX.



*`netflow.type`*::
+
--
type: keyword

The type of NetFlow record described by this event.


--

[float]
== exporter fields

Metadata related to the exporter device that generated this record.



*`netflow.exporter.address`*::
+
--
type: keyword

Exporter's network address in IP:port format.


--

*`netflow.exporter.source_id`*::
+
--
type: long

Observation domain ID to which this record belongs.


--

*`netflow.exporter.timestamp`*::
+
--
type: date

Time and date of export.


--

*`netflow.exporter.uptime_millis`*::
+
--
type: long

How long the exporter process has been running, in milliseconds.


--

*`netflow.exporter.version`*::
+
--
type: long

NetFlow version used.


--

*`netflow.octet_delta_count`*::
+
--
type: long

--

*`netflow.packet_delta_count`*::
+
--
type: long

--

*`netflow.delta_flow_count`*::
+
--
type: long

--

*`netflow.protocol_identifier`*::
+
--
type: short

--

*`netflow.ip_class_of_service`*::
+
--
type: short

--

*`netflow.tcp_control_bits`*::
+
--
type: integer

--

*`netflow.source_transport_port`*::
+
--
type: integer

--

*`netflow.source_ipv4_address`*::
+
--
type: ip

--

*`netflow.source_ipv4_prefix_length`*::
+
--
type: short

--

*`netflow.ingress_interface`*::
+
--
type: long

--

*`netflow.destination_transport_port`*::
+
--
type: integer

--

*`netflow.destination_ipv4_address`*::
+
--
type: ip

--

*`netflow.destination_ipv4_prefix_length`*::
+
--
type: short

--

*`netflow.egress_interface`*::
+
--
type: long

--

*`netflow.ip_next_hop_ipv4_address`*::
+
--
type: ip

--

*`netflow.bgp_source_as_number`*::
+
--
type: long

--

*`netflow.bgp_destination_as_number`*::
+
--
type: long

--

*`netflow.bgp_next_hop_ipv4_address`*::
+
--
type: ip

--

*`netflow.post_mcast_packet_delta_count`*::
+
--
type: long

--

*`netflow.post_mcast_octet_delta_count`*::
+
--
type: long

--

*`netflow.flow_end_sys_up_time`*::
+
--
type: long

--

*`netflow.flow_start_sys_up_time`*::
+
--
type: long

--

*`netflow.post_octet_delta_count`*::
+
--
type: long

--

*`netflow.post_packet_delta_count`*::
+
--
type: long

--

*`netflow.minimum_ip_total_length`*::
+
--
type: long

--

*`netflow.maximum_ip_total_length`*::
+
--
type: long

--

*`netflow.source_ipv6_address`*::
+
--
type: ip

--

*`netflow.destination_ipv6_address`*::
+
--
type: ip

--

*`netflow.source_ipv6_prefix_length`*::
+
--
type: short

--

*`netflow.destination_ipv6_prefix_length`*::
+
--
type: short

--

*`netflow.flow_label_ipv6`*::
+
--
type: long

--

*`netflow.icmp_type_code_ipv4`*::
+
--
type: integer

--

*`netflow.igmp_type`*::
+
--
type: short

--

*`netflow.sampling_interval`*::
+
--
type: long

--

*`netflow.sampling_algorithm`*::
+
--
type: short

--

*`netflow.flow_active_timeout`*::
+
--
type: integer

--

*`netflow.flow_idle_timeout`*::
+
--
type: integer

--

*`netflow.engine_type`*::
+
--
type: short

--

*`netflow.engine_id`*::
+
--
type: short

--

*`netflow.exported_octet_total_count`*::
+
--
type: long

--

*`netflow.exported_message_total_count`*::
+
--
type: long

--

*`netflow.exported_flow_record_total_count`*::
+
--
type: long

--

*`netflow.ipv4_router_sc`*::
+
--
type: ip

--

*`netflow.source_ipv4_prefix`*::
+
--
type: ip

--

*`netflow.destination_ipv4_prefix`*::
+
--
type: ip

--

*`netflow.mpls_top_label_type`*::
+
--
type: short

--

*`netflow.mpls_top_label_ipv4_address`*::
+
--
type: ip

--

*`netflow.sampler_id`*::
+
--
type: short

--

*`netflow.sampler_mode`*::
+
--
type: short

--

*`netflow.sampler_random_interval`*::
+
--
type: long

--

*`netflow.class_id`*::
+
--
type: short

--

*`netflow.minimum_ttl`*::
+
--
type: short

--

*`netflow.maximum_ttl`*::
+
--
type: short

--

*`netflow.fragment_identification`*::
+
--
type: long

--

*`netflow.post_ip_class_of_service`*::
+
--
type: short

--

*`netflow.source_mac_address`*::
+
--
type: keyword

--

*`netflow.post_destination_mac_address`*::
+
--
type: keyword

--

*`netflow.vlan_id`*::
+
--
type: integer

--

*`netflow.post_vlan_id`*::
+
--
type: integer

--

*`netflow.ip_version`*::
+
--
type: short

--

*`netflow.flow_direction`*::
+
--
type: short

--

*`netflow.ip_next_hop_ipv6_address`*::
+
--
type: ip

--

*`netflow.bgp_next_hop_ipv6_address`*::
+
--
type: ip

--

*`netflow.ipv6_extension_headers`*::
+
--
type: long

--

*`netflow.mpls_top_label_stack_section`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section2`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section3`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section4`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section5`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section6`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section7`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section8`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section9`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section10`*::
+
--
type: short

--

*`netflow.destination_mac_address`*::
+
--
type: keyword

--

*`netflow.post_source_mac_address`*::
+
--
type: keyword

--

*`netflow.interface_name`*::
+
--
type: keyword

--

*`netflow.interface_description`*::
+
--
type: keyword

--

*`netflow.sampler_name`*::
+
--
type: keyword

--

*`netflow.octet_total_count`*::
+
--
type: long

--

*`netflow.packet_total_count`*::
+
--
type: long

--

*`netflow.flags_and_sampler_id`*::
+
--
type: long

--

*`netflow.fragment_offset`*::
+
--
type: integer

--

*`netflow.forwarding_status`*::
+
--
type: short

--

*`netflow.mpls_vpn_route_distinguisher`*::
+
--
type: short

--

*`netflow.mpls_top_label_prefix_length`*::
+
--
type: short

--

*`netflow.src_traffic_index`*::
+
--
type: long

--

*`netflow.dst_traffic_index`*::
+
--
type: long

--

*`netflow.application_description`*::
+
--
type: keyword

--

*`netflow.application_id`*::
+
--
type: short

--

*`netflow.application_name`*::
+
--
type: keyword

--

*`netflow.post_ip_diff_serv_code_point`*::
+
--
type: short

--

*`netflow.multicast_replication_factor`*::
+
--
type: long

--

*`netflow.class_name`*::
+
--
type: keyword

--

*`netflow.classification_engine_id`*::
+
--
type: short

--

*`netflow.layer2packet_section_offset`*::
+
--
type: integer

--

*`netflow.layer2packet_section_size`*::
+
--
type: integer

--

*`netflow.layer2packet_section_data`*::
+
--
type: short

--

*`netflow.bgp_next_adjacent_as_number`*::
+
--
type: long

--

*`netflow.bgp_prev_adjacent_as_number`*::
+
--
type: long

--

*`netflow.exporter_ipv4_address`*::
+
--
type: ip

--

*`netflow.exporter_ipv6_address`*::
+
--
type: ip

--

*`netflow.dropped_octet_delta_count`*::
+
--
type: long

--

*`netflow.dropped_packet_delta_count`*::
+
--
type: long

--

*`netflow.dropped_octet_total_count`*::
+
--
type: long

--

*`netflow.dropped_packet_total_count`*::
+
--
type: long

--

*`netflow.flow_end_reason`*::
+
--
type: short

--

*`netflow.common_properties_id`*::
+
--
type: long

--

*`netflow.observation_point_id`*::
+
--
type: long

--

*`netflow.icmp_type_code_ipv6`*::
+
--
type: integer

--

*`netflow.mpls_top_label_ipv6_address`*::
+
--
type: ip

--

*`netflow.line_card_id`*::
+
--
type: long

--

*`netflow.port_id`*::
+
--
type: long

--

*`netflow.metering_process_id`*::
+
--
type: long

--

*`netflow.exporting_process_id`*::
+
--
type: long

--

*`netflow.template_id`*::
+
--
type: integer

--

*`netflow.wlan_channel_id`*::
+
--
type: short

--

*`netflow.wlan_ssid`*::
+
--
type: keyword

--

*`netflow.flow_id`*::
+
--
type: long

--

*`netflow.observation_domain_id`*::
+
--
type: long

--

*`netflow.flow_start_seconds`*::
+
--
type: date

--

*`netflow.flow_end_seconds`*::
+
--
type: date

--

*`netflow.flow_start_milliseconds`*::
+
--
type: date

--

*`netflow.flow_end_milliseconds`*::
+
--
type: date

--

*`netflow.flow_start_microseconds`*::
+
--
type: date

--

*`netflow.flow_end_microseconds`*::
+
--
type: date

--

*`netflow.flow_start_nanoseconds`*::
+
--
type: date

--

*`netflow.flow_end_nanoseconds`*::
+
--
type: date

--

*`netflow.flow_start_delta_microseconds`*::
+
--
type: long

--

*`netflow.flow_end_delta_microseconds`*::
+
--
type: long

--

*`netflow.system_init_time_milliseconds`*::
+
--
type: date

--

*`netflow.flow_duration_milliseconds`*::
+
--
type: long

--

*`netflow.flow_duration_microseconds`*::
+
--
type: long

--

*`netflow.observed_flow_total_count`*::
+
--
type: long

--

*`netflow.ignored_packet_total_count`*::
+
--
type: long

--

*`netflow.ignored_octet_total_count`*::
+
--
type: long

--

*`netflow.not_sent_flow_total_count`*::
+
--
type: long

--

*`netflow.not_sent_packet_total_count`*::
+
--
type: long

--

*`netflow.not_sent_octet_total_count`*::
+
--
type: long

--

*`netflow.destination_ipv6_prefix`*::
+
--
type: ip

--

*`netflow.source_ipv6_prefix`*::
+
--
type: ip

--

*`netflow.post_octet_total_count`*::
+
--
type: long

--

*`netflow.post_packet_total_count`*::
+
--
type: long

--

*`netflow.flow_key_indicator`*::
+
--
type: long

--

*`netflow.post_mcast_packet_total_count`*::
+
--
type: long

--

*`netflow.post_mcast_octet_total_count`*::
+
--
type: long

--

*`netflow.icmp_type_ipv4`*::
+
--
type: short

--

*`netflow.icmp_code_ipv4`*::
+
--
type: short

--

*`netflow.icmp_type_ipv6`*::
+
--
type: short

--

*`netflow.icmp_code_ipv6`*::
+
--
type: short

--

*`netflow.udp_source_port`*::
+
--
type: integer

--

*`netflow.udp_destination_port`*::
+
--
type: integer

--

*`netflow.tcp_source_port`*::
+
--
type: integer

--

*`netflow.tcp_destination_port`*::
+
--
type: integer

--

*`netflow.tcp_sequence_number`*::
+
--
type: long

--

*`netflow.tcp_acknowledgement_number`*::
+
--
type: long

--

*`netflow.tcp_window_size`*::
+
--
type: integer

--

*`netflow.tcp_urgent_pointer`*::
+
--
type: integer

--

*`netflow.tcp_header_length`*::
+
--
type: short

--

*`netflow.ip_header_length`*::
+
--
type: short

--

*`netflow.total_length_ipv4`*::
+
--
type: integer

--

*`netflow.payload_length_ipv6`*::
+
--
type: integer

--

*`netflow.ip_ttl`*::
+
--
type: short

--

*`netflow.next_header_ipv6`*::
+
--
type: short

--

*`netflow.mpls_payload_length`*::
+
--
type: long

--

*`netflow.ip_diff_serv_code_point`*::
+
--
type: short

--

*`netflow.ip_precedence`*::
+
--
type: short

--

*`netflow.fragment_flags`*::
+
--
type: short

--

*`netflow.octet_delta_sum_of_squares`*::
+
--
type: long

--

*`netflow.octet_total_sum_of_squares`*::
+
--
type: long

--

*`netflow.mpls_top_label_ttl`*::
+
--
type: short

--

*`netflow.mpls_label_stack_length`*::
+
--
type: long

--

*`netflow.mpls_label_stack_depth`*::
+
--
type: long

--

*`netflow.mpls_top_label_exp`*::
+
--
type: short

--

*`netflow.ip_payload_length`*::
+
--
type: long

--

*`netflow.udp_message_length`*::
+
--
type: integer

--

*`netflow.is_multicast`*::
+
--
type: short

--

*`netflow.ipv4_ihl`*::
+
--
type: short

--

*`netflow.ipv4_options`*::
+
--
type: long

--

*`netflow.tcp_options`*::
+
--
type: long

--

*`netflow.padding_octets`*::
+
--
type: short

--

*`netflow.collector_ipv4_address`*::
+
--
type: ip

--

*`netflow.collector_ipv6_address`*::
+
--
type: ip

--

*`netflow.export_interface`*::
+
--
type: long

--

*`netflow.export_protocol_version`*::
+
--
type: short

--

*`netflow.export_transport_protocol`*::
+
--
type: short

--

*`netflow.collector_transport_port`*::
+
--
type: integer

--

*`netflow.exporter_transport_port`*::
+
--
type: integer

--

*`netflow.tcp_syn_total_count`*::
+
--
type: long

--

*`netflow.tcp_fin_total_count`*::
+
--
type: long

--

*`netflow.tcp_rst_total_count`*::
+
--
type: long

--

*`netflow.tcp_psh_total_count`*::
+
--
type: long

--

*`netflow.tcp_ack_total_count`*::
+
--
type: long

--

*`netflow.tcp_urg_total_count`*::
+
--
type: long

--

*`netflow.ip_total_length`*::
+
--
type: long

--

*`netflow.post_nast_ource_ipv4_address`*::
+
--
type: ip

--

*`netflow.post_nadt_estination_ipv4_address`*::
+
--
type: ip

--

*`netflow.post_napst_ource_transport_port`*::
+
--
type: integer

--

*`netflow.post_napdt_estination_transport_port`*::
+
--
type: integer

--

*`netflow.nat_originating_address_realm`*::
+
--
type: short

--

*`netflow.nat_event`*::
+
--
type: short

--

*`netflow.initiator_octets`*::
+
--
type: long

--

*`netflow.responder_octets`*::
+
--
type: long

--

*`netflow.firewall_event`*::
+
--
type: short

--

*`netflow.ingress_vrfid`*::
+
--
type: long

--

*`netflow.egress_vrfid`*::
+
--
type: long

--

*`netflow.vr_fname`*::
+
--
type: keyword

--

*`netflow.post_mpls_top_label_exp`*::
+
--
type: short

--

*`netflow.tcp_window_scale`*::
+
--
type: integer

--

*`netflow.biflow_direction`*::
+
--
type: short

--

*`netflow.ethernet_header_length`*::
+
--
type: short

--

*`netflow.ethernet_payload_length`*::
+
--
type: integer

--

*`netflow.ethernet_total_length`*::
+
--
type: integer

--

*`netflow.dot1q_vlan_id`*::
+
--
type: integer

--

*`netflow.dot1q_priority`*::
+
--
type: short

--

*`netflow.dot1q_customer_vlan_id`*::
+
--
type: integer

--

*`netflow.dot1q_customer_priority`*::
+
--
type: short

--

*`netflow.metro_evc_id`*::
+
--
type: keyword

--

*`netflow.metro_evc_type`*::
+
--
type: short

--

*`netflow.pseudo_wire_id`*::
+
--
type: long

--

*`netflow.pseudo_wire_type`*::
+
--
type: integer

--

*`netflow.pseudo_wire_control_word`*::
+
--
type: long

--

*`netflow.ingress_physical_interface`*::
+
--
type: long

--

*`netflow.egress_physical_interface`*::
+
--
type: long

--

*`netflow.post_dot1q_vlan_id`*::
+
--
type: integer

--

*`netflow.post_dot1q_customer_vlan_id`*::
+
--
type: integer

--

*`netflow.ethernet_type`*::
+
--
type: integer

--

*`netflow.post_ip_precedence`*::
+
--
type: short

--

*`netflow.collection_time_milliseconds`*::
+
--
type: date

--

*`netflow.export_sctp_stream_id`*::
+
--
type: integer

--

*`netflow.max_export_seconds`*::
+
--
type: date

--

*`netflow.max_flow_end_seconds`*::
+
--
type: date

--

*`netflow.message_md5_checksum`*::
+
--
type: short

--

*`netflow.message_scope`*::
+
--
type: short

--

*`netflow.min_export_seconds`*::
+
--
type: date

--

*`netflow.min_flow_start_seconds`*::
+
--
type: date

--

*`netflow.opaque_octets`*::
+
--
type: short

--

*`netflow.session_scope`*::
+
--
type: short

--

*`netflow.max_flow_end_microseconds`*::
+
--
type: date

--

*`netflow.max_flow_end_milliseconds`*::
+
--
type: date

--

*`netflow.max_flow_end_nanoseconds`*::
+
--
type: date

--

*`netflow.min_flow_start_microseconds`*::
+
--
type: date

--

*`netflow.min_flow_start_milliseconds`*::
+
--
type: date

--

*`netflow.min_flow_start_nanoseconds`*::
+
--
type: date

--

*`netflow.collector_certificate`*::
+
--
type: short

--

*`netflow.exporter_certificate`*::
+
--
type: short

--

*`netflow.data_records_reliability`*::
+
--
type: boolean

--

*`netflow.observation_point_type`*::
+
--
type: short

--

*`netflow.new_connection_delta_count`*::
+
--
type: long

--

*`netflow.connection_sum_duration_seconds`*::
+
--
type: long

--

*`netflow.connection_transaction_id`*::
+
--
type: long

--

*`netflow.post_nast_ource_ipv6_address`*::
+
--
type: ip

--

*`netflow.post_nadt_estination_ipv6_address`*::
+
--
type: ip

--

*`netflow.nat_pool_id`*::
+
--
type: long

--

*`netflow.nat_pool_name`*::
+
--
type: keyword

--

*`netflow.anonymization_flags`*::
+
--
type: integer

--

*`netflow.anonymization_technique`*::
+
--
type: integer

--

*`netflow.information_element_index`*::
+
--
type: integer

--

*`netflow.p2p_technology`*::
+
--
type: keyword

--

*`netflow.tunnel_technology`*::
+
--
type: keyword

--

*`netflow.encrypted_technology`*::
+
--
type: keyword

--

*`netflow.bgp_validity_state`*::
+
--
type: short

--

*`netflow.ip_sec_spi`*::
+
--
type: long

--

*`netflow.gre_key`*::
+
--
type: long

--

*`netflow.nat_type`*::
+
--
type: short

--

*`netflow.initiator_packets`*::
+
--
type: long

--

*`netflow.responder_packets`*::
+
--
type: long

--

*`netflow.observation_domain_name`*::
+
--
type: keyword

--

*`netflow.selection_sequence_id`*::
+
--
type: long

--

*`netflow.selector_id`*::
+
--
type: long

--

*`netflow.information_element_id`*::
+
--
type: integer

--

*`netflow.selector_algorithm`*::
+
--
type: integer

--

*`netflow.sampling_packet_interval`*::
+
--
type: long

--

*`netflow.sampling_packet_space`*::
+
--
type: long

--

*`netflow.sampling_time_interval`*::
+
--
type: long

--

*`netflow.sampling_time_space`*::
+
--
type: long

--

*`netflow.sampling_size`*::
+
--
type: long

--

*`netflow.sampling_population`*::
+
--
type: long

--

*`netflow.sampling_probability`*::
+
--
type: double

--

*`netflow.data_link_frame_size`*::
+
--
type: integer

--

*`netflow.ip_header_packet_section`*::
+
--
type: short

--

*`netflow.ip_payload_packet_section`*::
+
--
type: short

--

*`netflow.data_link_frame_section`*::
+
--
type: short

--

*`netflow.mpls_label_stack_section`*::
+
--
type: short

--

*`netflow.mpls_payload_packet_section`*::
+
--
type: short

--

*`netflow.selector_id_total_pkts_observed`*::
+
--
type: long

--

*`netflow.selector_id_total_pkts_selected`*::
+
--
type: long

--

*`netflow.absolute_error`*::
+
--
type: double

--

*`netflow.relative_error`*::
+
--
type: double

--

*`netflow.observation_time_seconds`*::
+
--
type: date

--

*`netflow.observation_time_milliseconds`*::
+
--
type: date

--

*`netflow.observation_time_microseconds`*::
+
--
type: date

--

*`netflow.observation_time_nanoseconds`*::
+
--
type: date

--

*`netflow.digest_hash_value`*::
+
--
type: long

--

*`netflow.hash_ipp_ayload_offset`*::
+
--
type: long

--

*`netflow.hash_ipp_ayload_size`*::
+
--
type: long

--

*`netflow.hash_output_range_min`*::
+
--
type: long

--

*`netflow.hash_output_range_max`*::
+
--
type: long

--

*`netflow.hash_selected_range_min`*::
+
--
type: long

--

*`netflow.hash_selected_range_max`*::
+
--
type: long

--

*`netflow.hash_digest_output`*::
+
--
type: boolean

--

*`netflow.hash_initialiser_value`*::
+
--
type: long

--

*`netflow.selector_name`*::
+
--
type: keyword

--

*`netflow.upper_cli_imit`*::
+
--
type: double

--

*`netflow.lower_cli_imit`*::
+
--
type: double

--

*`netflow.confidence_level`*::
+
--
type: double

--

*`netflow.information_element_data_type`*::
+
--
type: short

--

*`netflow.information_element_description`*::
+
--
type: keyword

--

*`netflow.information_element_name`*::
+
--
type: keyword

--

*`netflow.information_element_range_begin`*::
+
--
type: long

--

*`netflow.information_element_range_end`*::
+
--
type: long

--

*`netflow.information_element_semantics`*::
+
--
type: short

--

*`netflow.information_element_units`*::
+
--
type: integer

--

*`netflow.private_enterprise_number`*::
+
--
type: long

--

*`netflow.virtual_station_interface_id`*::
+
--
type: short

--

*`netflow.virtual_station_interface_name`*::
+
--
type: keyword

--

*`netflow.virtual_station_uuid`*::
+
--
type: short

--

*`netflow.virtual_station_name`*::
+
--
type: keyword

--

*`netflow.layer2_segment_id`*::
+
--
type: long

--

*`netflow.layer2_octet_delta_count`*::
+
--
type: long

--

*`netflow.layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.ingress_unicast_packet_total_count`*::
+
--
type: long

--

*`netflow.ingress_multicast_packet_total_count`*::
+
--
type: long

--

*`netflow.ingress_broadcast_packet_total_count`*::
+
--
type: long

--

*`netflow.egress_unicast_packet_total_count`*::
+
--
type: long

--

*`netflow.egress_broadcast_packet_total_count`*::
+
--
type: long

--

*`netflow.monitoring_interval_start_milli_seconds`*::
+
--
type: date

--

*`netflow.monitoring_interval_end_milli_seconds`*::
+
--
type: date

--

*`netflow.port_range_start`*::
+
--
type: integer

--

*`netflow.port_range_end`*::
+
--
type: integer

--

*`netflow.port_range_step_size`*::
+
--
type: integer

--

*`netflow.port_range_num_ports`*::
+
--
type: integer

--

*`netflow.sta_mac_address`*::
+
--
type: keyword

--

*`netflow.sta_ipv4_address`*::
+
--
type: ip

--

*`netflow.wtp_mac_address`*::
+
--
type: keyword

--

*`netflow.ingress_interface_type`*::
+
--
type: long

--

*`netflow.egress_interface_type`*::
+
--
type: long

--

*`netflow.rtp_sequence_number`*::
+
--
type: integer

--

*`netflow.user_name`*::
+
--
type: keyword

--

*`netflow.application_category_name`*::
+
--
type: keyword

--

*`netflow.application_sub_category_name`*::
+
--
type: keyword

--

*`netflow.application_group_name`*::
+
--
type: keyword

--

*`netflow.original_flows_present`*::
+
--
type: long

--

*`netflow.original_flows_initiated`*::
+
--
type: long

--

*`netflow.original_flows_completed`*::
+
--
type: long

--

*`netflow.distinct_count_of_sourc_eipa_ddress`*::
+
--
type: long

--

*`netflow.distinct_count_of_destinatio_nipa_ddress`*::
+
--
type: long

--

*`netflow.distinct_count_of_source_ipv4_address`*::
+
--
type: long

--

*`netflow.distinct_count_of_destination_ipv4_address`*::
+
--
type: long

--

*`netflow.distinct_count_of_source_ipv6_address`*::
+
--
type: long

--

*`netflow.distinct_count_of_destination_ipv6_address`*::
+
--
type: long

--

*`netflow.value_distribution_method`*::
+
--
type: short

--

*`netflow.rfc3550_jitter_milliseconds`*::
+
--
type: long

--

*`netflow.rfc3550_jitter_microseconds`*::
+
--
type: long

--

*`netflow.rfc3550_jitter_nanoseconds`*::
+
--
type: long

--

*`netflow.dot1q_dei`*::
+
--
type: boolean

--

*`netflow.dot1q_customer_dei`*::
+
--
type: boolean

--

*`netflow.flow_selector_algorithm`*::
+
--
type: integer

--

*`netflow.flow_selected_octet_delta_count`*::
+
--
type: long

--

*`netflow.flow_selected_packet_delta_count`*::
+
--
type: long

--

*`netflow.flow_selected_flow_delta_count`*::
+
--
type: long

--

*`netflow.selector_itd_otal_flows_observed`*::
+
--
type: long

--

*`netflow.selector_itd_otal_flows_selected`*::
+
--
type: long

--

*`netflow.sampling_flow_interval`*::
+
--
type: long

--

*`netflow.sampling_flow_spacing`*::
+
--
type: long

--

*`netflow.flow_sampling_time_interval`*::
+
--
type: long

--

*`netflow.flow_sampling_time_spacing`*::
+
--
type: long

--

*`netflow.hash_flow_domain`*::
+
--
type: integer

--

*`netflow.transport_octet_delta_count`*::
+
--
type: long

--

*`netflow.transport_packet_delta_count`*::
+
--
type: long

--

*`netflow.original_exporter_ipv4_address`*::
+
--
type: ip

--

*`netflow.original_exporter_ipv6_address`*::
+
--
type: ip

--

*`netflow.original_observation_domain_id`*::
+
--
type: long

--

*`netflow.intermediate_process_id`*::
+
--
type: long

--

*`netflow.ignored_data_record_total_count`*::
+
--
type: long

--

*`netflow.data_link_frame_type`*::
+
--
type: integer

--

*`netflow.section_offset`*::
+
--
type: integer

--

*`netflow.section_exported_octets`*::
+
--
type: integer

--

*`netflow.dot1q_service_instance_tag`*::
+
--
type: short

--

*`netflow.dot1q_service_instance_id`*::
+
--
type: long

--

*`netflow.dot1q_service_instance_priority`*::
+
--
type: short

--

*`netflow.dot1q_customer_source_mac_address`*::
+
--
type: keyword

--

*`netflow.dot1q_customer_destination_mac_address`*::
+
--
type: keyword

--

*`netflow.post_layer2_octet_delta_count`*::
+
--
type: long

--

*`netflow.post_mcast_layer2_octet_delta_count`*::
+
--
type: long

--

*`netflow.post_layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.post_mcast_layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.minimum_layer2_total_length`*::
+
--
type: long

--

*`netflow.maximum_layer2_total_length`*::
+
--
type: long

--

*`netflow.dropped_layer2_octet_delta_count`*::
+
--
type: long

--

*`netflow.dropped_layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.ignored_layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.not_sent_layer2_octet_total_count`*::
+
--
type: long

--

*`netflow.layer2_octet_delta_sum_of_squares`*::
+
--
type: long

--

*`netflow.layer2_octet_total_sum_of_squares`*::
+
--
type: long

--

*`netflow.layer2_frame_delta_count`*::
+
--
type: long

--

*`netflow.layer2_frame_total_count`*::
+
--
type: long

--

*`netflow.pseudo_wire_destination_ipv4_address`*::
+
--
type: ip

--

*`netflow.ignored_layer2_frame_total_count`*::
+
--
type: long

--

*`netflow.mib_object_value_integer`*::
+
--
type: integer

--

*`netflow.mib_object_value_octet_string`*::
+
--
type: short

--

*`netflow.mib_object_value_oid`*::
+
--
type: short

--

*`netflow.mib_object_value_bits`*::
+
--
type: short

--

*`netflow.mib_object_valuei_pa_ddress`*::
+
--
type: ip

--

*`netflow.mib_object_value_counter`*::
+
--
type: long

--

*`netflow.mib_object_value_gauge`*::
+
--
type: long

--

*`netflow.mib_object_value_time_ticks`*::
+
--
type: long

--

*`netflow.mib_object_value_unsigned`*::
+
--
type: long

--

*`netflow.mib_object_identifier`*::
+
--
type: short

--

*`netflow.mib_sub_identifier`*::
+
--
type: long

--

*`netflow.mib_index_indicator`*::
+
--
type: long

--

*`netflow.mib_capture_time_semantics`*::
+
--
type: short

--

*`netflow.mib_context_engine_id`*::
+
--
type: short

--

*`netflow.mib_context_name`*::
+
--
type: keyword

--

*`netflow.mib_object_name`*::
+
--
type: keyword

--

*`netflow.mib_object_description`*::
+
--
type: keyword

--

*`netflow.mib_object_syntax`*::
+
--
type: keyword

--

*`netflow.mib_module_name`*::
+
--
type: keyword

--

*`netflow.mobile_imsi`*::
+
--
type: keyword

--

*`netflow.mobile_msisdn`*::
+
--
type: keyword

--

*`netflow.http_status_code`*::
+
--
type: integer

--

*`netflow.source_transport_ports_limit`*::
+
--
type: integer

--

*`netflow.http_request_method`*::
+
--
type: keyword

--

*`netflow.http_request_host`*::
+
--
type: keyword

--

*`netflow.http_request_target`*::
+
--
type: keyword

--

*`netflow.http_message_version`*::
+
--
type: keyword

--

*`netflow.nat_instance_id`*::
+
--
type: long

--

*`netflow.internal_address_realm`*::
+
--
type: short

--

*`netflow.external_address_realm`*::
+
--
type: short

--

*`netflow.nat_quota_exceeded_event`*::
+
--
type: long

--

*`netflow.nat_threshold_event`*::
+
--
type: long

--

*`netflow.http_user_agent`*::
+
--
type: keyword

--

*`netflow.http_content_type`*::
+
--
type: keyword

--

*`netflow.http_reason_phrase`*::
+
--
type: keyword

--

*`netflow.max_session_entries`*::
+
--
type: long

--

*`netflow.max_bieb_ntries`*::
+
--
type: long

--

*`netflow.max_entries_per_user`*::
+
--
type: long

--

*`netflow.max_subscribers`*::
+
--
type: long

--

*`netflow.max_fragments_pending_reassembly`*::
+
--
type: long

--

*`netflow.address_pool_high_threshold`*::
+
--
type: long

--

*`netflow.address_pool_low_threshold`*::
+
--
type: long

--

*`netflow.address_port_mapping_high_threshold`*::
+
--
type: long

--

*`netflow.address_port_mapping_low_threshold`*::
+
--
type: long

--

*`netflow.address_port_mapping_per_user_high_threshold`*::
+
--
type: long

--

*`netflow.global_address_mapping_high_threshold`*::
+
--
type: long

--

*`netflow.vpn_identifier`*::
+
--
type: short

--

[[exported-fields-netflow-module]]
== NetFlow fields

Module for receiving NetFlow and IPFIX flow records over UDP. The module does not add fields beyond what the netflow input provides.


[[exported-fields-nginx]]
== Nginx fields

Module for parsing the Nginx log files.



[float]
== nginx fields

Fields from the Nginx log files.



[float]
== access fields

Contains fields for the Nginx access logs.



*`nginx.access.remote_ip_list`*::
+
--
type: array

An array of remote IP addresses. It is a list because it is common to include, besides the client IP address, IP addresses from headers like `X-Forwarded-For`. Real source IP is restored to `source.ip`.


--

*`nginx.access.body_sent.bytes`*::
+
--
type: alias

alias to: http.response.body.bytes

--

*`nginx.access.user_name`*::
+
--
type: alias

alias to: user.name

--

*`nginx.access.method`*::
+
--
type: alias

alias to: http.request.method

--

*`nginx.access.url`*::
+
--
type: alias

alias to: url.original

--

*`nginx.access.http_version`*::
+
--
type: alias

alias to: http.version

--

*`nginx.access.response_code`*::
+
--
type: alias

alias to: http.response.status_code

--

*`nginx.access.referrer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`nginx.access.agent`*::
+
--
type: alias

alias to: user_agent.original

--


*`nginx.access.user_agent.device`*::
+
--
type: alias

alias to: user_agent.device.name

--

*`nginx.access.user_agent.name`*::
+
--
type: alias

alias to: user_agent.name

--

*`nginx.access.user_agent.os`*::
+
--
type: alias

alias to: user_agent.os.full_name

--

*`nginx.access.user_agent.os_name`*::
+
--
type: alias

alias to: user_agent.os.name

--

*`nginx.access.user_agent.original`*::
+
--
type: alias

alias to: user_agent.original

--


*`nginx.access.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`nginx.access.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`nginx.access.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`nginx.access.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`nginx.access.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`nginx.access.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[float]
== error fields

Contains fields for the Nginx error logs.



*`nginx.error.connection_id`*::
+
--
type: long

Connection identifier.


--

*`nginx.error.level`*::
+
--
type: alias

alias to: log.level

--

*`nginx.error.pid`*::
+
--
type: alias

alias to: process.pid

--

*`nginx.error.tid`*::
+
--
type: alias

alias to: process.thread.id

--

*`nginx.error.message`*::
+
--
type: alias

alias to: message

--

[[exported-fields-osquery]]
== Osquery fields

Fields exported by the `osquery` module



[float]
== osquery fields




[float]
== result fields

Common fields exported by the result metricset.



*`osquery.result.name`*::
+
--
type: keyword

The name of the query that generated this event.


--

*`osquery.result.action`*::
+
--
type: keyword

For incremental data, marks whether the entry was added or removed. It can be one of "added", "removed", or "snapshot".


--

*`osquery.result.host_identifier`*::
+
--
type: keyword

The identifier for the host on which the osquery agent is running. Normally the hostname.


--

*`osquery.result.unix_time`*::
+
--
type: long

Unix timestamp of the event, in seconds since the epoch. Used for computing the `@timestamp` column.


--

*`osquery.result.calendar_time`*::
+
--
type: keyword

String representation of the collection time, as formatted by osquery.


--

[[exported-fields-panw]]
== panw fields

Module for Palo Alto Networks (PAN-OS)



[float]
== panw fields

Fields from the panw module.



[float]
== panos fields

Fields for the Palo Alto Networks PAN-OS logs.



*`panw.panos.ruleset`*::
+
--
type: keyword

Name of the rule that matched this session.


--

[float]
== source fields

Fields to extend the top-level source object.



*`panw.panos.source.zone`*::
+
--
type: keyword

Source zone for this session.


--

*`panw.panos.source.interface`*::
+
--
type: keyword

Source interface for this session.


--

[float]
== nat fields

Post-NAT source address, if source NAT is performed.



*`panw.panos.source.nat.ip`*::
+
--
type: ip

Post-NAT source IP.


--

*`panw.panos.source.nat.port`*::
+
--
type: long

Post-NAT source port.


--

[float]
== destination fields

Fields to extend the top-level destination object.



*`panw.panos.destination.zone`*::
+
--
type: keyword

Destination zone for this session.


--

*`panw.panos.destination.interface`*::
+
--
type: keyword

Destination interface for this session.


--

[float]
== nat fields

Post-NAT destination address, if destination NAT is performed.



*`panw.panos.destination.nat.ip`*::
+
--
type: ip

Post-NAT destination IP.


--

*`panw.panos.destination.nat.port`*::
+
--
type: long

Post-NAT destination port.


--

[float]
== network fields

Fields to extend the top-level network object.



*`panw.panos.network.pcap_id`*::
+
--
type: keyword

Packet capture ID for a threat.


--


*`panw.panos.network.nat.community_id`*::
+
--
type: keyword

Community ID flow-hash for the NAT 5-tuple.


--

[float]
== file fields

Fields to extend the top-level file object.



*`panw.panos.file.hash`*::
+
--
type: keyword

Binary hash for a threat file sent to be analyzed by the WildFire service.


--

[float]
== url fields

Fields to extend the top-level url object.



*`panw.panos.url.category`*::
+
--
type: keyword

For threat URLs, it's the URL category. For WildFire, the verdict on the file and is either 'malicious', 'grayware', or 'benign'.


--

*`panw.panos.flow_id`*::
+
--
type: keyword

Internal numeric identifier for each session.


--

*`panw.panos.sequence_number`*::
+
--
type: long

Log entry identifier that is incremented sequentially. Unique for each log type.


--

*`panw.panos.threat.resource`*::
+
--
type: keyword

URL or file name for a threat.


--

*`panw.panos.threat.id`*::
+
--
type: keyword

Palo Alto Networks identifier for the threat.


--

*`panw.panos.threat.name`*::
+
--
type: keyword

Palo Alto Networks name for the threat.


--

[[exported-fields-postgresql]]
== PostgreSQL fields

Module for parsing the PostgreSQL log files.



[float]
== postgresql fields

Fields from PostgreSQL logs.



[float]
== log fields

Fields from the PostgreSQL log files.



*`postgresql.log.timestamp`*::
+
--

deprecated[7.3.0]

The timestamp from the log line.


--

*`postgresql.log.core_id`*::
+
--
type: long

Core id


--

*`postgresql.log.database`*::
+
--
example: mydb

Name of database

--

*`postgresql.log.query`*::
+
--
example: SELECT * FROM users;

Query statement.

--

*`postgresql.log.timezone`*::
+
--
type: alias

alias to: event.timezone

--

*`postgresql.log.thread_id`*::
+
--
type: alias

alias to: process.pid

--

*`postgresql.log.user`*::
+
--
type: alias

alias to: user.name

--

*`postgresql.log.level`*::
+
--
type: alias

alias to: log.level

--

*`postgresql.log.message`*::
+
--
type: alias

alias to: message

--

[[exported-fields-process]]
== Process fields

Process metadata fields




*`process.exe`*::
+
--
type: alias

alias to: process.executable

--

[[exported-fields-rabbitmq]]
== RabbitMQ fields

RabbitMQ Module



[float]
== rabbitmq fields




[float]
== log fields

RabbitMQ log files



*`rabbitmq.log.pid`*::
+
--
type: keyword

example: <0.222.0>

The Erlang process id

--

[[exported-fields-redis]]
== Redis fields

Redis Module



[float]
== redis fields




[float]
== log fields

Redis log files



*`redis.log.role`*::
+
--
type: keyword

The role of the Redis instance. Can be one of `master`, `slave`, `child` (for RDF/AOF writing child), or `sentinel`.


--

*`redis.log.pid`*::
+
--
type: alias

alias to: process.pid

--

*`redis.log.level`*::
+
--
type: alias

alias to: log.level

--

*`redis.log.message`*::
+
--
type: alias

alias to: message

--

[float]
== slowlog fields

Slow logs are retrieved from Redis via a network connection.



*`redis.slowlog.cmd`*::
+
--
type: keyword

The command executed.


--

*`redis.slowlog.duration.us`*::
+
--
type: long

How long it took to execute the command in microseconds.


--

*`redis.slowlog.id`*::
+
--
type: long

The ID of the query.


--

*`redis.slowlog.key`*::
+
--
type: keyword

The key on which the command was executed.


--

*`redis.slowlog.args`*::
+
--
type: keyword

The arguments with which the command was called.


--

[[exported-fields-santa]]
== Google Santa fields

Santa Module



[float]
== santa fields




*`santa.action`*::
+
--
type: keyword

example: EXEC

Action

--

*`santa.decision`*::
+
--
type: keyword

example: ALLOW

Decision that santad took.

--

*`santa.reason`*::
+
--
type: keyword

example: CERT

Reason for the decsision.

--

*`santa.mode`*::
+
--
type: keyword

example: M

Operating mode of Santa.

--

[float]
== disk fields

Fields for DISKAPPEAR actions.


*`santa.disk.volume`*::
+
--
The volume name.

--

*`santa.disk.bus`*::
+
--
The disk bus protocol.

--

*`santa.disk.serial`*::
+
--
The disk serial number.

--

*`santa.disk.bsdname`*::
+
--
example: disk1s3

The disk BSD name.

--

*`santa.disk.model`*::
+
--
example: APPLE SSD SM0512L

The disk model.

--

*`santa.disk.fs`*::
+
--
example: apfs

The disk volume kind (filesystem type).

--

*`santa.disk.mount`*::
+
--
The disk volume path.

--

*`certificate.common_name`*::
+
--
type: keyword

Common name from code signing certificate.

--

*`certificate.sha256`*::
+
--
type: keyword

SHA256 hash of code signing certificate.

--

*`hash.sha256`*::
+
--
type: keyword

Hash of process executable.

--

[[exported-fields-suricata]]
== Suricata fields

Module for handling the EVE JSON logs produced by Suricata.



[float]
== suricata fields

Fields from the Suricata EVE log file.



[float]
== eve fields

Fields exported by the EVE JSON logs



*`suricata.eve.event_type`*::
+
--
type: keyword

--

*`suricata.eve.app_proto_orig`*::
+
--
type: keyword

--


*`suricata.eve.tcp.tcp_flags`*::
+
--
type: keyword

--

*`suricata.eve.tcp.psh`*::
+
--
type: boolean

--

*`suricata.eve.tcp.tcp_flags_tc`*::
+
--
type: keyword

--

*`suricata.eve.tcp.ack`*::
+
--
type: boolean

--

*`suricata.eve.tcp.syn`*::
+
--
type: boolean

--

*`suricata.eve.tcp.state`*::
+
--
type: keyword

--

*`suricata.eve.tcp.tcp_flags_ts`*::
+
--
type: keyword

--

*`suricata.eve.tcp.rst`*::
+
--
type: boolean

--

*`suricata.eve.tcp.fin`*::
+
--
type: boolean

--


*`suricata.eve.fileinfo.sha1`*::
+
--
type: keyword

--

*`suricata.eve.fileinfo.filename`*::
+
--
type: alias

alias to: file.path

--

*`suricata.eve.fileinfo.tx_id`*::
+
--
type: long

--

*`suricata.eve.fileinfo.state`*::
+
--
type: keyword

--

*`suricata.eve.fileinfo.stored`*::
+
--
type: boolean

--

*`suricata.eve.fileinfo.gaps`*::
+
--
type: boolean

--

*`suricata.eve.fileinfo.sha256`*::
+
--
type: keyword

--

*`suricata.eve.fileinfo.md5`*::
+
--
type: keyword

--

*`suricata.eve.fileinfo.size`*::
+
--
type: alias

alias to: file.size

--

*`suricata.eve.icmp_type`*::
+
--
type: long

--

*`suricata.eve.dest_port`*::
+
--
type: alias

alias to: destination.port

--

*`suricata.eve.src_port`*::
+
--
type: alias

alias to: source.port

--

*`suricata.eve.proto`*::
+
--
type: alias

alias to: network.transport

--

*`suricata.eve.pcap_cnt`*::
+
--
type: long

--

*`suricata.eve.src_ip`*::
+
--
type: alias

alias to: source.ip

--


*`suricata.eve.dns.type`*::
+
--
type: keyword

--

*`suricata.eve.dns.rrtype`*::
+
--
type: keyword

--

*`suricata.eve.dns.rrname`*::
+
--
type: keyword

--

*`suricata.eve.dns.rdata`*::
+
--
type: keyword

--

*`suricata.eve.dns.tx_id`*::
+
--
type: long

--

*`suricata.eve.dns.ttl`*::
+
--
type: long

--

*`suricata.eve.dns.rcode`*::
+
--
type: keyword

--

*`suricata.eve.dns.id`*::
+
--
type: long

--

*`suricata.eve.flow_id`*::
+
--
type: keyword

--


*`suricata.eve.email.status`*::
+
--
type: keyword

--

*`suricata.eve.dest_ip`*::
+
--
type: alias

alias to: destination.ip

--

*`suricata.eve.icmp_code`*::
+
--
type: long

--


*`suricata.eve.http.status`*::
+
--
type: alias

alias to: http.response.status_code

--

*`suricata.eve.http.redirect`*::
+
--
type: keyword

--

*`suricata.eve.http.http_user_agent`*::
+
--
type: alias

alias to: user_agent.original

--

*`suricata.eve.http.protocol`*::
+
--
type: keyword

--

*`suricata.eve.http.http_refer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`suricata.eve.http.url`*::
+
--
type: alias

alias to: url.original

--

*`suricata.eve.http.hostname`*::
+
--
type: alias

alias to: url.domain

--

*`suricata.eve.http.length`*::
+
--
type: alias

alias to: http.response.body.bytes

--

*`suricata.eve.http.http_method`*::
+
--
type: alias

alias to: http.request.method

--

*`suricata.eve.http.http_content_type`*::
+
--
type: keyword

--

*`suricata.eve.timestamp`*::
+
--
type: alias

alias to: @timestamp

--

*`suricata.eve.in_iface`*::
+
--
type: keyword

--


*`suricata.eve.alert.category`*::
+
--
type: keyword

--

*`suricata.eve.alert.severity`*::
+
--
type: alias

alias to: event.severity

--

*`suricata.eve.alert.rev`*::
+
--
type: long

--

*`suricata.eve.alert.gid`*::
+
--
type: long

--

*`suricata.eve.alert.signature`*::
+
--
type: keyword

--

*`suricata.eve.alert.action`*::
+
--
type: alias

alias to: event.outcome

--

*`suricata.eve.alert.signature_id`*::
+
--
type: long

--



*`suricata.eve.ssh.client.proto_version`*::
+
--
type: keyword

--

*`suricata.eve.ssh.client.software_version`*::
+
--
type: keyword

--


*`suricata.eve.ssh.server.proto_version`*::
+
--
type: keyword

--

*`suricata.eve.ssh.server.software_version`*::
+
--
type: keyword

--



*`suricata.eve.stats.capture.kernel_packets`*::
+
--
type: long

--

*`suricata.eve.stats.capture.kernel_drops`*::
+
--
type: long

--

*`suricata.eve.stats.capture.kernel_ifdrops`*::
+
--
type: long

--

*`suricata.eve.stats.uptime`*::
+
--
type: long

--


*`suricata.eve.stats.detect.alert`*::
+
--
type: long

--


*`suricata.eve.stats.http.memcap`*::
+
--
type: long

--

*`suricata.eve.stats.http.memuse`*::
+
--
type: long

--


*`suricata.eve.stats.file_store.open_files`*::
+
--
type: long

--


*`suricata.eve.stats.defrag.max_frag_hits`*::
+
--
type: long

--


*`suricata.eve.stats.defrag.ipv4.timeouts`*::
+
--
type: long

--

*`suricata.eve.stats.defrag.ipv4.fragments`*::
+
--
type: long

--

*`suricata.eve.stats.defrag.ipv4.reassembled`*::
+
--
type: long

--


*`suricata.eve.stats.defrag.ipv6.timeouts`*::
+
--
type: long

--

*`suricata.eve.stats.defrag.ipv6.fragments`*::
+
--
type: long

--

*`suricata.eve.stats.defrag.ipv6.reassembled`*::
+
--
type: long

--


*`suricata.eve.stats.flow.tcp_reuse`*::
+
--
type: long

--

*`suricata.eve.stats.flow.udp`*::
+
--
type: long

--

*`suricata.eve.stats.flow.memcap`*::
+
--
type: long

--

*`suricata.eve.stats.flow.emerg_mode_entered`*::
+
--
type: long

--

*`suricata.eve.stats.flow.emerg_mode_over`*::
+
--
type: long

--

*`suricata.eve.stats.flow.tcp`*::
+
--
type: long

--

*`suricata.eve.stats.flow.icmpv6`*::
+
--
type: long

--

*`suricata.eve.stats.flow.icmpv4`*::
+
--
type: long

--

*`suricata.eve.stats.flow.spare`*::
+
--
type: long

--

*`suricata.eve.stats.flow.memuse`*::
+
--
type: long

--


*`suricata.eve.stats.tcp.pseudo_failed`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.ssn_memcap_drop`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.insert_data_overlap_fail`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.sessions`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.pseudo`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.synack`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.insert_data_normal_fail`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.syn`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.memuse`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.invalid_checksum`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.segment_memcap_drop`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.overlap`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.insert_list_fail`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.rst`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.stream_depth_reached`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.reassembly_memuse`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.reassembly_gap`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.overlap_diff_data`*::
+
--
type: long

--

*`suricata.eve.stats.tcp.no_flow`*::
+
--
type: long

--


*`suricata.eve.stats.decoder.avg_pkt_size`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.bytes`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.tcp`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.raw`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ppp`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.vlan_qinq`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.null`*::
+
--
type: long

--


*`suricata.eve.stats.decoder.ltnull.unsupported_type`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ltnull.pkt_too_small`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.invalid`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.gre`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ipv4`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ipv6`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.pkts`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ipv6_in_ipv6`*::
+
--
type: long

--


*`suricata.eve.stats.decoder.ipraw.invalid_ip_version`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.pppoe`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.udp`*::
+
--
type: long

--


*`suricata.eve.stats.decoder.dce.pkt_too_small`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.vlan`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.sctp`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.max_pkt_size`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.teredo`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.mpls`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.sll`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.icmpv6`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.icmpv4`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.erspan`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ethernet`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ipv4_in_ipv6`*::
+
--
type: long

--

*`suricata.eve.stats.decoder.ieee8021ah`*::
+
--
type: long

--


*`suricata.eve.stats.dns.memcap_global`*::
+
--
type: long

--

*`suricata.eve.stats.dns.memcap_state`*::
+
--
type: long

--

*`suricata.eve.stats.dns.memuse`*::
+
--
type: long

--


*`suricata.eve.stats.flow_mgr.rows_busy`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.flows_timeout`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.flows_notimeout`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.rows_skipped`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.closed_pruned`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.new_pruned`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.flows_removed`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.bypassed_pruned`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.est_pruned`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.flows_timeout_inuse`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.flows_checked`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.rows_maxlen`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.rows_checked`*::
+
--
type: long

--

*`suricata.eve.stats.flow_mgr.rows_empty`*::
+
--
type: long

--



*`suricata.eve.stats.app_layer.flow.tls`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.ftp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.http`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.failed_udp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.dns_udp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.dns_tcp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.smtp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.failed_tcp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.msn`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.ssh`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.imap`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.dcerpc_udp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.dcerpc_tcp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.flow.smb`*::
+
--
type: long

--


*`suricata.eve.stats.app_layer.tx.tls`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.ftp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.http`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.dns_udp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.dns_tcp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.smtp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.ssh`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.dcerpc_udp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.dcerpc_tcp`*::
+
--
type: long

--

*`suricata.eve.stats.app_layer.tx.smb`*::
+
--
type: long

--


*`suricata.eve.tls.notbefore`*::
+
--
type: date

--

*`suricata.eve.tls.issuerdn`*::
+
--
type: keyword

--

*`suricata.eve.tls.sni`*::
+
--
type: keyword

--

*`suricata.eve.tls.version`*::
+
--
type: keyword

--

*`suricata.eve.tls.session_resumed`*::
+
--
type: boolean

--

*`suricata.eve.tls.fingerprint`*::
+
--
type: keyword

--

*`suricata.eve.tls.serial`*::
+
--
type: keyword

--

*`suricata.eve.tls.notafter`*::
+
--
type: date

--

*`suricata.eve.tls.subject`*::
+
--
type: keyword

--

*`suricata.eve.app_proto_ts`*::
+
--
type: keyword

--


*`suricata.eve.flow.bytes_toclient`*::
+
--
type: alias

alias to: destination.bytes

--

*`suricata.eve.flow.start`*::
+
--
type: alias

alias to: event.start

--

*`suricata.eve.flow.pkts_toclient`*::
+
--
type: alias

alias to: destination.packets

--

*`suricata.eve.flow.age`*::
+
--
type: long

--

*`suricata.eve.flow.state`*::
+
--
type: keyword

--

*`suricata.eve.flow.bytes_toserver`*::
+
--
type: alias

alias to: source.bytes

--

*`suricata.eve.flow.reason`*::
+
--
type: keyword

--

*`suricata.eve.flow.pkts_toserver`*::
+
--
type: alias

alias to: source.packets

--

*`suricata.eve.flow.end`*::
+
--
type: date

--

*`suricata.eve.flow.alerted`*::
+
--
type: boolean

--

*`suricata.eve.app_proto`*::
+
--
type: alias

alias to: network.protocol

--

*`suricata.eve.tx_id`*::
+
--
type: long

--

*`suricata.eve.app_proto_tc`*::
+
--
type: keyword

--


*`suricata.eve.smtp.rcpt_to`*::
+
--
type: keyword

--

*`suricata.eve.smtp.mail_from`*::
+
--
type: keyword

--

*`suricata.eve.smtp.helo`*::
+
--
type: keyword

--

*`suricata.eve.app_proto_expected`*::
+
--
type: keyword

--

[[exported-fields-system]]
== System fields

Module for parsing system log files.



[float]
== system fields

Fields from the system log files.



[float]
== auth fields

Fields from the Linux authorization logs.



*`system.auth.timestamp`*::
+
--
type: alias

alias to: @timestamp

--

*`system.auth.hostname`*::
+
--
type: alias

alias to: host.hostname

--

*`system.auth.program`*::
+
--
type: alias

alias to: process.name

--

*`system.auth.pid`*::
+
--
type: alias

alias to: process.pid

--

*`system.auth.message`*::
+
--
type: alias

alias to: message

--

*`system.auth.user`*::
+
--
type: alias

alias to: user.name

--


*`system.auth.ssh.method`*::
+
--
The SSH authentication method. Can be one of "password" or "publickey".


--

*`system.auth.ssh.signature`*::
+
--
The signature of the client public key.


--

*`system.auth.ssh.dropped_ip`*::
+
--
type: ip

The client IP from SSH connections that are open and immediately dropped.


--

*`system.auth.ssh.event`*::
+
--
example: Accepted

The SSH event as found in the logs (Accepted, Invalid, Failed, etc.)


--

*`system.auth.ssh.ip`*::
+
--
type: alias

alias to: source.ip

--

*`system.auth.ssh.port`*::
+
--
type: alias

alias to: source.port

--


*`system.auth.ssh.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`system.auth.ssh.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`system.auth.ssh.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`system.auth.ssh.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`system.auth.ssh.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`system.auth.ssh.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[float]
== sudo fields

Fields specific to events created by the `sudo` command.



*`system.auth.sudo.error`*::
+
--
example: user NOT in sudoers

The error message in case the sudo command failed.


--

*`system.auth.sudo.tty`*::
+
--
The TTY where the sudo command is executed.


--

*`system.auth.sudo.pwd`*::
+
--
The current directory where the sudo command is executed.


--

*`system.auth.sudo.user`*::
+
--
example: root

The target user to which the sudo command is switching.


--

*`system.auth.sudo.command`*::
+
--
The command executed via sudo.


--

[float]
== useradd fields

Fields specific to events created by the `useradd` command.



*`system.auth.useradd.home`*::
+
--
The home folder for the new user.

--

*`system.auth.useradd.shell`*::
+
--
The default shell for the new user.

--

*`system.auth.useradd.name`*::
+
--
type: alias

alias to: user.name

--

*`system.auth.useradd.uid`*::
+
--
type: alias

alias to: user.id

--

*`system.auth.useradd.gid`*::
+
--
type: alias

alias to: group.id

--

[float]
== groupadd fields

Fields specific to events created by the `groupadd` command.



*`system.auth.groupadd.name`*::
+
--
type: alias

alias to: group.name

--

*`system.auth.groupadd.gid`*::
+
--
type: alias

alias to: group.id

--

[float]
== syslog fields

Contains fields from the syslog system logs.



*`system.syslog.timestamp`*::
+
--
type: alias

alias to: @timestamp

--

*`system.syslog.hostname`*::
+
--
type: alias

alias to: host.hostname

--

*`system.syslog.program`*::
+
--
type: alias

alias to: process.name

--

*`system.syslog.pid`*::
+
--
type: alias

alias to: process.pid

--

*`system.syslog.message`*::
+
--
type: alias

alias to: message

--

[[exported-fields-traefik]]
== Traefik fields

Module for parsing the Traefik log files.



[float]
== traefik fields

Fields from the Traefik log files.



[float]
== access fields

Contains fields for the Traefik access logs.



*`traefik.access.user_identifier`*::
+
--
type: keyword

Is the RFC 1413 identity of the client


--

*`traefik.access.request_count`*::
+
--
type: long

The number of requests


--

*`traefik.access.frontend_name`*::
+
--
type: keyword

The name of the frontend used


--

*`traefik.access.backend_url`*::
+
--
type: keyword

The url of the backend where request is forwarded

--

*`traefik.access.body_sent.bytes`*::
+
--
type: alias

alias to: http.response.body.bytes

--

*`traefik.access.remote_ip`*::
+
--
type: alias

alias to: source.address

--

*`traefik.access.user_name`*::
+
--
type: alias

alias to: user.name

--

*`traefik.access.method`*::
+
--
type: alias

alias to: http.request.method

--

*`traefik.access.url`*::
+
--
type: alias

alias to: url.original

--

*`traefik.access.http_version`*::
+
--
type: alias

alias to: http.version

--

*`traefik.access.response_code`*::
+
--
type: alias

alias to: http.response.status_code

--

*`traefik.access.referrer`*::
+
--
type: alias

alias to: http.request.referrer

--

*`traefik.access.agent`*::
+
--
type: alias

alias to: user_agent.original

--


*`traefik.access.user_agent.device`*::
+
--
type: alias

alias to: user_agent.device.name

--

*`traefik.access.user_agent.name`*::
+
--
type: alias

alias to: user_agent.name

--

*`traefik.access.user_agent.os`*::
+
--
type: alias

alias to: user_agent.os.full_name

--

*`traefik.access.user_agent.os_name`*::
+
--
type: alias

alias to: user_agent.os.name

--

*`traefik.access.user_agent.original`*::
+
--
type: alias

alias to: user_agent.original

--


*`traefik.access.geoip.continent_name`*::
+
--
type: alias

alias to: source.geo.continent_name

--

*`traefik.access.geoip.country_iso_code`*::
+
--
type: alias

alias to: source.geo.country_iso_code

--

*`traefik.access.geoip.location`*::
+
--
type: alias

alias to: source.geo.location

--

*`traefik.access.geoip.region_name`*::
+
--
type: alias

alias to: source.geo.region_name

--

*`traefik.access.geoip.city_name`*::
+
--
type: alias

alias to: source.geo.city_name

--

*`traefik.access.geoip.region_iso_code`*::
+
--
type: alias

alias to: source.geo.region_iso_code

--

[[exported-fields-zeek]]
== Zeek fields

Module for handling logs produced by Zeek/Bro



[float]
== zeek fields

Fields from Zeek/Bro logs after normalization



*`zeek.session_id`*::
+
--
type: keyword

A unique identifier of the session 


--

*`zeek.connection.local_orig`*::
+
--
type: boolean

Indicates whether the session is originated locally


--

*`zeek.connection.local_resp`*::
+
--
type: boolean

Indicates whether the session is responded locally


--

*`zeek.connection.missed_bytes`*::
+
--
type: long

Missed bytes for the session


--

*`zeek.connection.state`*::
+
--
type: keyword

Flags indicating the state of the session


--

*`zeek.connection.history`*::
+
--
type: keyword

Flags indicating the history of the session


--

*`zeek.connection.orig_l2_addr`*::
+
--
type: keyword

Link-layer address of the originator, if available


--

*`zeek.connection.resp_l2_addr`*::
+
--
type: keyword

Link-layer address of the responder, if available


--

*`zeek.connection.vlan`*::
+
--
type: integer

VLAN identifier


--

*`zeek.connection.inner_vlan`*::
+
--
type: integer

VLAN identifier


--

*`zeek.dns.trans_id`*::
+
--
type: keyword

DNS transaction identifier


--

*`zeek.dns.rtt`*::
+
--
type: double

Round trip time for the query and response


--

*`zeek.dns.query`*::
+
--
type: keyword

The domain name that is the subject of the DNS query


--

*`zeek.dns.qclass`*::
+
--
type: long

The QCLASS value specifying the class of the query


--

*`zeek.dns.qclass_name`*::
+
--
type: keyword

A descriptive name for the class of the query


--

*`zeek.dns.qtype`*::
+
--
type: long

A QTYPE value specifying the type of the query


--

*`zeek.dns.qtype_name`*::
+
--
type: keyword

A descriptive name for the type of the query


--

*`zeek.dns.rcode`*::
+
--
type: long

The response code value in DNS response messages


--

*`zeek.dns.rcode_name`*::
+
--
type: keyword

A descriptive name for the response code value


--

*`zeek.dns.AA`*::
+
--
type: boolean

The Authoritative Answer bit for response messages specifies that the responding 
name server is an authority for the domain name in the question section


--

*`zeek.dns.TC`*::
+
--
type: boolean

The Truncation bit specifies that the message was truncated


--

*`zeek.dns.RD`*::
+
--
type: boolean

The Recursion Desired bit in a request message indicates that the client 
wants recursive service for this query


--

*`zeek.dns.RA`*::
+
--
type: boolean

The Recursion Available bit in a response message indicates that the name 
server supports recursive queries.


--

*`zeek.dns.answers`*::
+
--
type: keyword

The set of resource descriptions in the query answer


--

*`zeek.dns.TTLs`*::
+
--
type: double

The caching intervals of the associated RRs described by the answers field


--

*`zeek.dns.rejected`*::
+
--
type: boolean

Indicates whether the DNS query was rejected by the server


--

*`zeek.dns.total_answers`*::
+
--
type: integer

The total number of resource records in the reply 


--

*`zeek.dns.total_replies`*::
+
--
type: integer

The total number of resource records in the reply message


--

*`zeek.dns.saw_query`*::
+
--
type: boolean

Whether the full DNS query has been seen


--

*`zeek.dns.saw_reply`*::
+
--
type: boolean

Whether the full DNS reply has been seen


--

*`zeek.http.trans_depth`*::
+
--
type: integer

Represents the pipelined depth into the connection of this request/response transaction


--

*`zeek.http.status_msg`*::
+
--
type: keyword

Status message returned by the server


--

*`zeek.http.info_code`*::
+
--
type: integer

Last seen 1xx informational reply code returned by the server.


--

*`zeek.http.info_msg`*::
+
--
type: keyword

Last seen 1xx informational reply message returned by the server.


--

*`zeek.http.tags`*::
+
--
type: keyword

A set of indicators of various attributes discovered and related to a particular 
request/response pair.


--

*`zeek.http.password`*::
+
--
type: keyword

Password if basic-auth is performed for the request


--

*`zeek.http.captured_password`*::
+
--
type: boolean

Determines if the password will be captured for this request


--

*`zeek.http.proxied`*::
+
--
type: keyword

All of the headers that may indicate if the HTTP request was proxied


--

*`zeek.http.range_request`*::
+
--
type: boolean

Indicates if this request can assume 206 partial content in response


--

*`zeek.http.client_header_names`*::
+
--
type: keyword

The vector of HTTP header names sent by the client. No header values 
are included here, just the header names.


--

*`zeek.http.server_header_names`*::
+
--
type: keyword

The vector of HTTP header names sent by the server. No header values 
are included here, just the header names


--

*`zeek.http.orig_fuids`*::
+
--
type: keyword

An ordered vector of file unique IDs from the originator


--

*`zeek.http.orig_mime_types`*::
+
--
type: keyword

An ordered vector of mime types from the originator


--

*`zeek.http.orig_filenames`*::
+
--
type: keyword

An ordered vector of filenames from the originator


--

*`zeek.http.resp_fuids`*::
+
--
type: keyword

An ordered vector of file unique IDs from the responder


--

*`zeek.http.resp_mime_types`*::
+
--
type: keyword

An ordered vector of mime types from the responder


--

*`zeek.http.resp_filenames`*::
+
--
type: keyword

An ordered vector of filenames from the responder


--

*`zeek.http.orig_mime_depth`*::
+
--
type: integer

Current number of MIME entities in the HTTP request message body


--

*`zeek.http.resp_mime_depth`*::
+
--
type: integer

Current number of MIME entities in the HTTP response message body


--

*`zeek.files.fuid`*::
+
--
type: keyword

A file unique identifier


--

*`zeek.files.tx_host`*::
+
--
type: ip

The host that transferred the file


--

*`zeek.files.rx_host`*::
+
--
type: ip

The host that received the file


--

*`zeek.files.session_ids`*::
+
--
type: keyword

The sessions that have this file


--

*`zeek.files.source`*::
+
--
type: keyword

An identification of the source of the file data. E.g. it may be a network protocol 
over which it was transferred, or a local file path which was read, or some other 
input source


--

*`zeek.files.depth`*::
+
--
type: long

A value to represent the depth of this file in relation to its source. In SMTP, it 
is the depth of the MIME attachment on the message. In HTTP, it is the depth of the 
request within the TCP connection


--

*`zeek.files.analyzers`*::
+
--
type: keyword

A set of analysis types done during the file analysis


--

*`zeek.files.mime_type`*::
+
--
type: keyword

Mime type of the file


--

*`zeek.files.filename`*::
+
--
type: keyword

Name of the file if available


--

*`zeek.files.local_orig`*::
+
--
type: boolean

If the source of this file is a network connection, this field indicates if the data 
originated from the local network or not


--

*`zeek.files.is_orig`*::
+
--
type: boolean

If the source of this file is a network connection, this field indicates if the file is 
being sent by the originator of the connection or the responder


--

*`zeek.files.duration`*::
+
--
type: double

The duration the file was analyzed for. Not the duration of the session.


--

*`zeek.files.seen_bytes`*::
+
--
type: long

Number of bytes provided to the file analysis engine for the file


--

*`zeek.files.total_bytes`*::
+
--
type: long

Total number of bytes that are supposed to comprise the full file


--

*`zeek.files.missing_bytes`*::
+
--
type: long

The number of bytes in the file stream that were completely missed during the process 
of analysis


--

*`zeek.files.overflow_bytes`*::
+
--
type: long

The number of bytes in the file stream that were not delivered to stream file analyzers. 
This could be overlapping bytes or bytes that couldn't be reassembled


--

*`zeek.files.timedout`*::
+
--
type: boolean

Whether the file analysis timed out at least once for the file


--

*`zeek.files.parent_fuid`*::
+
--
type: keyword

Identifier associated with a container file from which this one was extracted as part of 
the file analysis


--

*`zeek.files.md5`*::
+
--
type: keyword

An MD5 digest of the file contents


--

*`zeek.files.sha1`*::
+
--
type: keyword

A SHA1 digest of the file contents


--

*`zeek.files.sha256`*::
+
--
type: keyword

A SHA256 digest of the file contents.


--

*`zeek.files.extracted`*::
+
--
type: keyword

Local filename of extracted file


--

*`zeek.files.extracted_cutoff`*::
+
--
type: boolean

Indicate whether the file being extracted was cut off hence not extracted completely


--

*`zeek.files.extracted_size`*::
+
--
type: long

The number of bytes extracted to disk


--

*`zeek.files.entropy`*::
+
--
type: double

The information density of the contents of the file


--

*`zeek.ssl.version`*::
+
--
type: keyword

SSL/TLS version that was logged


--

*`zeek.ssl.cipher`*::
+
--
type: keyword

SSL/TLS cipher suite that was logged


--

*`zeek.ssl.curve`*::
+
--
type: keyword

Elliptic curve that was logged when using ECDH/ECDHE


--

*`zeek.ssl.server_name`*::
+
--
type: keyword

Value of the Server Name Indicator SSL/TLS extension. It indicates the server name 
that the client was requesting


--

*`zeek.ssl.resumed`*::
+
--
type: boolean

Flag to indicate if the session was resumed reusing the key material exchanged in an 
earlier connection


--

*`zeek.ssl.next_protocol`*::
+
--
type: keyword

Next protocol the server chose using the application layer next protocol extension


--

*`zeek.ssl.established`*::
+
--
type: boolean

Flag to indicate if this ssl session has been established successfully


--

*`zeek.ssl.cert_chain`*::
+
--
type: keyword

Chain of certificates offered by the server to validate its complete signing chain


--

*`zeek.ssl.cert_chain_fuids`*::
+
--
type: keyword

An ordered vector of certificate file identifiers for the certificates offered by the server


--

*`zeek.ssl.client_cert_chain`*::
+
--
type: keyword

Chain of certificates offered by the client to validate its complete signing chain


--

*`zeek.ssl.client_cert_chain_fuids`*::
+
--
type: keyword

An ordered vector of certificate file identifiers for the certificates offered by the client


--

*`zeek.ssl.issuer`*::
+
--
type: keyword

Subject of the signer of the X.509 certificate offered by the server


--

*`zeek.ssl.client_issuer`*::
+
--
type: keyword

Subject of the X.509 certificate offered by the client


--

*`zeek.ssl.validation_status`*::
+
--
type: keyword

Result of certificate validation for this connection


--

*`zeek.ssl.validation_code`*::
+
--
type: keyword

Result of certificate validation for this connection, given as OpenSSL validation code


--

*`zeek.ssl.subject`*::
+
--
type: keyword

Subject of the X.509 certificate offered by the server


--

*`zeek.ssl.client_subject`*::
+
--
type: keyword

Subject of the X.509 certificate offered by the client


--

*`zeek.ssl.last_alert`*::
+
--
type: keyword

Last alert that was seen during the connection


--

*`zeek.notice.connection_id`*::
+
--
type: keyword

Identifier of the related connection session


--

*`zeek.notice.icmp_id`*::
+
--
type: keyword

Identifier of the related ICMP session


--

*`zeek.notice.file.id`*::
+
--
type: keyword

An identifier associated with a single file that is related to this notice


--

*`zeek.notice.file.parent_id`*::
+
--
type: keyword

Identifier associated with a container file from which this one was extracted


--

*`zeek.notice.file.source`*::
+
--
type: keyword

An identification of the source of the file data. E.g. it may be a network protocol 
over which it was transferred, or a local file path which was read, or some other 
input source


--

*`zeek.notice.file.mime_type`*::
+
--
type: keyword

A mime type if the notice is related to a file


--

*`zeek.notice.file.is_orig`*::
+
--
type: boolean

If the source of this file is a network connection, this field indicates if the file is 
being sent by the originator of the connection or the responder


--

*`zeek.notice.file.seen_bytes`*::
+
--
type: long

Number of bytes provided to the file analysis engine for the file


--

*`zeek.fnotice.file.total_bytes`*::
+
--
type: long

Total number of bytes that are supposed to comprise the full file


--

*`zeek.notice.file.missing_bytes`*::
+
--
type: long

The number of bytes in the file stream that were completely missed during the process 
of analysis


--

*`zeek.notice.file.overflow_bytes`*::
+
--
type: long

The number of bytes in the file stream that were not delivered to stream file analyzers. 
This could be overlapping bytes or bytes that couldn't be reassembled


--

*`zeek.notice.fuid`*::
+
--
type: keyword

A file unique ID if this notice is related to a file


--

*`zeek.notice.note`*::
+
--
type: keyword

The type of the notice


--

*`zeek.notice.msg`*::
+
--
type: keyword

The human readable message for the notice.


--

*`zeek.notice.sub`*::
+
--
type: keyword

The human readable sub-message


--

*`zeek.notice.n`*::
+
--
type: long

Associated count, or a status code


--

*`zeek.notice.peer_name`*::
+
--
type: keyword

Name of remote peer that raised this notice


--

*`zeek.notice.peer_descr`*::
+
--
type: text

Textual description for the peer that raised this notice


--

*`zeek.notice.actions`*::
+
--
type: keyword

The actions which have been applied to this notice


--

*`zeek.notice.email_body_sections`*::
+
--
type: text

By adding chunks of text into this element, other scripts can expand on notices 
that are being emailed


--

*`zeek.notice.email_delay_tokens`*::
+
--
type: keyword

Adding a string token to this set will cause the built-in emailing functionality 
to delay sending the email either the token has been removed or the email 
has been delayed for the specified time duration


--

*`zeek.notice.identifier`*::
+
--
type: keyword

This field is provided when a notice is generated for the purpose of deduplicating notices


--

*`zeek.notice.suppress_for`*::
+
--
type: double

This field indicates the length of time that this unique notice should be suppressed


--

*`zeek.notice.dropped`*::
+
--
type: boolean

Indicate if the source IP address was dropped and denied network access


--

