---
description: Pipeline for parsing system authorization and secure logs.
processors:
  - rename:
      if: ctx.event?.original == null
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      description: Grok the message header.
      tag: grok-message-header
      field: event.original
      pattern_definitions:
        GREEDYMULTILINE: '(.|\n)*'
        TIMESTAMP: (?:%{TIMESTAMP_ISO8601}|%{SYSLOGTIMESTAMP})
      patterns:
        - '^%{TIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:host.hostname}? %{DATA:process.name}(?:\[%{POSINT:process.pid:long}\])?:%{SPACE}%{GREEDYMULTILINE:_temp.message}$'
  - pipeline:
      description: Grok specific auth messages.
      name: '{< IngestPipeline "grok-auth-messages" >}'
      on_failure:
        - rename:
            description: Leave the unmatched content in message.
            field: _temp.message
            target_field: message
  - remove:
      field: _temp
  - pipeline:
      name: "{< IngestPipeline "common" >}"
  - date:
      if: ctx.event?.timezone == null
      field: system.auth.timestamp
      target_field: '@timestamp'
      formats:
        - MMM  d HH:mm:ss
        - MMM dd HH:mm:ss
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: '{{{ _ingest.on_failure_message }}}'
  - date:
      if: ctx.event?.timezone != null
      field: system.auth.timestamp
      target_field: '@timestamp'
      formats:
        - MMM  d HH:mm:ss
        - MMM dd HH:mm:ss
        - ISO8601
      timezone: '{{{ event.timezone }}}'
      on_failure:
        - append:
            field: error.message
            value: '{{{ _ingest.on_failure_message }}}'
  - remove:
      field: system.auth.timestamp
  - set:
      field: input.type
      value: log
on_failure:
  - set:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
