{
    "description": "Pipeline for parsing nats log logs",
    "processors": [
        {
            "grok": {
                "field": "message",
                "patterns":[
                    "\\[%{POSINT:process.pid}\\]( %{NATSTIME:nats.log.timestamp})? \\[%{NATSLOGLEVEL:log.level}\\] %{GREEDYDATA:nats.log.info}"
                ],
                "pattern_definitions": {
                    "NATSTIME": "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}",
                    "NATSLOGLEVEL":"(INF|DBG|WRN|ERR|FTL|TRC)"
                },
                "ignore_missing": true
            }
        },
        {
            "grok": {
                "field": "nats.log.info",
                "patterns": [
                    "%{IPV4:nats.log.client.ip}:%{POSINT:nats.log.client.port} - cid:%{POSINT:nats.log.client.id} - %{GREEDYDATA:nats.log.msg.info}",
                    "%{GREEDYDATA:nats.log.msg.data}"
                ],
                "ignore_missing": true
            }
        },
        {
            "grok": {
                "field": "nats.log.msg.info",
                "patterns": [
                    "%{NATSDIRECTION:nats.log.msg.direction} \\[%{NATSMESSAGETYPE:nats.log.msg.type} %{GREEDYDATA:nats.log.msg.subject_data} %{POSINT:nats.log.msg.bytes}\\]",
                    "%{NATSDIRECTION:nats.log.msg.direction} \\[%{NATSMESSAGETYPE:nats.log.msg.type} %{GREEDYDATA:nats.log.msg.data}\\]",
                    "%{NATSDIRECTION:nats.log.msg.direction} %{NATSMESSAGETYPE:nats.log.msg.type}: \\[%{GREEDYDATA:nats.log.msg.payload}\\]",
                    "%{NATSDIRECTION:nats.log.msg.direction} \\[%{NATSMESSAGETYPE:nats.log.msg.type}\\]",
                    "%{GREEDYDATA:nats.log.msg.data}"
                ],
                "pattern_definitions": {
                    "NATSDIRECTION": "(<<-|->>)",
                    "NATSMESSAGETYPE": "(MSG|PUB|SUB|PING|PONG|CONNECT|MSG_PAYLOAD)"
                },
                "ignore_missing": true
            }
        },
        {
            "grok": {
                "field": "nats.log.msg.subject_data",
                "patterns": [
                    "%{NOTSPACE:nats.log.msg.subject} %{POSINT:nats.log.msg.sid} %{NOTSPACE:nats.log.msg.reply_to}",
                    "%{NOTSPACE:nats.log.msg.subject} %{POSINT:nats.log.msg.sid}",
                    "%{NOTSPACE:nats.log.msg.subject}"
                ],
                "ignore_missing": true
            }
        },
        {
            "remove": {
                "field": "nats.log.info"
            }
        },
        {
            "remove": {
                "field": "nats.log.msg.info",
                "ignore_missing": true
            }
        },
        {
            "remove": {
                "field": "nats.log.msg.payload",
                "ignore_missing": true
            }
        },
        {
            "remove": {
                "field": "nats.log.msg.subject_data",
                "ignore_missing": true
            }
        },
        {
            "remove": {
                "field": "message"
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "if (ctx.log.level == params.inf) {\n          ctx.log.level = params.info;\n        } else if (ctx.log.level == params.dbg) {\n          ctx.log.level = params.debug;\n        } else if (ctx.log.level == params.wrn) {\n          ctx.log.level = params.warning;\n        } else if (ctx.log.level == params.err) {\n          ctx.log.level = params.error;\n        } else if (ctx.log.level == params.ftl) {\n          ctx.log.level = params.fatal;\n        } else if (ctx.log.level == params.trc) {\n          ctx.log.level = params.trace;\n        }",
                "params": {
                    "inf": "INF",
                    "info": "info",
                    "dbg": "DBG",
                    "debug": "debug",
                    "wrn": "WRN",
                    "warning": "warning",
                    "err": "ERR",
                    "error": "error",
                    "ftl": "FTL",
                    "fatal": "fatal",
                    "trc": "TRC",
                    "trace": "trace"
                }
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "if (ctx.nats.log.msg.direction == params.in) {\n          ctx.nats.log.msg.direction = params.incoming;\n        } else if (ctx.nats.log.msg.direction == params.out) {\n          ctx.nats.log.msg.direction = params.outgoing;\n        }",
                "params": {
                    "in": "<<-",
                    "incoming": "incoming",
                    "out": "->>",
                    "outgoing": "outgoing"
                },
                "if": "ctx.nats.log.msg?.direction != null"
            }
        },
        {
            "rename": {
                "field": "@timestamp",
                "target_field": "event.created"
            }
        },
        {
            "date": {
                "field": "nats.log.timestamp",
                "target_field": "@timestamp",
                "formats": ["yyyy/MM/dd HH:mm:ss.SSSSSS"]
            }
        },
        {
            "remove": {
                "field": "nats.log.timestamp"
            }
        }],
    "on_failure" : [{
        "set" : {
            "field" : "error.message",
            "value" : "{{ _ingest.on_failure_message }}"
        }
    }]
}
