description: Pipeline for parsing sophos firewall logs (atp pipeline)
processors:
- set:
    field: event.kind
    value: alert
- set:
    field: event.action
    value: "{{sophosxg.firewall.log_subtype}}"
    if: "ctx.sophosxg?.firewall?.log_subtype != null"
- set:
    field: event.outcome
    value: success
    if: "ctx.sophosxg?.firewall?.log_subtype != null"
- append:
    field: event.category
    value:
      - intrusion_detection
      - network
    if: '["18009", "18010"].contains(ctx.sophosxg?.firewall?.message_id)'
- append:
    field: event.type
    value:
      - diened
      - connection
    if: '["18009", "18010"].contains(ctx.sophosxg?.firewall?.message_id)'

# normalize ECS field values and publish Sophos-XG specific fields
# destination.ip
- rename:
    field: sophosxg.firewall.destinationip
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.destinationip != null"
- set:
    field: server.ip
    value: '{{destination.ip}}'
    if: "ctx.destination?.ip != null"
# destination.port
- convert:
    field: sophosxg.firewall.dst_port
    target_field: destination.port
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.dst_port != null"
- set:
    field: server.port
    value: '{{destination.port}}'
    if: "ctx.destination?.port != null"
- convert:
    field: server.port
    target_field: server.port
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.server?.port != null"
# source.ip
- rename:
    field: sophosxg.firewall.sourceip
    target_field: source.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.sourceip != null"
- set:
    field: client.ip
    value: '{{source.ip}}'
    if: "ctx.source?.ip != null"
# source.port
- rename:
    field: sophosxg.firewall.src_ip
    target_field: source.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.src_ip != null"
- set:
    field: client.ip
    value: '{{source.ip}}'
    if: "ctx.source?.ip != null"
# source.port
- convert:
    field: sophosxg.firewall.src_port
    target_field: source.port
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.src_port != null"
- set:
    field: client.port
    value: '{{source.port}}'
    if: "ctx.source?.port != null"
- convert:
    field: client.port
    target_field: client.port
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.client?.port != null"

# username
- rename:
    field: sophosxg.firewall.user_name
    target_field: source.user.name
    ignore_missing: true

- rename:
    field: sophosxg.firewall.protocol
    target_field: network.transport
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.protocol != null"

- rename:
    field: sophosxg.firewall.log_id
    target_field: event.code
    ignore_missing: true
    if: "ctx.event?.code == null"
- rename:
     field: sophosxg.firewall.url
     target_field: url.original
     ignore_missing: true
     if: "ctx.sophosxg?.firewall?.url != null"
- rename:
    field: sophosxg.firewall.eventid
    target_field: event.id
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.eventid != null"

# Geolocation for source.
- geoip:
    field: source.ip
    target_field: source.geo
    ignore_missing: true
    if: "ctx.source?.geo == null"
# Geolocation for destination.
- geoip:
    field: destination.ip
    target_field: destination.geo
    ignore_missing: true
    if: "ctx.destination?.geo == null"
# IP Autonomous System (AS) Lookup
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: destination.ip
    target_field: destination.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
# Geolocation for source nat.
- geoip:
    field: source.nat.ip
    target_field: source.geo
    ignore_missing: true
    if: "ctx.source?.geo == null"
# Geolocation for destination nat.
- geoip:
    field: destination.nat.ip
    target_field: destination.geo
    ignore_missing: true
    if: "ctx.destination?.geo == null"
# IP Autonomous System (AS) Lookup nat
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.nat.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
    if: "ctx.source?.as == null"
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: destination.nat.ip
    target_field: destination.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
    if: "ctx.destination?.as == null"
- rename:
    field: source.as.asn
    target_field: source.as.number
    ignore_missing: true
- rename:
    field: source.as.organization_name
    target_field: source.as.organization.name
    ignore_missing: true
- rename:
    field: destination.as.asn
    target_field: destination.as.number
    ignore_missing: true
- rename:
    field: destination.as.organization_name
    target_field: destination.as.organization.name
    ignore_missing: true

- append:
    if: 'ctx?.source?.ip != null'
    field: related.ip
    value:
      - '{{source.ip}}'
- append:
    if: 'ctx?.destination?.ip != null'
    field: related.ip
    value:
      - '{{destination.ip}}'
- append:
    field: related.user
    value: "{{source.user.name}}"
    if: "ctx.source?.user?.name != null"
- lowercase:
      field: network.protocol
      ignore_failure: true
- lowercase:
      field: network.transport
      ignore_failure: true
- lowercase:
      field: event.action
      ignore_failure: true
- lowercase:
      field: event.info
      ignore_failure: true
- remove:
    field:
    - sophosxg.firewall.dst_port
    - sophosxg.firewall.src_port
    ignore_missing: true
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
