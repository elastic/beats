description: Pipeline for parsing PostgreSQL logs.
processors:
- grok:
    field: raw_message
    ignore_missing: true
    patterns:
    - '^(\[%{NUMBER:process.pid:long}(-%{BASE16FLOAT:postgresql.log.session_line_number:long})?\] ((\[%{USERNAME:user.name}\]@\[%{POSTGRESQL_DB_NAME:postgresql.log.database}\]|%{USERNAME:user.name}@%{POSTGRESQL_DB_NAME:postgresql.log.database}) )?)?%{WORD:log.level}:  (?:%{POSTGRESQL_ERROR:postgresql.log.sql_state_code}|%{SPACE})(duration: %{NUMBER:temp.duration:float} ms(  %{POSTGRESQL_QUERY_STEP}: %{GREEDYDATA:postgresql.log.query})?|statement: %{GREEDYDATA:postgresql.log.query}|: %{GREEDYDATA:message}|%{GREEDYDATA:message})'
    pattern_definitions:
      GREEDYDATA: |-
        (.|
        |	)*
      POSTGRESQL_DB_NAME: '[a-zA-Z0-9_]+[a-zA-Z0-9_\$]*'
      POSTGRESQL_QUERY_STEP: '%{WORD:postgresql.log.query_step}(?: <unnamed>| %{WORD:postgresql.log.query_name})?'
      POSTGRESQL_ERROR: '\b[A-Z0-9]{5}\b'
- grok:
    field: message
    ignore_missing: true
    ignore_failure: true
    patterns:
    - '^(%{POSTGRESQL_AUTH_FAILURE:tmp.auth_fail}|%{POSTGRESQL_AUTH_SUCCESSFUL:tmp.auth_success})'
    pattern_definitions:
      POSTGRESQL_AUTH_FAILURE: '(password authentication failed for user|Peer authentication failed for user)'
      POSTGRESQL_AUTH_SUCCESSFUL: 'connection authorized'
- append:
    field: event.category
    value: authentication
    if: "ctx?.tmp?.auth_fail != null || ctx?.tmp?.auth_success != null"
- append:
    field: event.action
    value: logon-failed
    if: "ctx?.tmp?.auth_fail != null"
- append:
    field: event.action
    value: logged-in
    if: "ctx?.tmp?.auth_success != null"
- set:
    field: event.outcome
    value: failure
    if: "ctx?.tmp?.auth_fail != null"
- set:
    field: event.outcome
    value: successful
    if: "ctx?.tmp?.auth_success != null"
- remove:
    field: tmp
    ignore_missing: true
