// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package net

import (
	"sync"
	"time"
)

// Ensure, that metricsMock does implement Metrics.
// If this is not the case, regenerate this file with moq.
var _ Metrics = &metricsMock{}

// metricsMock is a mock implementation of Metrics.
//
//	func TestSomethingThatUsesMetrics(t *testing.T) {
//
//		// make and configure a mocked Metrics
//		mockedMetrics := &metricsMock{
//			EventPublishedFunc: func(start time.Time)  {
//				panic("mock out the EventPublished method")
//			},
//			EventReceivedFunc: func(len int, timestamp time.Time)  {
//				panic("mock out the EventReceived method")
//			},
//		}
//
//		// use mockedMetrics in code that requires Metrics
//		// and then make assertions.
//
//	}
type metricsMock struct {
	// EventPublishedFunc mocks the EventPublished method.
	EventPublishedFunc func(start time.Time)

	// EventReceivedFunc mocks the EventReceived method.
	EventReceivedFunc func(len int, timestamp time.Time)

	// calls tracks calls to the methods.
	calls struct {
		// EventPublished holds details about calls to the EventPublished method.
		EventPublished []struct {
			// Start is the start argument value.
			Start time.Time
		}
		// EventReceived holds details about calls to the EventReceived method.
		EventReceived []struct {
			// Len is the len argument value.
			Len int
			// Timestamp is the timestamp argument value.
			Timestamp time.Time
		}
	}
	lockEventPublished sync.RWMutex
	lockEventReceived  sync.RWMutex
}

// EventPublished calls EventPublishedFunc.
func (mock *metricsMock) EventPublished(start time.Time) {
	if mock.EventPublishedFunc == nil {
		panic("metricsMock.EventPublishedFunc: method is nil but Metrics.EventPublished was just called")
	}
	callInfo := struct {
		Start time.Time
	}{
		Start: start,
	}
	mock.lockEventPublished.Lock()
	mock.calls.EventPublished = append(mock.calls.EventPublished, callInfo)
	mock.lockEventPublished.Unlock()
	mock.EventPublishedFunc(start)
}

// EventPublishedCalls gets all the calls that were made to EventPublished.
// Check the length with:
//
//	len(mockedMetrics.EventPublishedCalls())
func (mock *metricsMock) EventPublishedCalls() []struct {
	Start time.Time
} {
	var calls []struct {
		Start time.Time
	}
	mock.lockEventPublished.RLock()
	calls = mock.calls.EventPublished
	mock.lockEventPublished.RUnlock()
	return calls
}

// EventReceived calls EventReceivedFunc.
func (mock *metricsMock) EventReceived(len int, timestamp time.Time) {
	if mock.EventReceivedFunc == nil {
		panic("metricsMock.EventReceivedFunc: method is nil but Metrics.EventReceived was just called")
	}
	callInfo := struct {
		Len       int
		Timestamp time.Time
	}{
		Len:       len,
		Timestamp: timestamp,
	}
	mock.lockEventReceived.Lock()
	mock.calls.EventReceived = append(mock.calls.EventReceived, callInfo)
	mock.lockEventReceived.Unlock()
	mock.EventReceivedFunc(len, timestamp)
}

// EventReceivedCalls gets all the calls that were made to EventReceived.
// Check the length with:
//
//	len(mockedMetrics.EventReceivedCalls())
func (mock *metricsMock) EventReceivedCalls() []struct {
	Len       int
	Timestamp time.Time
} {
	var calls []struct {
		Len       int
		Timestamp time.Time
	}
	mock.lockEventReceived.RLock()
	calls = mock.calls.EventReceived
	mock.lockEventReceived.RUnlock()
	return calls
}
