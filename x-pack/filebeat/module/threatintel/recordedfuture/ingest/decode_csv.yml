description: Pipeline to decode CSV risklists from Recorded Future threat intel.
processors:
  - csv:
      field: event.original
      target_fields:
        - _tmp_.col0
        - _tmp_.col1
        - _tmp_.col2
        - _tmp_.col3
        - _tmp_.col4
  - drop:
      description: 'Drops the CSV header line.'
      if: 'ctx._tmp_.col0 == "Name"'

# This supports the default CSV risklists:
# 4-column for url, domain and IPs.
# 5-column for hash.
  - script:
      description: Maps the CSV entries to fields.
      lang: painless
      params:
        default:
          col0: Name
          col1: Risk
          col2: RiskString
          col3: EvidenceDetails
        hash:
          col0: Name
          col1: Algorithm
          col2: Risk
          col3: RiskString
          col4: EvidenceDetails
      source: >
        def cols = params[ ctx._tmp_.col4 == null? "default" : "hash" ];
        def src = ctx._tmp_;
        def dst = new HashMap();
        for (entry in cols.entrySet()) {
          dst[entry.getValue()] = src[entry.getKey()];
        }
        ctx['json'] = dst;
  - remove:
      field: _tmp_
