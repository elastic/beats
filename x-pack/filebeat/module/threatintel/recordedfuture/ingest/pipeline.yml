description: Pipeline for parsing Recorded Future threat intel.
processors:
#
# Set basic ECS fields.
#
  - set:
      field: event.ingested
      value: "{{{ _ingest.timestamp }}}"
  - set:
      field: ecs.version
      value: "1.12"
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator
  - set:
      field: threat.feed.name
      value: "[Filebeat] RecordedFuture"
  - set:
      field: threat.feed.dashboard_id
      value: "ad9c7430-72de-11eb-a3e3-b3cc7c78a70f"

  - rename:
      field: message
      target_field: event.original
      ignore_missing: true

#
# Decode event.original as JSON if it starts with the "{" character.
# This is the common case when events are ingested from the API, as httpjson
# transforms the CSV to a JSON message.
#
  - json:
      field: event.original
      target_field: json
      if: 'ctx.event?.original != null && ctx.event.original.startsWith("{")'
      on_failure:
        - fail:
            message: "Failed decoding message field as JSON: {{{ _ingest.on_failure_message }}}"

#
# Decode event.original as CSV when the above processor didn't execute.
# This is used when ingesting CSV lines from a file.
#
  - pipeline:
      name: '{< IngestPipeline "decode_csv" >}'
      if: 'ctx.json == null'
      on_failure:
        - fail:
            message: "Failed decoding message field as CSV: {{{ _ingest.on_failure_message }}}"

#
# Decode EvidenceDetails column as JSON.
#
  - json:
      field: json.EvidenceDetails
      target_field: _temp_.EvidenceDetails
      ignore_failure: true

  - rename:
      field: _temp_.EvidenceDetails.EvidenceDetails
      target_field: json.evidence_details
      ignore_missing: true

#
# Hash indicators (threat.indicator.type=file)
# As risklist indicators don't have a "type" field, it's necessary
# to detect the kind of indicator in the Name field.
#
# An indicator is of type `hash` when the Algorithm field is present.
#
  - set:
      field: threat.indicator.type
      value: file
      if: 'ctx.json.Algorithm != null'
  - script:
      lang: painless
      description: >
        Map file hashes.
      if: "ctx.json.Algorithm != null"
      params:
        MD5: md5
        SHA-1: sha1
        SHA-256: sha256
        SHA-384: sha384
        SHA-512: sha512
      source: >-
        def key = params[ctx.json.Algorithm];
        if (key == null) {
          throw new Exception("Unsupported hash algorithm '" + ctx.json.Algorithm + "'");
        }
        def hashes = [key:ctx.json.Name];
        ctx["_hashes"] = hashes;
      on_failure:
        - append:
            field: error.message
            value: "Failed to map fileHashes field: {{{ _ingest.on_failure_message }}}"
  - rename:
      field: _hashes
      target_field: threat.indicator.file.hash
      ignore_missing: true

#
# IP indicators (threat.indicator.type=ipvN-addr)
#
# An indicator is of type `ip` if Name is a valid IP address.
#
  - convert:
      field: json.Name
      target_field: threat.indicator.ip
      type: ip
      ignore_failure: true
      if: 'ctx.threat?.indicator?.type == null'
  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: 'ctx.threat?.indicator?.ip != null && !ctx.threat.indicator.ip.contains(":")'
  - set:
      field: threat.indicator.type
      value: ipv6-addr
      if: 'ctx.threat?.indicator?.ip != null && ctx.threat.indicator.ip.contains(":")'

#
# URL indicators (threat.indicator.type=url)
# An indicator is of type `url` if Name contains a slash character.
#
  - set:
      field: threat.indicator.type
      value: url
      if: 'ctx.threat?.indicator?.type == null && ctx.json.Name.contains("/")'
  - uri_parts:
      field: json.Name
      target_field: threat.indicator.url
      keep_original: true
      if: 'ctx.threat?.indicator?.type == "url"'
#
# Domain indicators (threat.indicator.type=domain)
# This is a catch-all type.
#
  - set:
      field: threat.indicator.type
      value: domain-name
      if: 'ctx.threat?.indicator?.type == null'
  - set:
      field: threat.indicator.url.domain
      value: '{{{ json.Name }}}'
      ignore_empty_value: true
      if: 'ctx.threat?.indicator?.type == "domain-name" && ctx.threat?.indicator?.url?.domain == null'

#
# Normalize Risk
#
  - convert:
      field: json.Risk
      target_field: event.risk_score
      ignore_missing: true
      type: float
      on_failure:
        - append:
            field: error.message
            value: "Risk score `{{{ json.Risk }}}` cannot be converted to float: {{{ _ingest.on_failure_message }}}"

#
# Fingerprint event: _id = hash(dataset + indicator type + indicator value)
#
  - fingerprint:
      fields:
        - event.dataset
        - threat.indicator.type
        - json.Name
      target_field: "_id"
      ignore_missing: true

#
# Save fields without an ECS mapping under `recordedfuture`.
#
  - rename:
      field: json.RiskString
      target_field: json.risk_string
      ignore_missing: true
  - rename:
      field: json
      target_field: recordedfuture

#
# Cleanup
#
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - recordedfuture.Algorithm
        - recordedfuture.EvidenceDetails
        - recordedfuture.Name
        - recordedfuture.Risk
        - _temp_
      ignore_missing: true
on_failure:
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
