description: Pipeline for parsing sophos firewall logs (event pipeline)
processors:
- set:
    field: event.kind
    value: event

# Authentication user succes
- set:
    field: event.outcome
    value: succes
    if: 'ctx?.sophosxg?.firewall?.log_subtype == "Authentication" && ctx?.sophosxg?.firewall?.status == "Successful"'

# Authentication user failed
- set:
    field: event.outcome
    value: failure
    if: 'ctx?.sophosxg?.firewall?.log_subtype == "Authentication" && ctx?.sophosxg?.firewall?.status == "Failed"'

# Authentication admin failed
- set:
    field: event.outcome
    value: succes
    if: 'ctx?.sophosxg?.firewall?.log_subtype == "Admin" && ctx?.sophosxg?.firewall?.status == "Successful" && ctx?.sophosxg?.firewall?.message_id == "17507"'

# Authentication admin failed
- set:
    field: event.outcome
    value: failure
    if: 'ctx?.sophosxg?.firewall?.log_subtype == "Admin" && ctx?.sophosxg?.firewall?.status == "Failed" && ctx?.sophosxg?.firewall?.message_id == "17507"'

- append:
    field: event.type
    value:
    - user
    - start
    if: "['17701', '17704', '17707', '17710', '17713'].contains(ctx.sophosxg?.firewall?.message_id)"

- append:
    field: event.type
    value:
    - user
    - end
    if: "['17703', '17706', '17709', '17712', '17715'].contains(ctx.sophosxg?.firewall?.message_id)"


- append:
    field: event.type
    value: connection
    if: "ctx?.sophosxg?.firewall?.auth_client == 'SSLVPN' || ctx?.sophosxg?.firewall?.auth_client == 'IPSec' || ctx?.sophosxg?.firewall?.auth_client == 'CTA' || ctx?.sophosxg?.firewall?.auth_client == 'Thin Client' || ctx?.sophosxg?.firewall?.auth_client == 'Radius SSO'"
- append:
    field: event.category
    value: network
    if: "ctx?.sophosxg?.firewall?.auth_client == 'SSLVPN' || ctx?.sophosxg?.firewall?.auth_client == 'IPSec' || ctx?.sophosxg?.firewall?.auth_client == 'CTA' || ctx?.sophosxg?.firewall?.auth_client == 'Thin Client' || ctx?.sophosxg?.firewall?.auth_client == 'Radius SSO'"

- append:
    field: event.category
    value: authentication
    if: 'ctx?.sophosxg?.firewall?.log_subtype == "Authentication"'

- append:
    field: event.type
    value: info
    if: 'ctx?.sophosxg?.firewall?.message_id == "17819"'
- append:
    field: event.category
    value:
    - host
    - malware
    if: 'ctx?.sophosxg?.firewall?.message_id == "17819"'

# destination.ip
- rename:
    field: sophosxg.firewall.dst_ip
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.dst_ip != null"
- rename:
    field: sophosxg.firewall.localinterfaceip
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.localinterfaceip != null"
- set:
    field: server.ip
    value: '{{destination.ip}}'
    if: "ctx.destination?.ip != null"
# destination.bytes pkts
- convert:
    field: sophosxg.firewall.recv_bytes
    target_field: destination.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.recv_bytes != null"
- set:
    field: server.bytes
    value: '{{destination.bytes}}'
    if: "ctx.destination?.bytes != null"
- convert:
    field: server.bytes
    target_field: server.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.server?.bytes != null"
# source.ip
- rename:
    field: sophosxg.firewall.src_ip
    target_field: source.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.src_ip != null"
- rename:
    field: sophosxg.firewall.remoteinterfaceip
    target_field: source.ip
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.remoteinterfaceip != null"
- set:
    field: client.ip
    value: '{{source.ip}}'
    if: "ctx.source?.ip != null"
# source.mac
- rename:
    field: sophosxg.firewall.src_mac
    target_field: source.mac
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.src_mac != null"
- set:
    field: client.mac
    value: '{{source.mac}}'
    if: "ctx.source?.mac != null"
# source.bytes pkts
- convert:
    field: sophosxg.firewall.sent_bytes
    target_field: source.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.sent_bytes != null"
- set:
    field: client.bytes
    value: '{{source.bytes}}'
    if: "ctx.source?.bytes != null"
- convert:
    field: client.bytes
    target_field: client.bytes
    type: long
    ignore_failure: true
    ignore_missing: true
    if: "ctx.client?.bytes != null"

# username - usergroup
- rename:
    field: sophosxg.firewall.user_name
    target_field: source.user.name
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.user_name != null"
- set:
    field: source.user.name
    value: sophosxg.firewall.name
    if: "ctx.sophosxg?.firewall?.name != null"
- rename:
    field: sophosxg.firewall.usergroupname
    target_field: source.user.group.name
    ignore_missing: true
    if: "ctx.sophosxg?.firewall?.usergroupname != null"

- rename:
    field: sophosxg.firewall.message
    target_field: message
    ignore_missing: true
- rename:
    field: sophosxg.firewall.log_id
    target_field: event.code
    ignore_missing: true
    if: "ctx.event?.code == null"

# Geolocation for source.
- geoip:
    field: source.ip
    target_field: source.geo
    ignore_missing: true
    if: "ctx.source?.geo == null"
# Geolocation for destination.
- geoip:
    field: destination.ip
    target_field: destination.geo
    ignore_missing: true
    if: "ctx.destination?.geo == null"
# IP Autonomous System (AS) Lookup
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: destination.ip
    target_field: destination.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
# Geolocation for source nat.
- geoip:
    field: source.nat.ip
    target_field: source.geo
    ignore_missing: true
    if: "ctx.source?.geo == null"
# Geolocation for destination nat.
- geoip:
    field: destination.nat.ip
    target_field: destination.geo
    ignore_missing: true
    if: "ctx.destination?.geo == null"
# IP Autonomous System (AS) Lookup nat
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.nat.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
    if: "ctx.source?.as == null"
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: destination.nat.ip
    target_field: destination.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
    if: "ctx.destination?.as == null"
- rename:
    field: source.as.asn
    target_field: source.as.number
    ignore_missing: true
- rename:
    field: source.as.organization_name
    target_field: source.as.organization.name
    ignore_missing: true
- rename:
    field: destination.as.asn
    target_field: destination.as.number
    ignore_missing: true
- rename:
    field: destination.as.organization_name
    target_field: destination.as.organization.name
    ignore_missing: true

- remove:
    field:
        - sophosxg.firewall.dst_port
        - sophosxg.firewall.recv_bytes
        - sophosxg.firewall.src_port
        - sophosxg.firewall.sent_bytes
        - sophosxg.firewall.name
    ignore_missing: true
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'

