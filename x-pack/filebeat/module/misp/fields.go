// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package misp

import (
	"github.com/elastic/beats/libbeat/asset"
)

func init() {
	if err := asset.SetFields("filebeat", "misp", asset.ModuleFieldsPri, AssetMisp); err != nil {
		panic(err)
	}
}

// AssetMisp returns asset data.
// This is the base64 encoded gzipped contents of module/misp.
func AssetMisp() string {
	return "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"
}
