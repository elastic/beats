{
  "description": "Pipeline for parsing MQ error logs.",
  "processors": [{
    "gsub": {
      "field": "message",
      "pattern": "^[\\-]{5}[a-z0-9\\. :]*[\\-]{5,}",
      "replacement": ""
    }
  },{
    "gsub": {
      "field": "message",
      "pattern": "\n",
      "replacement": " "
    }
  },{
    "gsub": {
      "field": "message",
      "pattern": "[ ]{2,}",
      "replacement": " "
    }
  },{
    "trim": {
      "field": "message"
    }
  },{
    "rename": {
      "field": "@timestamp",
      "target_field": "event.created"
    }
  },{
    "grok": {
      "field": "message",
      "patterns":[
        "^%{DATA:log_timestamp} -"
      ]
    }
  },{
    "grok": {
      "field": "message",
      "patterns":[
        "Process\\(%{DATA:ibmmq.errorlog.process}\\) User\\(%{WORD:ibmmq.errorlog.user}\\) Program\\(%{DATA:ibmmq.errorlog.program}\\) Host\\(%{DATA:ibmmq.errorlog.hostname}\\) Installation\\(%{WORD:ibmmq.errorlog.installation}\\) VRMF\\(%{DATA:ibmmq.errorlog.vrmf}\\)( QMgr\\(%{DATA:ibmmq.errorlog.qmgr}\\))?( Time\\(%{TIMESTAMP_ISO8601:@timestamp}\\))?( RemoteHost\\(%{DATA:ibmmq.errorlog.remotehost}\\))?( ArithInsert1\\(%{DATA:ibmmq.errorlog.arithinsert1}\\))?( ArithInsert2\\(%{DATA:ibmmq.errorlog.arithinsert2}\\))?( CommentInsert1\\(%{DATA:ibmmq.errorlog.commentinsert1}\\))?( CommentInsert2\\(%{DATA:ibmmq.errorlog.commentinsert2}\\))?( CommentInsert3\\(%{DATA:ibmmq.errorlog.commentinsert3}\\))? (?=AMQ[0-9]{4})%{DATA:error.id}((?<=AMQ[0-9]{4}[A-Z])%{DATA:log.level})?: %{DATA:ibmmq.errorlog.errordescription} EXPLANATION: %{DATA:ibmmq.errorlog.explanation} ACTION: %{DATA:ibmmq.errorlog.action}$"
        ]
    }
  },{
    "remove":{
      "field": ["log_timestamp", "message"]
    }
  }],
  "on_failure" : [{
    "set" : {
      "field" : "_index",
      "value" : "failed-{{ _index }}"
    }
  }]
}
