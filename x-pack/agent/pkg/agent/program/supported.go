// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/x-pack/agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]bool

func init() {
	// Packed Files
	// spec/filebeat.yml
	// spec/metricbeat.yml
	unpacked := packer.MustUnpack("eJzsV9Fvs7odfd+f0ddNG5gv3WXSfQh8FwNJyRfS2sZv2E6BxCaskFCY9r9PJiEJbe/dpkmTJu2hSkXsn3/n+PzOIX97qKst/9NrIbdsmzZ/7JR8+MsDU15Dnw9ZrGRNcSgTsl4kwNyvCkel+F0mCuViXuVciX5VOCwoTC8o2iwoIyl81C6VrNlmJpnyCgbR/gemOfMjOaz5uLaMJSNOnZBYLhU6JjisKV7bVHk1By/F0p0Xy5fzJ8PeMcFCMoyOwp01DMTyB8kaDr1d2pmKQSSFG9SBGzTxRn+GTYJnOQWooXhm3NcXfmjSTShcFZ2YohW1UDd893zIqBW2SVt1Ar9L3h8Wy41TMVXJxIpfUzzbU5I9usU8C1zH2BJHTnkZ1sutH3cJjgwC3iuu9xGN82nc1yYkPqwKZ5+QOOfANrmKJG8PWeDOs2Ht8yFL8awVJO7Hs1h/e8atuKPYa3g7nNckZP6xdsVKxxR+1As/lAk2xzpXXPqswDWyBNjtFtkGM+06JZGxys59DH9QGhQbj4Efzzh8WVyfX/q562N4vtw4O2Y5M2LFpzP29aWv+QQb98NTAlDPgd2Ne4c/Pz6tCufWc3ZoAoi+CT/MNf8Myl54diUgaq4YfCcXMHsMoDxyHxncigyuUM7I02KK4cPz81kXnp4WbmFkDHvtiJ9Dz0i/f7qHT/zp3lgZDRqecDf29Zm7JiFOS0kw4SZwnZqBYaZqBvjdeo0BgUHDgFYMvjwG8P1E73lz5xklVLJyfeJWvE/xtwEvhfL44QwplJ4f20isue5tx+df1xE4bleFY1J//qGX9xPt7D0D0ZvGEMD4lIBG8mxah0G7XFqhpFD2xIpqZgmN6zHwz88+Y+cnbsle79Ma2JJo4OGsAVoxP5Zc2iDB7ya9zVJP9exZ8YnvPt3VGyX7Kf++9iI0uT993qWX5gNnTeCj/cjPcuNozq77KLR3KUDdbe0El64142C4Jz2j2iMMSsJXobxaYNRfdQZQTXFkMCu4aXj0AoBmq8K5eukF1wcO9FlxJ/DLoOFhnp8v+CDtGDA+1RXwp8eBU4gKij1jwvFunKtIMoh2AtrdPV/0LheuHFrI0PWv/cBGbonGFEq3FAeq9fhLnnNDz6LZL1z0Zwxu5y/VpT/TtBebuQoLJ0hItEqwKbnl5Al4OYTANoXvmMLldeAKyaDXCyh3HKCcq+gQdm0WXvQWdq3urUyBp1LwS7l056W+Z25pv83Kxfrw88MfzvGnts1bwb8IwGeMDK7k7hJ4O4bXjwE0pfDDKgGXYCRhyftDhrtr6PSUxCZ3ZxWDxpHiWZ6od0m/myrB7z3dTAJqXKtJaRn0DPrPglOZOVNeSbGph/TIsL2nz+a3JdEk1Q3VZ5H1bwXnrT4ZRFOQdbVjYKZSLEw+fKcNRnQcPi14ieqz0Aw9XH+lQ6jJI4Xo2yhg4ctW88UmfP0/CP9ng/BLw41eBZBG6tkdxUJu/SvPX5hsqF+KtqMeePfTcdH+ptn9Vw3yPw15YolKwPyVK1RSkrf/Yuh3ekaIuviH9XRafLfXP87rfr8s6upeHwPX3w9ZOKljZHx4iTWnLxqjyf+KNrVHaDw3czbzFKDXhIRdQvZf6vJ6d+Bq6nfBMWLQL/FP9701zKKSgEZeA8i908j9vluodhSbJ6HQ63CXE1xDnezqof/OHugZCRnOWYyzOK6jZXj6NV/5wsM6fT7DL6PeFVd2syqchpK4S3E0DbBJwJon6g/+OehOB6eAqPus6/Cqde1h93Vvd3YJvxsHb5TIXoczXR8WAuSS7Q7ZBnr95uyxh5A0bILn/KPJZBD1hBhV4CbqHMoaH+r1Dym6ycoxzIdABahOSGSkOOop9roEZOVy6EF0FMcV74YwfkswfUs2w//DS6yAXp+6vHKzn39++Pvv/hEAAP//aVXXWw==")
	SupportedMap = make(map[string]bool)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Name)] = true
	}
}
