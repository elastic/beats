// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package ipfix

import (
	"bytes"
	"fmt"
	"io"
	"testing"

	"github.com/elastic/elastic-agent-libs/logp"
)

// all test files are read from/stored within the "testdata" directory
const testDataPath = "testdata"

func TestIpfixWithRandomData(t *testing.T) {
	testCases := []struct {
		data []byte
	}{
		{
			data: []byte{
				0x00, 0x0a, 0x00, 0x74, 0x67, 0x5a, 0x16, 0xf2, 0x00, 0x00, 0x3a, 0x96,
				0x00, 0x00, 0x08, 0xac, 0x00, 0x00, 0x00, 0x34, 0x01, 0x10, 0x00, 0x05,
				0x00, 0x4e, 0x00, 0x04, 0x00, 0x75, 0x00, 0x04, 0x00, 0x65, 0x00, 0x04,
				0x00, 0x69, 0x00, 0x04, 0x00, 0x55, 0x00, 0x04, 0x01, 0x0e, 0x00, 0x05,
				0x00, 0x09, 0x00, 0x04, 0x00, 0x27, 0x00, 0x04, 0x00, 0x4c, 0x00, 0x04,
				0x00, 0x1e, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x04, 0x01, 0x10, 0x00, 0x18,
				0x00, 0x00, 0x78, 0x47, 0x00, 0x00, 0xfe, 0x90, 0x00, 0x00, 0x1e, 0x5b,
				0x00, 0x00, 0x70, 0xa9, 0x00, 0x00, 0x60, 0x83, 0x01, 0x0e, 0x00, 0x18,
				0x00, 0x00, 0x89, 0xd2, 0x00, 0x00, 0x08, 0xbb, 0x00, 0x00, 0x04, 0x8c,
				0x00, 0x00, 0x39, 0x7c, 0x00, 0x00, 0x07, 0x05, 0x00, 0x0a, 0x00, 0x2c,
				0x67, 0x5a, 0x16, 0xf3, 0x00, 0x00, 0x19, 0x53, 0x00, 0x00, 0x03, 0x94,
				0x00, 0x00, 0x00, 0x10, 0x01, 0x16, 0x00, 0x02, 0x00, 0x3b, 0x00, 0x04,
				0x00, 0x43, 0x00, 0x04, 0x01, 0x16, 0x00, 0x0c, 0x00, 0x00, 0x28, 0xd4,
				0x00, 0x00, 0xf0, 0x69, 0x00, 0x0a, 0x00, 0x2c, 0x67, 0x5a, 0x16, 0xf3,
				0x00, 0x00, 0x1f, 0xc3, 0x00, 0x00, 0x0b, 0xbf, 0x00, 0x00, 0x00, 0x10,
				0x01, 0x15, 0x00, 0x02, 0x00, 0x66, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04,
				0x01, 0x15, 0x00, 0x0c, 0x00, 0x00, 0xb5, 0xb4, 0x00, 0x00, 0x97, 0x4d,
				0x00, 0x0a, 0x00, 0x64, 0x67, 0x5a, 0x16, 0xf4, 0x00, 0x00, 0x28, 0x7d,
				0x00, 0x00, 0x01, 0x2a, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x05,
				0x00, 0x0c, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x04,
				0x00, 0x70, 0x00, 0x04, 0x00, 0x41, 0x00, 0x04, 0x01, 0x15, 0x00, 0x03,
				0x00, 0x03, 0x00, 0x04, 0x00, 0x27, 0x00, 0x04, 0x00, 0x74, 0x00, 0x04,
				0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0xd1, 0x61, 0x00, 0x00, 0xf3, 0x38,
				0x00, 0x00, 0x89, 0x0f, 0x00, 0x00, 0xd2, 0xb7, 0x00, 0x00, 0xcf, 0xd0,
				0x01, 0x15, 0x00, 0x10, 0x00, 0x00, 0x30, 0xae, 0x00, 0x00, 0xe8, 0xc4,
				0x00, 0x00, 0x74, 0x68, 0x00, 0x0a, 0x00, 0x2c, 0x67, 0x5a, 0x16, 0xf4,
				0x00, 0x00, 0x47, 0x92, 0x00, 0x00, 0x0e, 0x79, 0x00, 0x00, 0x00, 0x10,
				0x01, 0x12, 0x00, 0x02, 0x00, 0x22, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x04,
				0x01, 0x12, 0x00, 0x0c, 0x00, 0x00, 0xa3, 0x36, 0x00, 0x00, 0xe8, 0x86,
				0x00, 0x0a, 0x00, 0x44, 0x67, 0x5a, 0x16, 0xf5, 0x00, 0x00, 0x0b, 0xfc,
				0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x05,
				0x00, 0x37, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x25, 0x00, 0x04,
				0x00, 0x6b, 0x00, 0x04, 0x00, 0x70, 0x00, 0x04, 0x01, 0x00, 0x00, 0x18,
				0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x75, 0x92, 0x00, 0x00, 0x51, 0x74,
				0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x54, 0x67, 0x00, 0x0a, 0x00, 0x24,
				0x67, 0x5a, 0x16, 0xf5, 0x00, 0x00, 0x1d, 0xe1, 0x00, 0x00, 0x0c, 0x02,
				0x00, 0x00, 0x00, 0x0c, 0x01, 0x08, 0x00, 0x01, 0x00, 0x62, 0x00, 0x04,
				0x01, 0x08, 0x00, 0x08, 0x00, 0x00, 0xe2, 0x5f, 0x00, 0x0a, 0x00, 0x3c,
				0x67, 0x5a, 0x16, 0xf6, 0x00, 0x00, 0x05, 0x75, 0x00, 0x00, 0x03, 0xdb,
				0x00, 0x00, 0x00, 0x18, 0x01, 0x01, 0x00, 0x04, 0x00, 0x33, 0x00, 0x04,
				0x00, 0x71, 0x00, 0x04, 0x00, 0x35, 0x00, 0x04, 0x00, 0x21, 0x00, 0x04,
				0x01, 0x01, 0x00, 0x14, 0x00, 0x00, 0xdd, 0x6b, 0x00, 0x00, 0x6e, 0x64,
				0x00, 0x00, 0x34, 0xdc, 0x00, 0x00, 0xde, 0x1a, 0x00, 0x0a, 0x00, 0x24,
				0x67, 0x5a, 0x16, 0xf6, 0x00, 0x00, 0x07, 0x49, 0x00, 0x00, 0x10, 0x54,
				0x00, 0x00, 0x00, 0x0c, 0x01, 0x18, 0x00, 0x01, 0x00, 0x2f, 0x00, 0x04,
				0x01, 0x18, 0x00, 0x08, 0x00, 0x00, 0x30, 0x47, 0x00, 0x0a, 0x00, 0x54,
				0x67, 0x5a, 0x16, 0xf7, 0x00, 0x00, 0x38, 0xfb, 0x00, 0x00, 0x08, 0xa1,
				0x00, 0x00, 0x00, 0x24, 0x01, 0x13, 0x00, 0x01, 0x00, 0x7d, 0x00, 0x04,
				0x01, 0x15, 0x00, 0x05, 0x00, 0x3e, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x04,
				0x00, 0x70, 0x00, 0x04, 0x00, 0x68, 0x00, 0x04, 0x00, 0x35, 0x00, 0x04,
				0x01, 0x13, 0x00, 0x08, 0x00, 0x00, 0x52, 0x49, 0x01, 0x15, 0x00, 0x18,
				0x00, 0x00, 0x4b, 0xb6, 0x00, 0x00, 0x2d, 0x51, 0x00, 0x00, 0x35, 0x59,
				0x00, 0x00, 0xa6, 0x8e, 0x00, 0x00, 0x34, 0xb8, 0x00, 0x0a, 0x00, 0x5c,
				0x67, 0x5a, 0x16, 0xf7, 0x00, 0x00, 0x01, 0x8f, 0x00, 0x00, 0x0b, 0x09,
				0x00, 0x00, 0x00, 0x28, 0x01, 0x12, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04,
				0x00, 0x28, 0x00, 0x04, 0x01, 0x16, 0x00, 0x05, 0x00, 0x2e, 0x00, 0x04,
				0x00, 0x4a, 0x00, 0x04, 0x00, 0x40, 0x00, 0x04, 0x00, 0x32, 0x00, 0x04,
				0x00, 0x38, 0x00, 0x04, 0x01, 0x12, 0x00, 0x0c, 0x00, 0x00, 0xfa, 0x3d,
				0x00, 0x00, 0xaa, 0x41, 0x01, 0x16, 0x00, 0x18, 0x00, 0x00, 0xa6, 0x32,
				0x00, 0x00, 0x5d, 0xe0, 0x00, 0x00, 0x5e, 0xdb, 0x00, 0x00, 0x8f, 0xce,
				0x00, 0x00, 0xa0, 0x89, 0x00, 0x0a, 0x00, 0x24, 0x67, 0x5a, 0x16, 0xf8,
				0x00, 0x00, 0x33, 0x07, 0x00, 0x00, 0x0d, 0xee, 0x00, 0x00, 0x00, 0x0c,
				0x01, 0x0d, 0x00, 0x01, 0x00, 0x37, 0x00, 0x04, 0x01, 0x0d, 0x00, 0x08,
				0x00, 0x00, 0x88, 0x5f, 0x00, 0x0a, 0x00, 0x54, 0x67, 0x5a, 0x16, 0xf8,
				0x00, 0x00, 0x13, 0x28, 0x00, 0x00, 0x0d, 0xde, 0x00, 0x00, 0x00, 0x24,
				0x01, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x04, 0x00, 0x65, 0x00, 0x04,
				0x01, 0x01, 0x00, 0x04, 0x00, 0x09, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x04,
				0x00, 0x48, 0x00, 0x04, 0x00, 0x30, 0x00, 0x04, 0x01, 0x10, 0x00, 0x0c,
				0x00, 0x00, 0x56, 0xb1, 0x00, 0x00, 0x12, 0x3b, 0x01, 0x01, 0x00, 0x14,
				0x00, 0x00, 0x0f, 0xac, 0x00, 0x00, 0xce, 0x35, 0x00, 0x00, 0xd6, 0xb9,
				0x00, 0x00, 0x60, 0xa7, 0x00, 0x0a, 0x00, 0x44, 0x67, 0x5a, 0x16, 0xf9,
				0x00, 0x00, 0x06, 0x0f, 0x00, 0x00, 0x0e, 0xce, 0x00, 0x00, 0x00, 0x1c,
				0x01, 0x02, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x63, 0x00, 0x04,
				0x00, 0x69, 0x00, 0x04, 0x00, 0x54, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x04,
				0x01, 0x02, 0x00, 0x18, 0x00, 0x00, 0x2d, 0xa6, 0x00, 0x00, 0x3d, 0x31,
				0x00, 0x00, 0xa6, 0x74, 0x00, 0x00, 0x3f, 0x9d, 0x00, 0x00, 0x16, 0x72,
				0x00, 0x0a, 0x00, 0x24, 0x67, 0x5a, 0x16, 0xf9, 0x00, 0x00, 0x40, 0xaf,
				0x00, 0x00, 0x11, 0x96, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x18, 0x00, 0x01,
				0x00, 0x31, 0x00, 0x04, 0x01, 0x18, 0x00, 0x08, 0x00, 0x00, 0x42, 0xc3,
				0x00, 0x0a, 0x00, 0x3c, 0x67, 0x5a, 0x16, 0xfa, 0x00, 0x00, 0x09, 0x5f,
				0x00, 0x00, 0x10, 0x9f, 0x00, 0x00, 0x00, 0x18, 0x01, 0x1d, 0x00, 0x04,
				0x00, 0x36, 0x00, 0x04, 0x00, 0x21, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x04,
				0x00, 0x22, 0x00, 0x04, 0x01, 0x1d, 0x00, 0x14, 0x00, 0x00, 0xf0, 0x07,
				0x00, 0x00, 0xe8, 0xfb, 0x00, 0x00, 0xdb, 0xbe, 0x00, 0x00, 0x24, 0xf5,
				0x00, 0x0a, 0x00, 0x54, 0x67, 0x5a, 0x16, 0xfa, 0x00, 0x00, 0x37, 0xc9,
				0x00, 0x00, 0x01, 0x35, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x02,
				0x00, 0x7a, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x01, 0x08, 0x00, 0x04,
				0x00, 0x57, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x43, 0x00, 0x04,
				0x00, 0x26, 0x00, 0x04, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x53, 0x8d,
				0x00, 0x00, 0x92, 0x33, 0x01, 0x08, 0x00, 0x14, 0x00, 0x00, 0x6d, 0x38,
				0x00, 0x00, 0xe4, 0xc0, 0x00, 0x00, 0x3b, 0x14, 0x00, 0x00, 0xe9, 0x4c,
				0x00, 0x0a, 0x00, 0x24, 0x67, 0x5a, 0x16, 0xfb, 0x00, 0x00, 0x14, 0x90,
				0x00, 0x00, 0x07, 0x12, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x15, 0x00, 0x01,
				0x00, 0x6a, 0x00, 0x04, 0x01, 0x15, 0x00, 0x08, 0x00, 0x00, 0x9e, 0xaf,
				0x00, 0x0a, 0x00, 0x44, 0x67, 0x5a, 0x16, 0xfb, 0x00, 0x00, 0x48, 0x08,
				0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x16, 0x00, 0x05,
				0x00, 0x60, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x04, 0x00, 0x35, 0x00, 0x04,
				0x00, 0x6d, 0x00, 0x04, 0x00, 0x63, 0x00, 0x04, 0x01, 0x16, 0x00, 0x18,
				0x00, 0x00, 0xd6, 0xa4, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x83, 0x47,
				0x00, 0x00, 0xba, 0xda, 0x00, 0x00, 0x9f, 0x96, 0x00, 0x0a, 0x00, 0x3c,
				0x67, 0x5a, 0x16, 0xfc, 0x00, 0x00, 0x1f, 0xab, 0x00, 0x00, 0x0b, 0x09,
				0x00, 0x00, 0x00, 0x18, 0x01, 0x10, 0x00, 0x02, 0x00, 0x15, 0x00, 0x04,
				0x00, 0x09, 0x00, 0x04, 0x01, 0x18, 0x00, 0x01, 0x00, 0x46, 0x00, 0x04,
				0x01, 0x10, 0x00, 0x0c, 0x00, 0x00, 0x9e, 0xbf, 0x00, 0x00, 0xa5, 0x9d,
				0x01, 0x18, 0x00, 0x08, 0x00, 0x00, 0x3a, 0x4a, 0x00, 0x0a, 0x00, 0x44,
				0x67, 0x5a, 0x16, 0xfc, 0x00, 0x00, 0x2d, 0x0c, 0x00, 0x00, 0x04, 0x6b,
				0x00, 0x00, 0x00, 0x1c, 0x01, 0x0b, 0x00, 0x05, 0x00, 0x13, 0x00, 0x04,
				0x00, 0x71, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x04, 0x00, 0x26, 0x00, 0x04,
				0x00, 0x3c, 0x00, 0x04, 0x01, 0x0b, 0x00, 0x18, 0x00, 0x00, 0x5e, 0x4d,
				0x00, 0x00, 0xb1, 0xce, 0x00, 0x00, 0x21, 0x32, 0x00, 0x00, 0xde, 0xec,
				0x00, 0x00, 0xbc, 0xce, 0x00, 0x0a, 0x00, 0x54, 0x67, 0x5a, 0x16, 0xfd,
				0x00, 0x00, 0x36, 0xf6, 0x00, 0x00, 0x01, 0x7d, 0x00, 0x00, 0x00, 0x24,
				0x01, 0x07, 0x00, 0x04, 0x00, 0x28, 0x00, 0x04, 0x00, 0x74, 0x00, 0x04,
				0x00, 0x65, 0x00, 0x04, 0x00, 0x4b, 0x00, 0x04, 0x01, 0x1d, 0x00, 0x02,
				0x00, 0x4b, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x01, 0x07, 0x00, 0x14,
				0x00, 0x00, 0x41, 0x73, 0x00, 0x00, 0x70, 0x89, 0x00, 0x00, 0xd1, 0xaf,
				0x00, 0x00, 0x78, 0x32, 0x01, 0x1d, 0x00, 0x0c, 0x00, 0x00, 0x83, 0x93,
				0x00, 0x00, 0xe8, 0xe5,
			},
		},
	}

	logp.TestingSetup()
	for i, tc := range testCases {
		name := fmt.Sprintf("Test ipfix data (%d)", i)
		t.Run(name, func(t *testing.T) {
			cfg := &Config{
				// we set ProcessParallel to true as this always has the best performance
				InternalNetworks: nil,
				// batch size is set to 1 because we need to compare individual records one by one
				CustomDefinitions: nil,
			}
			ioReader := bytes.NewReader(tc.data)
			rows := readAndValidateIpfixData(t, cfg, ioReader)
			// asserts of number of rows read is the same as the number of rows written
			t.Logf("This file had [%v] rows", rows)
			//assert.Equal(t, rows, tc.rows)
		})
	}
}

func readAndValidateIpfixData(t *testing.T, cfg *Config, reader io.Reader) int {
	sReader, err := NewBufferedReader(reader, cfg)
	if err != nil {
		t.Fatalf("failed to init stream reader: %v", err)
	}

	rowCount := 0
	for sReader.Next() {
		val, err := sReader.Record()
		if err != nil {
			t.Fatalf("failed to read stream: %v", err)
		}
		t.Logf("Got flows information [%v]", val)
		if val != nil {
			rowCount++
		}
	}
	return rowCount
}
