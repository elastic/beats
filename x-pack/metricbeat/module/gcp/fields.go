// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package gcp

import (
	"github.com/elastic/beats/v7/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "gcp", asset.ModuleFieldsPri, AssetGcp); err != nil {
		panic(err)
	}
}

// AssetGcp returns asset data.
// This is the base64 encoded zlib format compressed contents of module/gcp.
func AssetGcp() string {
	return "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"
}
