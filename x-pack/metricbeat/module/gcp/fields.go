// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package gcp

import (
	"github.com/elastic/beats/v7/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "gcp", asset.ModuleFieldsPri, AssetGcp); err != nil {
		panic(err)
	}
}

// AssetGcp returns asset data.
// This is the base64 encoded zlib format compressed contents of module/gcp.
func AssetGcp() string {
	return "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"
}
