// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package gcp

import (
	"github.com/elastic/beats/v7/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "gcp", asset.ModuleFieldsPri, AssetGcp); err != nil {
		panic(err)
	}
}

// AssetGcp returns asset data.
// This is the base64 encoded zlib format compressed contents of module/gcp.
func AssetGcp() string {
	return "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"
}
