# process fields from ECS version 8.12.0-dev.

- key: ecs
  title: ECS
  description: ECS Fields.
  fields:
  - name: process
    title: Process
    group: 2
    description: 'These fields contain information about a process.

      These fields can help you correlate metrics information with a process id/name
      from a log message.  The `process.pid` often stays in the metric itself and
      is copied to the global field for correlation.'
    type: group
    default_field: true
    fields:
    - name: args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
    - name: args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: code_signature.digest_algorithm
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The hashing algorithm used to sign the process.

        This value can distinguish signatures when a file is signed multiple times
        by the same signer but with a different digest algorithm.'
      example: sha256
      default_field: false
    - name: code_signature.exists
      level: core
      type: boolean
      description: Boolean to capture if a signature is present.
      example: 'true'
      default_field: false
    - name: code_signature.signing_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The identifier used to sign the process.

        This is used to identify the application manufactured by a software vendor.
        The field is relevant to Apple *OS only.'
      example: com.apple.xpc.proxy
      default_field: false
    - name: code_signature.status
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      default_field: false
    - name: code_signature.subject_name
      level: core
      type: keyword
      ignore_above: 1024
      description: Subject name of the code signer
      example: Microsoft Corporation
      default_field: false
    - name: code_signature.team_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The team identifier used to sign the process.

        This is used to identify the team or vendor of a software product. The field
        is relevant to Apple *OS only.'
      example: EQHXZ8M8AV
      default_field: false
    - name: code_signature.timestamp
      level: extended
      type: date
      description: Date and time when the code signature was generated and signed.
      example: '2021-01-01T12:10:30Z'
      default_field: false
    - name: code_signature.trusted
      level: extended
      type: boolean
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      default_field: false
    - name: code_signature.valid
      level: extended
      type: boolean
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      default_field: false
    - name: command_line
      level: extended
      type: wildcard
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      default_field: false
    - name: elf.architecture
      level: extended
      type: keyword
      ignore_above: 1024
      description: Machine architecture of the ELF file.
      example: x86-64
      default_field: false
    - name: elf.byte_order
      level: extended
      type: keyword
      ignore_above: 1024
      description: Byte sequence of ELF file.
      example: Little Endian
      default_field: false
    - name: elf.cpu_type
      level: extended
      type: keyword
      ignore_above: 1024
      description: CPU type of the ELF file.
      example: Intel
      default_field: false
    - name: elf.creation_date
      level: extended
      type: date
      description: Extracted when possible from the file's metadata. Indicates when
        it was built or compiled. It can also be faked by malware creators.
      default_field: false
    - name: elf.exports
      level: extended
      type: flattened
      description: List of exported element names and types.
      default_field: false
    - name: elf.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in an ELF file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: elf.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: elf.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: elf.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: elf.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: elf.header.abi_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Version of the ELF Application Binary Interface (ABI).
      default_field: false
    - name: elf.header.class
      level: extended
      type: keyword
      ignore_above: 1024
      description: Header class of the ELF file.
      default_field: false
    - name: elf.header.data
      level: extended
      type: keyword
      ignore_above: 1024
      description: Data table of the ELF header.
      default_field: false
    - name: elf.header.entrypoint
      level: extended
      type: long
      format: string
      description: Header entrypoint of the ELF file.
      default_field: false
    - name: elf.header.object_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: '"0x1" for original ELF files.'
      default_field: false
    - name: elf.header.os_abi
      level: extended
      type: keyword
      ignore_above: 1024
      description: Application Binary Interface (ABI) of the Linux OS.
      default_field: false
    - name: elf.header.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: Header type of the ELF file.
      default_field: false
    - name: elf.header.version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Version of the ELF header.
      default_field: false
    - name: elf.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in an ELF file. An import hash can be used
        to fingerprint binaries even after recompilation or other code-level transformations
        have occurred, which would change more traditional hash values.

        This is an ELF implementation of the Windows PE imphash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: elf.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: elf.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: elf.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: elf.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the ELF file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `elf.sections.*`.'
      default_field: false
    - name: elf.sections.chi2
      level: extended
      type: long
      format: number
      description: Chi-square probability distribution of the section.
      default_field: false
    - name: elf.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: elf.sections.flags
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List flags.
      default_field: false
    - name: elf.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List name.
      default_field: false
    - name: elf.sections.physical_offset
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List offset.
      default_field: false
    - name: elf.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: ELF Section List physical size.
      default_field: false
    - name: elf.sections.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List type.
      default_field: false
    - name: elf.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: elf.sections.virtual_address
      level: extended
      type: long
      format: string
      description: ELF Section List virtual address.
      default_field: false
    - name: elf.sections.virtual_size
      level: extended
      type: long
      format: string
      description: ELF Section List virtual size.
      default_field: false
    - name: elf.segments
      level: extended
      type: nested
      description: 'An array containing an object for each segment of the ELF file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `elf.segments.*`.'
      default_field: false
    - name: elf.segments.sections
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF object segment sections.
      default_field: false
    - name: elf.segments.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF object segment type.
      default_field: false
    - name: elf.shared_libraries
      level: extended
      type: keyword
      ignore_above: 1024
      description: List of shared libraries used by this ELF object.
      default_field: false
    - name: elf.telfhash
      level: extended
      type: keyword
      ignore_above: 1024
      description: telfhash symbol hash for ELF file.
      default_field: false
    - name: end
      level: extended
      type: date
      description: The time the process ended.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: entry_leader.args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
      default_field: false
    - name: entry_leader.args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: entry_leader.attested_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: entry_leader.attested_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: entry_leader.attested_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: entry_leader.command_line
      level: extended
      type: wildcard
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      default_field: false
    - name: entry_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: entry_leader.entry_meta.source.ip
      level: core
      type: ip
      description: IP address of the source (IPv4 or IPv6).
      default_field: false
    - name: entry_leader.entry_meta.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The entry type for the entry session leader. Values include: init(e.g
        systemd), sshd, ssm, kubelet, teleport, terminal, console

        Note: This field is only set on process.session_leader.'
      default_field: false
    - name: entry_leader.executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      default_field: false
    - name: entry_leader.group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: entry_leader.group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: entry_leader.interactive
      level: extended
      type: boolean
      description: 'Whether the process is connected to an interactive shell.

        Process interactivity is inferred from the processes file descriptors. If
        the character device for the controlling tty is the same as stdin and stderr
        for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is
        simply one that does not have open file descriptors reading the controlling
        TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A
        backgrounded process is still considered interactive if stdin and stderr are
        connected to the controlling TTY.'
      example: true
      default_field: false
    - name: entry_leader.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      default_field: false
    - name: entry_leader.parent.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: entry_leader.parent.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: entry_leader.parent.session_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: entry_leader.parent.session_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: entry_leader.parent.session_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: entry_leader.parent.session_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: entry_leader.parent.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: entry_leader.parent.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: entry_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: entry_leader.real_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: entry_leader.real_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: entry_leader.real_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: entry_leader.real_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: entry_leader.same_as_process
      level: extended
      type: boolean
      description: 'This boolean is used to identify if a leader process is the same
        as the top level process.

        For example, if `process.group_leader.same_as_process = true`, it means the
        process event in question is the leader of its process group. Details under
        `process.*` like `pid` would be the same under `process.group_leader.*` The
        same applies for both `process.session_leader` and `process.entry_leader`.

        This field exists to the benefit of EQL and other rule engines since it''s
        not possible to compare equality between two fields in a single document.
        e.g `process.entity_id` = `process.group_leader.entity_id` (top level process
        is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id`
        (top level process is the entry session leader)

        Instead these rules could be written like: `process.group_leader.same_as_process:
        true` OR `process.entry_leader.same_as_process: true`

        Note: This field is only set on `process.entry_leader`, `process.session_leader`
        and `process.group_leader`.'
      example: true
      default_field: false
    - name: entry_leader.saved_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: entry_leader.saved_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: entry_leader.saved_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: entry_leader.saved_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: entry_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: entry_leader.supplemental_groups.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: entry_leader.supplemental_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: entry_leader.tty
      level: extended
      type: object
      description: Information about the controlling TTY device. If set, the process
        belongs to an interactive session.
      default_field: false
    - name: entry_leader.tty.char_device.major
      level: extended
      type: long
      description: The major number identifies the driver associated with the device.
        The character device's major and minor numbers can be algorithmically combined
        to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0".
        For more details, please refer to the Linux kernel documentation.
      example: 4
      default_field: false
    - name: entry_leader.tty.char_device.minor
      level: extended
      type: long
      description: "The minor number is used only by the driver specified by the major\
        \ number; other parts of the kernel don\u2019t use it, and merely pass it\
        \ along to the driver. It is common for a driver to control several devices;\
        \ the minor number provides a way for the driver to differentiate among them."
      example: 1
      default_field: false
    - name: entry_leader.user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: entry_leader.user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: entry_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: entry_leader.working_directory
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: The working directory of the process.
      example: /home/alice
      default_field: false
    - name: env_vars
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of environment variable bindings. Captured from a snapshot
        of the environment at the time of execution.

        May be filtered to protect sensitive information.'
      example: '["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]'
      default_field: false
    - name: executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
        default_field: false
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
    - name: exit_code
      level: extended
      type: long
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      default_field: false
    - name: group_leader.args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
      default_field: false
    - name: group_leader.args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: group_leader.command_line
      level: extended
      type: wildcard
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      default_field: false
    - name: group_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: group_leader.executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      default_field: false
    - name: group_leader.group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: group_leader.group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: group_leader.interactive
      level: extended
      type: boolean
      description: 'Whether the process is connected to an interactive shell.

        Process interactivity is inferred from the processes file descriptors. If
        the character device for the controlling tty is the same as stdin and stderr
        for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is
        simply one that does not have open file descriptors reading the controlling
        TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A
        backgrounded process is still considered interactive if stdin and stderr are
        connected to the controlling TTY.'
      example: true
      default_field: false
    - name: group_leader.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      default_field: false
    - name: group_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: group_leader.real_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: group_leader.real_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: group_leader.real_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: group_leader.real_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: group_leader.same_as_process
      level: extended
      type: boolean
      description: 'This boolean is used to identify if a leader process is the same
        as the top level process.

        For example, if `process.group_leader.same_as_process = true`, it means the
        process event in question is the leader of its process group. Details under
        `process.*` like `pid` would be the same under `process.group_leader.*` The
        same applies for both `process.session_leader` and `process.entry_leader`.

        This field exists to the benefit of EQL and other rule engines since it''s
        not possible to compare equality between two fields in a single document.
        e.g `process.entity_id` = `process.group_leader.entity_id` (top level process
        is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id`
        (top level process is the entry session leader)

        Instead these rules could be written like: `process.group_leader.same_as_process:
        true` OR `process.entry_leader.same_as_process: true`

        Note: This field is only set on `process.entry_leader`, `process.session_leader`
        and `process.group_leader`.'
      example: true
      default_field: false
    - name: group_leader.saved_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: group_leader.saved_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: group_leader.saved_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: group_leader.saved_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: group_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: group_leader.supplemental_groups.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: group_leader.supplemental_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: group_leader.tty
      level: extended
      type: object
      description: Information about the controlling TTY device. If set, the process
        belongs to an interactive session.
      default_field: false
    - name: group_leader.tty.char_device.major
      level: extended
      type: long
      description: The major number identifies the driver associated with the device.
        The character device's major and minor numbers can be algorithmically combined
        to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0".
        For more details, please refer to the Linux kernel documentation.
      example: 4
      default_field: false
    - name: group_leader.tty.char_device.minor
      level: extended
      type: long
      description: "The minor number is used only by the driver specified by the major\
        \ number; other parts of the kernel don\u2019t use it, and merely pass it\
        \ along to the driver. It is common for a driver to control several devices;\
        \ the minor number provides a way for the driver to differentiate among them."
      example: 1
      default_field: false
    - name: group_leader.user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: group_leader.user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: group_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: group_leader.working_directory
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: The working directory of the process.
      example: /home/alice
      default_field: false
    - name: hash.md5
      level: extended
      type: keyword
      ignore_above: 1024
      description: MD5 hash.
    - name: hash.sha1
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA1 hash.
    - name: hash.sha256
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA256 hash.
    - name: hash.sha384
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA384 hash.
      default_field: false
    - name: hash.sha512
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA512 hash.
    - name: hash.ssdeep
      level: extended
      type: keyword
      ignore_above: 1024
      description: SSDEEP hash.
      default_field: false
    - name: hash.tlsh
      level: extended
      type: keyword
      ignore_above: 1024
      description: TLSH hash.
      default_field: false
    - name: interactive
      level: extended
      type: boolean
      description: 'Whether the process is connected to an interactive shell.

        Process interactivity is inferred from the processes file descriptors. If
        the character device for the controlling tty is the same as stdin and stderr
        for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is
        simply one that does not have open file descriptors reading the controlling
        TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A
        backgrounded process is still considered interactive if stdin and stderr are
        connected to the controlling TTY.'
      example: true
      default_field: false
    - name: io
      level: extended
      type: object
      description: 'A chunk of input or output (IO) from a single process.

        This field only appears on the top level process object, which is the process
        that wrote the output or read the input.'
      default_field: false
    - name: io.bytes_skipped
      level: extended
      type: object
      description: An array of byte offsets and lengths denoting where IO data has
        been skipped.
      default_field: false
    - name: io.bytes_skipped.length
      level: extended
      type: long
      description: The length of bytes skipped.
      default_field: false
    - name: io.bytes_skipped.offset
      level: extended
      type: long
      description: The byte offset into this event's io.text (or io.bytes in the future)
        where length bytes were skipped.
      default_field: false
    - name: io.max_bytes_per_process_exceeded
      level: extended
      type: boolean
      description: If true, the process producing the output has exceeded the max_kilobytes_per_process
        configuration setting.
      default_field: false
    - name: io.text
      level: extended
      type: wildcard
      description: 'A chunk of output or input sanitized to UTF-8.

        Best efforts are made to ensure complete lines are captured in these events.
        Assumptions should NOT be made that multiple lines will appear in the same
        event. TTY output may contain terminal control codes such as for cursor movement,
        so some string queries may not match due to terminal codes inserted between
        characters of a word.'
      default_field: false
    - name: io.total_bytes_captured
      level: extended
      type: long
      description: The total number of bytes captured in this event.
      default_field: false
    - name: io.total_bytes_skipped
      level: extended
      type: long
      description: The total number of bytes that were not captured due to implementation
        restrictions such as buffer size limits. Implementors should strive to ensure
        this value is always zero
      default_field: false
    - name: io.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The type of object on which the IO action (read or write) was
        taken.

        Currently only ''tty'' is supported. Other types may be added in the future
        for ''file'' and ''socket'' support.'
      default_field: false
    - name: macho.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in a Mach-O file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: macho.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: macho.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: macho.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: macho.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: macho.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a Mach-O file. An import hash can be
        used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        This is a synonym for symhash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: macho.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: macho.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: macho.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: macho.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the Mach-O file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `macho.sections.*`.'
      default_field: false
    - name: macho.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: macho.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Mach-O Section List name.
      default_field: false
    - name: macho.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: Mach-O Section List physical size.
      default_field: false
    - name: macho.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: macho.sections.virtual_size
      level: extended
      type: long
      format: string
      description: Mach-O Section List virtual size. This is always the same as `physical_size`.
      default_field: false
    - name: macho.symhash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a Mach-O file. An import hash can be
        used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        This is a Mach-O implementation of the Windows PE imphash'
      example: d3ccf195b62a9279c3c19af1080497ec
      default_field: false
    - name: name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
        default_field: false
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
    - name: parent.args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
      default_field: false
    - name: parent.args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: parent.code_signature.digest_algorithm
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The hashing algorithm used to sign the process.

        This value can distinguish signatures when a file is signed multiple times
        by the same signer but with a different digest algorithm.'
      example: sha256
      default_field: false
    - name: parent.code_signature.exists
      level: core
      type: boolean
      description: Boolean to capture if a signature is present.
      example: 'true'
      default_field: false
    - name: parent.code_signature.signing_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The identifier used to sign the process.

        This is used to identify the application manufactured by a software vendor.
        The field is relevant to Apple *OS only.'
      example: com.apple.xpc.proxy
      default_field: false
    - name: parent.code_signature.status
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      default_field: false
    - name: parent.code_signature.subject_name
      level: core
      type: keyword
      ignore_above: 1024
      description: Subject name of the code signer
      example: Microsoft Corporation
      default_field: false
    - name: parent.code_signature.team_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The team identifier used to sign the process.

        This is used to identify the team or vendor of a software product. The field
        is relevant to Apple *OS only.'
      example: EQHXZ8M8AV
      default_field: false
    - name: parent.code_signature.timestamp
      level: extended
      type: date
      description: Date and time when the code signature was generated and signed.
      example: '2021-01-01T12:10:30Z'
      default_field: false
    - name: parent.code_signature.trusted
      level: extended
      type: boolean
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      default_field: false
    - name: parent.code_signature.valid
      level: extended
      type: boolean
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      default_field: false
    - name: parent.command_line
      level: extended
      type: wildcard
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      default_field: false
    - name: parent.elf.architecture
      level: extended
      type: keyword
      ignore_above: 1024
      description: Machine architecture of the ELF file.
      example: x86-64
      default_field: false
    - name: parent.elf.byte_order
      level: extended
      type: keyword
      ignore_above: 1024
      description: Byte sequence of ELF file.
      example: Little Endian
      default_field: false
    - name: parent.elf.cpu_type
      level: extended
      type: keyword
      ignore_above: 1024
      description: CPU type of the ELF file.
      example: Intel
      default_field: false
    - name: parent.elf.creation_date
      level: extended
      type: date
      description: Extracted when possible from the file's metadata. Indicates when
        it was built or compiled. It can also be faked by malware creators.
      default_field: false
    - name: parent.elf.exports
      level: extended
      type: flattened
      description: List of exported element names and types.
      default_field: false
    - name: parent.elf.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in an ELF file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: parent.elf.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: parent.elf.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.elf.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.elf.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: parent.elf.header.abi_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Version of the ELF Application Binary Interface (ABI).
      default_field: false
    - name: parent.elf.header.class
      level: extended
      type: keyword
      ignore_above: 1024
      description: Header class of the ELF file.
      default_field: false
    - name: parent.elf.header.data
      level: extended
      type: keyword
      ignore_above: 1024
      description: Data table of the ELF header.
      default_field: false
    - name: parent.elf.header.entrypoint
      level: extended
      type: long
      format: string
      description: Header entrypoint of the ELF file.
      default_field: false
    - name: parent.elf.header.object_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: '"0x1" for original ELF files.'
      default_field: false
    - name: parent.elf.header.os_abi
      level: extended
      type: keyword
      ignore_above: 1024
      description: Application Binary Interface (ABI) of the Linux OS.
      default_field: false
    - name: parent.elf.header.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: Header type of the ELF file.
      default_field: false
    - name: parent.elf.header.version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Version of the ELF header.
      default_field: false
    - name: parent.elf.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in an ELF file. An import hash can be used
        to fingerprint binaries even after recompilation or other code-level transformations
        have occurred, which would change more traditional hash values.

        This is an ELF implementation of the Windows PE imphash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: parent.elf.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: parent.elf.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: parent.elf.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: parent.elf.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the ELF file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `elf.sections.*`.'
      default_field: false
    - name: parent.elf.sections.chi2
      level: extended
      type: long
      format: number
      description: Chi-square probability distribution of the section.
      default_field: false
    - name: parent.elf.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: parent.elf.sections.flags
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List flags.
      default_field: false
    - name: parent.elf.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List name.
      default_field: false
    - name: parent.elf.sections.physical_offset
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List offset.
      default_field: false
    - name: parent.elf.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: ELF Section List physical size.
      default_field: false
    - name: parent.elf.sections.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF Section List type.
      default_field: false
    - name: parent.elf.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: parent.elf.sections.virtual_address
      level: extended
      type: long
      format: string
      description: ELF Section List virtual address.
      default_field: false
    - name: parent.elf.sections.virtual_size
      level: extended
      type: long
      format: string
      description: ELF Section List virtual size.
      default_field: false
    - name: parent.elf.segments
      level: extended
      type: nested
      description: 'An array containing an object for each segment of the ELF file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `elf.segments.*`.'
      default_field: false
    - name: parent.elf.segments.sections
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF object segment sections.
      default_field: false
    - name: parent.elf.segments.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: ELF object segment type.
      default_field: false
    - name: parent.elf.shared_libraries
      level: extended
      type: keyword
      ignore_above: 1024
      description: List of shared libraries used by this ELF object.
      default_field: false
    - name: parent.elf.telfhash
      level: extended
      type: keyword
      ignore_above: 1024
      description: telfhash symbol hash for ELF file.
      default_field: false
    - name: parent.end
      level: extended
      type: date
      description: The time the process ended.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: parent.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: parent.executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      default_field: false
    - name: parent.exit_code
      level: extended
      type: long
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      default_field: false
    - name: parent.group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: parent.group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: parent.group_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: parent.group_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: parent.group_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: parent.group_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: parent.hash.md5
      level: extended
      type: keyword
      ignore_above: 1024
      description: MD5 hash.
      default_field: false
    - name: parent.hash.sha1
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA1 hash.
      default_field: false
    - name: parent.hash.sha256
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA256 hash.
      default_field: false
    - name: parent.hash.sha384
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA384 hash.
      default_field: false
    - name: parent.hash.sha512
      level: extended
      type: keyword
      ignore_above: 1024
      description: SHA512 hash.
      default_field: false
    - name: parent.hash.ssdeep
      level: extended
      type: keyword
      ignore_above: 1024
      description: SSDEEP hash.
      default_field: false
    - name: parent.hash.tlsh
      level: extended
      type: keyword
      ignore_above: 1024
      description: TLSH hash.
      default_field: false
    - name: parent.interactive
      level: extended
      type: boolean
      description: 'Whether the process is connected to an interactive shell.

        Process interactivity is inferred from the processes file descriptors. If
        the character device for the controlling tty is the same as stdin and stderr
        for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is
        simply one that does not have open file descriptors reading the controlling
        TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A
        backgrounded process is still considered interactive if stdin and stderr are
        connected to the controlling TTY.'
      example: true
      default_field: false
    - name: parent.macho.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in a Mach-O file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: parent.macho.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: parent.macho.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.macho.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.macho.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: parent.macho.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a Mach-O file. An import hash can be
        used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        This is a synonym for symhash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: parent.macho.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: parent.macho.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: parent.macho.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: parent.macho.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the Mach-O file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `macho.sections.*`.'
      default_field: false
    - name: parent.macho.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: parent.macho.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Mach-O Section List name.
      default_field: false
    - name: parent.macho.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: Mach-O Section List physical size.
      default_field: false
    - name: parent.macho.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: parent.macho.sections.virtual_size
      level: extended
      type: long
      format: string
      description: Mach-O Section List virtual size. This is always the same as `physical_size`.
      default_field: false
    - name: parent.macho.symhash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a Mach-O file. An import hash can be
        used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        This is a Mach-O implementation of the Windows PE imphash'
      example: d3ccf195b62a9279c3c19af1080497ec
      default_field: false
    - name: parent.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      default_field: false
    - name: parent.pe.architecture
      level: extended
      type: keyword
      ignore_above: 1024
      description: CPU architecture target for the file.
      example: x64
      default_field: false
    - name: parent.pe.company
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      default_field: false
    - name: parent.pe.description
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal description of the file, provided at compile-time.
      example: Paint
      default_field: false
    - name: parent.pe.file_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      default_field: false
    - name: parent.pe.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in a PE file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: parent.pe.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: parent.pe.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.pe.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: parent.pe.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: parent.pe.imphash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a PE file. An imphash -- or import hash
        -- can be used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
      example: 0c6803c4e922103c4dca5963aad36ddf
      default_field: false
    - name: parent.pe.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a PE file. An import hash can be used
        to fingerprint binaries even after recompilation or other code-level transformations
        have occurred, which would change more traditional hash values.

        This is a synonym for imphash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: parent.pe.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: parent.pe.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: parent.pe.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: parent.pe.original_file_name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      default_field: false
    - name: parent.pe.pehash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the PE header and data from one or more PE sections.
        An pehash can be used to cluster files by transforming structural information
        about a file into a hash value.

        Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
      example: 73ff189b63cd6be375a7ff25179a38d347651975
      default_field: false
    - name: parent.pe.product
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      default_field: false
    - name: parent.pe.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the PE file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `pe.sections.*`.'
      default_field: false
    - name: parent.pe.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: parent.pe.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: PE Section List name.
      default_field: false
    - name: parent.pe.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: PE Section List physical size.
      default_field: false
    - name: parent.pe.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: parent.pe.sections.virtual_size
      level: extended
      type: long
      format: string
      description: PE Section List virtual size. This is always the same as `physical_size`.
      default_field: false
    - name: parent.pgid
      level: extended
      type: long
      format: string
      description: 'Deprecated for removal in next major version release. This field
        is superseded by `process.group_leader.pid`.

        Identifier of the group of processes the process belongs to.'
      default_field: false
    - name: parent.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: parent.real_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: parent.real_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: parent.real_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: parent.real_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: parent.saved_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: parent.saved_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: parent.saved_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: parent.saved_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: parent.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: parent.supplemental_groups.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: parent.supplemental_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: parent.thread.capabilities.effective
      level: extended
      type: keyword
      ignore_above: 1024
      description: This is the set of capabilities used by the kernel to perform permission
        checks for the thread.
      example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
      pattern: ^(CAP_[A-Z_]+|\d+)$
      default_field: false
    - name: parent.thread.capabilities.permitted
      level: extended
      type: keyword
      ignore_above: 1024
      description: This is a limiting superset for the effective capabilities that
        the thread may assume.
      example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
      pattern: ^(CAP_[A-Z_]+|\d+)$
      default_field: false
    - name: parent.thread.id
      level: extended
      type: long
      format: string
      description: Thread ID.
      example: 4242
      default_field: false
    - name: parent.thread.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Thread name.
      example: thread-0
      default_field: false
    - name: parent.title
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      default_field: false
    - name: parent.tty
      level: extended
      type: object
      description: Information about the controlling TTY device. If set, the process
        belongs to an interactive session.
      default_field: false
    - name: parent.tty.char_device.major
      level: extended
      type: long
      description: The major number identifies the driver associated with the device.
        The character device's major and minor numbers can be algorithmically combined
        to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0".
        For more details, please refer to the Linux kernel documentation.
      example: 4
      default_field: false
    - name: parent.tty.char_device.minor
      level: extended
      type: long
      description: "The minor number is used only by the driver specified by the major\
        \ number; other parts of the kernel don\u2019t use it, and merely pass it\
        \ along to the driver. It is common for a driver to control several devices;\
        \ the minor number provides a way for the driver to differentiate among them."
      example: 1
      default_field: false
    - name: parent.uptime
      level: extended
      type: long
      description: Seconds the process has been up.
      example: 1325
      default_field: false
    - name: parent.user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: parent.user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: parent.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: parent.working_directory
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: The working directory of the process.
      example: /home/alice
      default_field: false
    - name: pe.architecture
      level: extended
      type: keyword
      ignore_above: 1024
      description: CPU architecture target for the file.
      example: x64
      default_field: false
    - name: pe.company
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      default_field: false
    - name: pe.description
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal description of the file, provided at compile-time.
      example: Paint
      default_field: false
    - name: pe.file_version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      default_field: false
    - name: pe.go_import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the Go language imports in a PE file excluding standard
        library imports. An import hash can be used to fingerprint binaries even after
        recompilation or other code-level transformations have occurred, which would
        change more traditional hash values.

        The algorithm used to calculate the Go symbol hash and a reference implementation
        are available [here](https://github.com/elastic/toutoumomoma).'
      example: 10bddcb4cee42080f76c88d9ff964491
      default_field: false
    - name: pe.go_imports
      level: extended
      type: flattened
      description: List of imported Go language element names and types.
      default_field: false
    - name: pe.go_imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: pe.go_imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of Go imports.
      default_field: false
    - name: pe.go_stripped
      level: extended
      type: boolean
      description: Set to true if the file is a Go executable that has had its symbols
        stripped or obfuscated and false if an unobfuscated Go executable.
      default_field: false
    - name: pe.imphash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a PE file. An imphash -- or import hash
        -- can be used to fingerprint binaries even after recompilation or other code-level
        transformations have occurred, which would change more traditional hash values.

        Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.'
      example: 0c6803c4e922103c4dca5963aad36ddf
      default_field: false
    - name: pe.import_hash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the imports in a PE file. An import hash can be used
        to fingerprint binaries even after recompilation or other code-level transformations
        have occurred, which would change more traditional hash values.

        This is a synonym for imphash.'
      example: d41d8cd98f00b204e9800998ecf8427e
      default_field: false
    - name: pe.imports
      level: extended
      type: flattened
      description: List of imported element names and types.
      default_field: false
    - name: pe.imports_names_entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the list of imported element names
        and types.
      default_field: false
    - name: pe.imports_names_var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the list of imported
        element names and types.
      default_field: false
    - name: pe.original_file_name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      default_field: false
    - name: pe.pehash
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A hash of the PE header and data from one or more PE sections.
        An pehash can be used to cluster files by transforming structural information
        about a file into a hash value.

        Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.'
      example: 73ff189b63cd6be375a7ff25179a38d347651975
      default_field: false
    - name: pe.product
      level: extended
      type: keyword
      ignore_above: 1024
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      default_field: false
    - name: pe.sections
      level: extended
      type: nested
      description: 'An array containing an object for each section of the PE file.

        The keys that should be present in these objects are defined by sub-fields
        underneath `pe.sections.*`.'
      default_field: false
    - name: pe.sections.entropy
      level: extended
      type: long
      format: number
      description: Shannon entropy calculation from the section.
      default_field: false
    - name: pe.sections.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: PE Section List name.
      default_field: false
    - name: pe.sections.physical_size
      level: extended
      type: long
      format: bytes
      description: PE Section List physical size.
      default_field: false
    - name: pe.sections.var_entropy
      level: extended
      type: long
      format: number
      description: Variance for Shannon entropy calculation from the section.
      default_field: false
    - name: pe.sections.virtual_size
      level: extended
      type: long
      format: string
      description: PE Section List virtual size. This is always the same as `physical_size`.
      default_field: false
    - name: pgid
      level: extended
      type: long
      format: string
      description: 'Deprecated for removal in next major version release. This field
        is superseded by `process.group_leader.pid`.

        Identifier of the group of processes the process belongs to.'
    - name: pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
    - name: previous.args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
      default_field: false
    - name: previous.args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: previous.executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      default_field: false
    - name: real_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: real_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: real_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: real_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: saved_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: saved_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: saved_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: saved_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: session_leader.args
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example: '["/usr/bin/ssh", "-l", "user", "10.0.0.16"]'
      default_field: false
    - name: session_leader.args_count
      level: extended
      type: long
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      default_field: false
    - name: session_leader.command_line
      level: extended
      type: wildcard
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      default_field: false
    - name: session_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: session_leader.executable
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      default_field: false
    - name: session_leader.group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: session_leader.group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: session_leader.interactive
      level: extended
      type: boolean
      description: 'Whether the process is connected to an interactive shell.

        Process interactivity is inferred from the processes file descriptors. If
        the character device for the controlling tty is the same as stdin and stderr
        for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is
        simply one that does not have open file descriptors reading the controlling
        TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A
        backgrounded process is still considered interactive if stdin and stderr are
        connected to the controlling TTY.'
      example: true
      default_field: false
    - name: session_leader.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      default_field: false
    - name: session_leader.parent.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: session_leader.parent.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: session_leader.parent.session_leader.entity_id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      default_field: false
    - name: session_leader.parent.session_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: session_leader.parent.session_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: session_leader.parent.session_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: session_leader.parent.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: session_leader.parent.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: session_leader.pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
      default_field: false
    - name: session_leader.real_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: session_leader.real_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: session_leader.real_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: session_leader.real_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: session_leader.same_as_process
      level: extended
      type: boolean
      description: 'This boolean is used to identify if a leader process is the same
        as the top level process.

        For example, if `process.group_leader.same_as_process = true`, it means the
        process event in question is the leader of its process group. Details under
        `process.*` like `pid` would be the same under `process.group_leader.*` The
        same applies for both `process.session_leader` and `process.entry_leader`.

        This field exists to the benefit of EQL and other rule engines since it''s
        not possible to compare equality between two fields in a single document.
        e.g `process.entity_id` = `process.group_leader.entity_id` (top level process
        is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id`
        (top level process is the entry session leader)

        Instead these rules could be written like: `process.group_leader.same_as_process:
        true` OR `process.entry_leader.same_as_process: true`

        Note: This field is only set on `process.entry_leader`, `process.session_leader`
        and `process.group_leader`.'
      example: true
      default_field: false
    - name: session_leader.saved_group.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: session_leader.saved_group.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: session_leader.saved_user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: session_leader.saved_user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: session_leader.start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      default_field: false
    - name: session_leader.supplemental_groups.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: session_leader.supplemental_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: session_leader.tty
      level: extended
      type: object
      description: Information about the controlling TTY device. If set, the process
        belongs to an interactive session.
      default_field: false
    - name: session_leader.tty.char_device.major
      level: extended
      type: long
      description: The major number identifies the driver associated with the device.
        The character device's major and minor numbers can be algorithmically combined
        to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0".
        For more details, please refer to the Linux kernel documentation.
      example: 4
      default_field: false
    - name: session_leader.tty.char_device.minor
      level: extended
      type: long
      description: "The minor number is used only by the driver specified by the major\
        \ number; other parts of the kernel don\u2019t use it, and merely pass it\
        \ along to the driver. It is common for a driver to control several devices;\
        \ the minor number provides a way for the driver to differentiate among them."
      example: 1
      default_field: false
    - name: session_leader.user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: session_leader.user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: session_leader.vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: session_leader.working_directory
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: The working directory of the process.
      example: /home/alice
      default_field: false
    - name: start
      level: extended
      type: date
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
    - name: supplemental_groups.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Unique identifier for the group on the system/platform.
      default_field: false
    - name: supplemental_groups.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the group.
      default_field: false
    - name: thread.capabilities.effective
      level: extended
      type: keyword
      ignore_above: 1024
      description: This is the set of capabilities used by the kernel to perform permission
        checks for the thread.
      example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
      pattern: ^(CAP_[A-Z_]+|\d+)$
      default_field: false
    - name: thread.capabilities.permitted
      level: extended
      type: keyword
      ignore_above: 1024
      description: This is a limiting superset for the effective capabilities that
        the thread may assume.
      example: '["CAP_BPF", "CAP_SYS_ADMIN"]'
      pattern: ^(CAP_[A-Z_]+|\d+)$
      default_field: false
    - name: thread.id
      level: extended
      type: long
      format: string
      description: Thread ID.
      example: 4242
    - name: thread.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Thread name.
      example: thread-0
    - name: title
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
        default_field: false
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
    - name: tty
      level: extended
      type: object
      description: Information about the controlling TTY device. If set, the process
        belongs to an interactive session.
      default_field: false
    - name: tty.char_device.major
      level: extended
      type: long
      description: The major number identifies the driver associated with the device.
        The character device's major and minor numbers can be algorithmically combined
        to produce the more familiar terminal identifiers such as "ttyS0" and "pts/0".
        For more details, please refer to the Linux kernel documentation.
      example: 4
      default_field: false
    - name: tty.char_device.minor
      level: extended
      type: long
      description: "The minor number is used only by the driver specified by the major\
        \ number; other parts of the kernel don\u2019t use it, and merely pass it\
        \ along to the driver. It is common for a driver to control several devices;\
        \ the minor number provides a way for the driver to differentiate among them."
      example: 1
      default_field: false
    - name: tty.columns
      level: extended
      type: long
      description: 'The number of character columns per line. e.g terminal width

        Terminal sizes can change, so this value reflects the maximum value for a
        given IO event. i.e. where event.action = ''text_output'''
      example: 80
      default_field: false
    - name: tty.rows
      level: extended
      type: long
      description: 'The number of character rows in the terminal. e.g terminal height

        Terminal sizes can change, so this value reflects the maximum value for a
        given IO event. i.e. where event.action = ''text_output'''
      example: 24
      default_field: false
    - name: uptime
      level: extended
      type: long
      description: Seconds the process has been up.
      example: 1325
    - name: user.id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      default_field: false
    - name: user.name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
      description: Short name or login of the user.
      example: a.einstein
      default_field: false
    - name: vpid
      level: core
      type: long
      format: string
      description: 'Virtual process id.

        The process id within a pid namespace. This is not necessarily unique across
        all processes on the host but it is unique within the process namespace that
        the process exists within.'
      example: 4242
      default_field: false
    - name: working_directory
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
      - name: text
        type: match_only_text
        default_field: false
      description: The working directory of the process.
      example: /home/alice
