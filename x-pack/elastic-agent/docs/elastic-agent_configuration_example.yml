outputs:
  default:
    type: elasticsearch
    api_key: VuaCfGcBCdbkQm-e5aOx:ui2lp2axTNmsyakw9tvNnw
    hosts: ["localhost:9200"]
    ca_sha256: "7lHLiyp4J8m9kw38SJ7SURJP4bXRZv/BNxyyXkCcE/M="
    # Not supported at first
    queue:
      type: disk

  long_term_storage:
    type: elasticsearch
    api_key: VuaCfGcBCdbkQm-e5aOx:ui2lp2axTNmsyakw9tvNnw
    hosts: ["localhost:9200"]
    ca_sha256: "7lHLiyp4J8m9kw38SJ7SURJP4bXRZv/BNxyyXkCcE/M="
    queue:
      type: disk

  monitoring:
    type: elasticsearch
    api_key: VuaCfGcBCdbkQm-e5aOx:ui2lp2axTNmsyakw9tvNnw
    hosts: ["localhost:9200"]
    ca_sha256: "7lHLiyp4J8m9kw38SJ7SURJP4bXRZv/BNxyyXkCcE/M="

agent.monitoring:
  # enabled turns on monitoring of running processes
  enabled: true
  # enables log monitoring
  logs: true
  # enables metrics monitoring
  metrics: true


# Logging

# There are four options for the log output: file, stderr, syslog, eventlog
# The file output is the default.

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#agent.logging.level: info

# Enable debug output for selected components. To enable all selectors use ["*"]
# Other available selectors are "beat", "publish", "service"
# Multiple selectors can be chained.
#agent.logging.selectors: [ ]

# Send all logging output to stderr. The default is false.
agent.logging.to_stderr: true

# Send all logging output to syslog. The default is false.
#agent.logging.to_syslog: false

# Send all logging output to Windows Event Logs. The default is false.
#agent.logging.to_eventlog: false

# If enabled, Elastic-Agent periodically logs its internal metrics that have changed
# in the last period. For each metric that changed, the delta from the value at
# the beginning of the period is logged. Also, the total values for
# all non-zero internal metrics are logged on shutdown. The default is true.
#agent.logging.metrics.enabled: true

# The period after which to log the internal metrics. The default is 30s.
#agent.logging.metrics.period: 30s

# Logging to rotating files. Set logging.to_files to false to disable logging to
# files.
#agent.logging.to_files: true
#agent.logging.files:
  # Configure the path where the logs are written. The default is the logs directory
  # under the home path (the binary location).
  #path: /var/log/elastic-agent

  # The name of the files where the logs are written to.
  #name: elastic-agent

  # Configure log file size limit. If limit is reached, log file will be
  # automatically rotated
  #rotateeverybytes: 10485760 # = 10MB

  # Number of rotated log files to keep. Oldest files will be deleted first.
  #keepfiles: 7

  # The permissions mask to apply when rotating log files. The default value is 0600.
  # Must be a valid Unix-style file permissions mask expressed in octal notation.
  #permissions: 0600

  # Enable log file rotation on time intervals in addition to size-based rotation.
  # Intervals must be at least 1s. Values of 1m, 1h, 24h, 7*24h, 30*24h, and 365*24h
  # are boundary-aligned with minutes, hours, days, weeks, months, and years as
  # reported by the local system clock. All other intervals are calculated from the
  # Unix epoch. Defaults to disabled.
  #interval: 0

  # Rotate existing logs on startup rather than appending to the existing
  # file. Defaults to true.
  # rotateonstartup: true

# Set to true to log messages in JSON format.
#agent.logging.json: false

# Set to true, to log messages with minimal required Elastic Common Schema (ECS)
# information. Recommended to use in combination with `logging.json=true`
# Defaults to false.
#agent.logging.ecs: false


inputs:
  - type: logfile
    name: epm/nginx
    version: 1.7.0
    data_stream.namespace: prod
    # constraints are still Experimental and should not be used in production.
    constraints?:
      # Contraints look are not final
      - os.platform: { in: "windows" }
      - agent.version: { ">=": "8.0.0" }
    use_output: long_term_storage
    processors?:
    streams:
      - id?: {id}
        enabled?: true # default to true
        data_stream.dataset: nginx.acccess
        paths: /var/log/nginx/access.log
      - id?: {id}
        enabled?: true # default to true
        data_stream.dataset: nginx.error
        paths: /var/log/nginx/error.log
  - type: nginx/metricspackage?:
    name: epm/nginx
    version: 1.7.0
    data_stream.namespace: prod
    # constraints are still Experimental and should not be used in production.
    constraints?:
      # Contraints look are not final
      - os.platform: { in: "windows" }
      - agent.version: { ">=": "8.0.0" }
    use_output: long_term_storage
    streams:
      - id?: {id}
        enabled?: true # default to true
        data_stream.dataset: nginx.stub_status
        metricset: stub_status

#################################################################################################
# Custom Kafka datasource
inputs:
  - type: kafka
    id: kafka-x1
    title: "Consume data from kafka"
    data_stream.namespace: prod
    use_output: long_term_storage
    host: localhost:6566
    streams:
      - data_stream.dataset: foo.dataset
        topic: foo
        processors:
          - extract_bro_specifics


#################################################################################################
# System EPM package
inputs:
  - type: system/metrics
    id?: system
    title: Collect system information and metrics
    package:
      name: epm/system
      version: 1.7.0
    streams:
      - id?: {id}
        enabled?: false # default true
        metricset: cpu
        data_stream.dataset: system.cpu
        metrics: ["percentages", "normalized_percentages"]
        period: 10s
      - metricset: memory
        data_stream.dataset: system.memory
        period: 10s
      - metricset: diskio
        data_stream.dataset: system.diskio
        period: 10s
      - metricset: load
        data_stream.dataset: system.load
        period: 10s
      - metricset: memory
        data_stream.dataset: system.memory
        period: 10s
      - metricset: process
        data_stream.dataset: system.process
        processes: ["firefox*"]
        include_top_n:
          by_cpu: 5      # include top 5 processes by CPU
          by_memory: 5   # include top 5 processes by memory
        period: 10s
      - metricset: process_summary
        data_stream.dataset: system.process_summary
        period: 10s
      - metricset: uptime
        data_stream.dataset: system.uptime
        period: 15m
      - metricset: socket_summary
        data_stream.dataset: system.socket_summary
        period: 10s
      - metricset: filesystem
        data_stream.dataset: system.filesystem
        period: 10s
      - metricset: raid
        data_stream.dataset: system.raid
        period: 10s
      - metricset: socket
        data_stream.dataset: system.socket
        period: 10s
      - metricset: service
        data_stream.dataset: system.service
        period: 10s
      - metricset: fsstat
        data_stream.dataset: system.fsstat
        period: 10s
      - metricset: foo
        data_stream.dataset: system.foo
        period: 10s


#################################################################################################
# Elasticsearch package example
inputs:
    - type: log
      id?: my-endpoint
      title: Collect Elasticsearch information
      package:
        name: epm/elasticsearch
        version: 1.7.0
      streams:
      - id?: {id}
        enabled?: true # default to true
        data_stream.dataset: elasticsearch.audit
        paths: [/var/log/elasticsearch/*_access.log, /var/log/elasticsearch/*_audit.log]
      - id?: {id}
        enabled?: true
        data_stream.dataset: elasticsearch.deprecation
        paths: [/var/log/elasticsearch/*_deprecation.log]
      - id?: {id}
        enabled?: true
        data_stream.dataset: elasticsearch.gc
        paths: [/var/log/elasticsearch/*_gc.log, /var/log/elasticsearch/*_gc.log.[0-9]*]
      - id?: {id}
        enabled?: true
        data_stream.dataset: elasticsearch.server
        paths: [/var/log/elasticsearch/*.log]
      - id?: {id}
        enabled?: true
        data_stream.dataset: elasticsearch.slowlog
        paths: [/var/log/elasticsearch/*_index_search_slowlog.log, /var/log/elasticsearch/*_index_indexing_slowlog.log]
    - type: elasticsearch/metrics
      id?: my-endpoint
      title: Collect Elasticsearch information
      package:
        name: epm/elasticsearch
        version: 1.7.0
      hosts: ["http://localhost:9200"]
      hosts: ["http://localhost:9200"]
      # api_key: xxxx
      # username: elastic
      # password: changeme
      # ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]
      # ssl.ca_sha256: BxZ...
      # ssl.certificate: ...
      # ssl.key: ...
      xpack.enabled: true
      streams:
      - id?: {id}
        metricset: ccr
        data_stream.dataset: elasticseach.ccr
        period: 10s
      - id?: {id}
        metricset: cluster_stats
        data_stream.dataset: elasticseach.cluster_stats
        period: 10s
      - id?: {id}
        metricset: enrich
        data_stream.dataset: elasticseach.enrich
        period: 10s
      - id?: {id}
        metricset: index
        data_stream.dataset: elasticseach.index
        period: 10s
      - id?: {id}
        metricset: index_recovery
        data_stream.dataset: elasticseach.index_recovery
        active_only: true
        period: 10s
      - id?: {id}
        metricset: ml_jobs
        data_stream.dataset: elasticseach.ml_jobs
        period: 10s
      - id?: {id}
        metricset: node_stats
        data_stream.dataset: elasticseach.node_stats
        period: 10s
      - id?: {id}
        metricset: shard
        data_stream.dataset: elasticseach.shard
        period: 10s

#################################################################################################
# AWS module
inputs:
  # Looking at the AWS modules, I believe each fileset need to be in their own
  # buckets?
  - type: s3
    id?: my-aws
    title: Collect AWS
    package:
      name: epm/aws
      version: 1.7.0
    credential_profile_name: fb-aws
    #shared_credential_file: /etc/filebeat/aws_credentials
    streams:
    - id?: {id}
      data_stream.dataset: aws.s3
      queue_url: https://sqs.myregion.amazonaws.com/123456/sqs-queue
    - id?: {id}
      data_stream.dataset: aws.s3access
      queue_url: https://sqs.myregion.amazonaws.com/123456/sqs-queue
    - id?: {id}
      data_stream.dataset: aws.vpcflow
      queue_url: https://sqs.myregion.amazonaws.com/123456/sqs-queue
    - id?: {id}
      data_stream.dataset: aws.cloudtrail
      queue_url: https://sqs.myregion.amazonaws.com/123456/sqs-queue
  - type: aws/metrics
    id?: my-aws
    title: Collect AWS
    package:
      name: epm/aws
      version: 1.7.0
    access_key_id: '${AWS_ACCESS_KEY_ID:""}'
    secret_access_key: '${AWS_SECRET_ACCESS_KEY:""}'
    session_token: '${AWS_SESSION_TOKEN:""}'
    #credential_profile_name: test-mb
    #shared_credential_file: ...
    streams:
    - id?: {id}
      metricset: usage
      data_stream.dataset: aws.usage
      period: 5m
    - id?: {id}
      metricset: cloudwatch
      data_stream.dataset: aws.cloudwatch
      period: 5m
      name: ["CPUUtilization", "DiskWriteOps"]
      resource_type: ec2:instance
      #dimensions:
      #  - name: InstanceId
      #    value: i-0686946e22cf9494a
      statistic: ["Average", "Maximum"]
    - id?: {id}
      metricset: ebs
      data_stream.dataset: aws.ebs
      period: 5m
    - id?: {id}
      metricset: ec2
      data_stream.dataset: aws.ec2
      period: 5m
    - id?: {id}
      metricset: elb
      data_stream.dataset: aws.elb
      period: 5m
    - id?: {id}
      metricset: sns
      data_stream.dataset: aws.sns
      period: 5m
    - id?: {id}
      metricset: sqs
      data_stream.dataset: aws.sqs
      period: 5m
    - id?: {id}
      metricset: rds
      data_stream.dataset: aws.rds
      period: 5m
    - id?: {id}
      metricset: billing
      data_stream.dataset: aws.billing
      period: 12h
    - id?: {id}
      metricset: billing
      data_stream.dataset: aws.billing
      period: 12h
    - id?: {id}
      metricset: s3_daily_storage
      data_stream.dataset: aws.s3_daily_storage
      period: 24h
    - id?: {id}
      metricset: s3_request
      data_stream.dataset: aws.s3_request
      period: 24h


#################################################################################################
# Kubernetes
inputs:
  - type: kubernetes-node/metrics
    id?: my-kubernetes
    title: Collect Kubernetes
    package:
      name: epm/kubernetes
      version: 1.7.0
    hosts: ["localhost:10250"]
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    ssl.certificate_authorities:
      - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
    # username: "user"
    # password: "secret"
    # If kube_config is not set, KUBECONFIG environment variable will be checked
    # and if not present it will fall back to InCluster
    # kube_config: ~/.kube/config
    streams:
      - id?: {id}
        metricset: node
        data_stream.dataset: kubernetes.node
        period: 10s
      - id?: {id}
        metricset: system
        data_stream.dataset: kubernetes.system
        period: 10s
      - id?: {id}
        metricset: pod
        data_stream.dataset: kubernetes.pod
        period: 10s
      - id?: {id}
        metricset: container
        data_stream.dataset: kubernetes.container
        period: 10s
      - id?: {id}
        metricset: container
        data_stream.dataset: kubernetes.container
        period: 10s
      - id?: {id}
        metricset: event
        data_stream.dataset: kubernetes.event
        period: 10s
  - type: kubernetes-state/metrics
    id?: my-kubernetes
    title: Collect Kubernetes
    package:
      name: epm/kubernetes
      version: 1.7.0
    hosts: ["kube-state-metrics:8080"]
    streams:
      - id?: {id}
        metricset: state_node
        data_stream.dataset: kubernetes.node
        period: 10s
      - id?: {id}
        metricset: state_deployment
        data_stream.dataset: kubernetes.deployment
        period: 10s
      - id?: {id}
        metricset: state_replicaset
        data_stream.dataset: kubernetes.replicaset
        period: 10s
      - id?: {id}
        metricset: state_statefulset
        data_stream.dataset: kubernetes.statefulset
        period: 10s
      - id?: {id}
        metricset: state_pod
        data_stream.dataset: kubernetes.pod
        period: 10s
      - id?: {id}
        metricset: state_container
        data_stream.dataset: kubernetes.container
        period: 10s
      - id?: {id}
        metricset: state_container
        data_stream.dataset: kubernetes.container
        period: 10s
      - id?: {id}
        metricset: state_cronjob
        data_stream.dataset: kubernetes.cronjob
        period: 10s
      - id?: {id}
        metricset: state_resourcequota
        data_stream.dataset: kubernetes.resourcequota
        period: 10s
      - id?: {id}
        metricset: state_service
        data_stream.dataset: kubernetes.service
        period: 10s
      - id?: {id}
        metricset: state_persistentvolume
        data_stream.dataset: kubernetes.persistentvolume
        period: 10s
      - id?: {id}
        metricset: state_persistentvolumeclaim
        data_stream.dataset: kubernetes.persistentvolumeclaim
        period: 10s

#################################################################################################
# Docker
inputs:
  - type: docker/metrics
    id?: my-docker
    title: Collect docker
    package:
      name: epm/docker
      version: 1.7.0
    hosts: ["localhost:10250"]
    #labels.dedot: false

    # To connect to Docker over TLS you must specify a client and CA certificate.
    #ssl:
      #certificate_authority: "/etc/pki/root/ca.pem"
      #certificate:           "/etc/pki/client/cert.pem"
      #key:                   "/etc/pki/client/cert.key"
    streams:
      - id?: {id}
        metricset: container
        data_stream.dataset: docker.container
        period: 10s
      - id?: {id}
        metricset: cpu
        data_stream.dataset: docker.cpu
        period: 10s
      - id?: {id}
        metricset: diskio
        data_stream.dataset: docker.diskio
        period: 10s
      - id?: {id}
        metricset: event
        data_stream.dataset: docker.event
        period: 10s
      - id?: {id}
        metricset: healthcheck
        data_stream.dataset: docker.healthcheck
        period: 10s
      - id?: {id}
        metricset: info
        data_stream.dataset: docker.info
        period: 10s
      - id?: {id}
        metricset: memory
        data_stream.dataset: docker.memory
        period: 10s
      - id?: {id}
        metricset: network
        data_stream.dataset: docker.network
        period: 10s

#################################################################################################
### Suricata
#
inputs:
  - type: log
    id?: suricata-x1
    title: Suricata's data
    data_stream.namespace: "abc"
    package:
      name: suricata
      version: x.x.x
    streams:
      -  id?: {id}
        type: "typeX"
        data_stream.dataset: suricata.logs
        path: /var/log/surcata/eve.json

#################################################################################################
### suggestion 1
inputs:
  - type: endpoint # Reserved key word
    id?: myendpoint-x1
    title: Endpoint configuration
    data_stream.namespace: "canada"
    package:
      name: endpoint
      version: xxx
    streams:
      - type: malware
        detect: true
        prevent: false
        notify_user: false
        threshold: recommended
        platform: windows

      - type: eventing
        api: true
        clr: false
        dll_and_driver_load: false
        dns: true
        file: false
        platform: windows

      - type: malware
        detect: true
        prevent: false
        notify_user: false
        threshold: recommended
        platform: mac

      - type: eventing
        api: true
        clr: false
        dll_and_driver_load: false
        dns: true
        file: false
        platform: mac

      - type: malware
        detect: true
        prevent: false
        notify_user: false
        threshold: recommended
        platform: linux

      - type: eventing
        api: true
        clr: false
        dll_and_driver_load: false
        dns: true
        file: false
        platform: linux

#################################################################################################
### suggestion 2
inputs:
  - type: endpoint # Reserved key word
    id?: myendpoint-1
    title: Endpoint configuration
    data_stream.namespace: "canada"
    package:
      name: epm/endpoint # This establish the link with the package and will allow to link it to endpoint app.
      version: xxx
    windows:
        eventing:
            api: true
            clr: false
            dll_and_driver_load: false
            dns: true
              ...
            file: false
        malware:
            detect: true
            prevent: false
            notify_user: false
            threshold: recommended
    mac:
        eventing:
            file: true
            network: false
            process: false
            ...
        malware:
            detect: true
            prevent: false
            notify_user: false
            threshold: recommended
      linux:
        eventing:
            file: true
            network: false
            process: false
