// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/elastic-agent/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/cloudbeat.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
