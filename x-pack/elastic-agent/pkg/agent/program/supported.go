// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
