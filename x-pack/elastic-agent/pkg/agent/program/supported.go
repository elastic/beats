// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/elastic-agent/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/cloudbeat.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
