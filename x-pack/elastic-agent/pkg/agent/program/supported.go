// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
