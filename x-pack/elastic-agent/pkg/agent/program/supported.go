// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
