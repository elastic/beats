// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/elastic-agent/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/cloudbeat.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
