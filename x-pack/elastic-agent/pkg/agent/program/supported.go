// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
