// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
