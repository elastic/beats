version: 1.0

defaults:
  type: string
  required: false
  index: not_analyzed
  doc_values: true
  ignore_above: 1024

env:
  type: group
  description: >
      These fields contain data about the environment in which the
      transaction was captured.
  fields:
    - name: beat.name
      description: >
        Name of the Beat sending the events. If the shipper name is set
        in the configuration file, then that value is used. If it is not set,
        the hostname is used.

    - name: beat.hostname
      description: >
        The hostname as returned by the operating system on which the Beat is
        running.

    - name: server
      description: >
        The name of the server that served the transaction.

    - name: client_server
      description: >
        The name of the server that initiated the transaction.

    - name: service
      description: >
        The name of the logical service that served the transaction.

    - name: client_service
      description: >
        The name of the logical service that initiated the transaction.

    - name: ip
      description: >
        The IP address of the server that served the transaction.
      format: dotted notation.

    - name: client_ip
      description: >
        The IP address of the server that initiated the transaction.
      format: dotted notation.

    - name: real_ip
      description: >
        If the server initiating the transaction is a proxy, this field
        contains the original client IP address.
        For HTTP, for example, the IP address extracted from a configurable
        HTTP header, by default `X-Forwarded-For`.

        Unless this field is disabled, it always has a value, and it matches
        the `client_ip` for non proxy clients.
      format: Dotted notation.

    - name: client_location
      type: geo_point
      example: "40.715, -74.011"
      description: >
        The GeoIP location of the `real_ip` IP address or of the
        `client_ip` address if the `real_ip` is disabled. The field is a string
        containing the latitude and longitude separated by a comma.

    - name: client_port
      description: >
        The layer 4 port of the process that initiated the transaction.
      format: dotted notation.

    - name: transport
      description: >
        The transport protocol used for the transaction. If not specified, then
        tcp is assumed.
      example: udp

    - name: port
      description: >
        The layer 4 port of the process that served the transaction.
      format: dotted notation.

    - name: proc
      description: >
        The name of the process that served the transaction.

    - name: client_proc
      description: >
        The name of the process that initiated the transaction.

    - name: release
      description: >
        The software release of the service serving the transaction.
        This can be the commit id or a semantic version.

    - name: tags
      description: >
        Arbitrary tags that can be set per Beat and per transaction
        type.

event:
  type: group
  description: >
    These fields contain data about the transaction itself.
  fields:
    - name: "@timestamp"
      type: date
      required: true
      format: YYYY-MM-DDTHH:MM:SS.milliZ
      example: 2015-01-24T14:06:05.071Z
      description: >
        The timestamp of the event, as measured either by the Beat or
        by a common collector point. The precision is in milliseconds.
        The timezone is UTC.

    - name: type
      description: >
        The type of the transaction (for example, HTTP, MySQL, Redis, or RUM).
      required: true

    - name: count
      type: int
      description: >
        A count of the number of transactions that this event represents. This
        is generally the inverse of the sampling rate. For example, for
        a sample rate of 1/10, the count is 10. The count is used by the
        UIs to return estimated values.
      required: true

    - name: direction
      required: true
      description: >
        Indicates whether the transaction is inbound (emitted by server)
        or outbound (emitted by the client). Values can be in or out. No defaults.
      possible_values:
        - in
        - out

    - name: status
      description: >
        The high level status of the transaction. The way to compute this
        value depends on the protocol, but the result has a meaning
        independent of the protocol.
      required: true
      possible_values:
        - OK
        - Error
        - Server Error
        - Client Error

    - name: method
      description: >
        The command/verb/method of the transaction. For HTTP, this is the
        method name (GET, POST, PUT, and so on), for SQL this is the verb (SELECT,
        UPDATE, DELETE, and so on).

    - name: resource
      description: >
        The logical resource that this transaction refers to. For HTTP, this is
        the URL path up to the last slash (/). For example, if the URL is `/users/1`,
        the resource is `/users`. For databases, the resource is typically the
        table name. The field is not filled for all transaction types.

    - name: path
      required: true
      description: >
        The path the transaction refers to. For HTTP, this is the URL.
        For SQL databases, this is the table name. For key-value stores, this
        is the key.

    - name: query
      type: string
      ignore_above: 0
      index: not_analyzed
      doc_values: true
      description: >
        The query in a human readable format. For HTTP, it will typically be
        something like `GET /users/_search?name=test`. For MySQL, it is
        something like `SELECT id from users where name=test`.

    - name: params
      index: analyzed
      description: >
        The request parameters. For HTTP, these are the POST or GET parameters.
        For Thrift-RPC, these are the parameters from the request.

    - name: notes
      description: >
        Messages from Packetbeat itself. This field usually contains error messages for
        interpreting the raw data. This information can be helpful for troubleshooting.

    - name: dns
      type: group
      description: DNS-specific event fields.
      fields:
        - name: dns.id
          type: int
          description: >
            The DNS packet identifier assigned by the program that generated the
            query. The identifier is copied to the response.

        - name: dns.op_code
          description: >
            The DNS operation code that specifies the kind of query in the message.
            This value is set by the originator of a query and copied into the
            response.
          example: QUERY

        - name: dns.flags.authoritative
          type: bool
          description: >
            A DNS flag specifying that the responding server is an authority for
            the domain name used in the question.

        - name: dns.flags.recursion_allowed
          type: bool
          description: >
            A DNS flag specifying whether recursive query support is available in the
            name server.

        - name: dns.flags.recursion_desired
          type: bool
          description: >
            A DNS flag specifying that the client directs the server to pursue a
            query recursively. Recursive query support is optional.

        - name: dns.flags.truncated_response
          type: bool
          description: >
            A DNS flag specifying that only the first 512 bytes of the reply were
            returned.

        - name: dns.response_code
          description: The DNS status code.
          example: NOERROR

        - name: dns.question.name
          description: >
            The domain name being queried. If the name field contains non-printable
            characters (below 32 or above 126), then those characters are represented
            as escaped base 10 integers (\DDD). Back slashes and quotes are escaped.
            Tabs, carriage returns, and line feeds are converted to \t, \r, and
            \n respectively.
          example: www.google.com

        - name: dns.question.type
          description: The type of records being queried.
          example: AAAA

        - name: dns.question.class
          description: The class of of records being queried.
          example: IN

        - name: dns.answers_count
          type: int
          description: >
            The number of resource records contained in the `dns.answers` field.

        - name: dns.answers.name
          description: The domain name to which this resource record pertains.
          example: example.com

        - name: dns.answers.type
          description: The type of data contained in this resource record.
          example: MX

        - name: dns.answers.class
          description: The class of DNS data contained in this resource record.
          example: IN

        - name: dns.answers.ttl
          description: >
            The time interval in seconds that this resource record may be cached
            before it should be discarded. Zero values mean that the data should 
            not be cached.
          type: int

        - name: dns.answers.data
          description: >
            The data describing the resource. The meaning of this data depends
            on the type and class of the resource record.

        - name: dns.authorities
          type: dict
          description: >
            An array containing a dictionary for each authority section from the
            answer.

        - name: dns.authorities_count
          type: int
          description: >
            The number of resource records contained in the `dns.authorities` field.
            The `dns.authorities` field may or may not be included depending on the
            configuration of Packetbeat.

        - name: dns.authorities.name
          description: The domain name to which this resource record pertains.
          example: example.com

        - name: dns.authorities.type
          description: The type of data contained in this resource record.
          example: NS

        - name: dns.authorities.class
          description: The class of DNS data contained in this resource record.
          example: IN

        - name: dns.answers
          type: dict
          description: >
            An array containing a dictionary about each answer section returned by
            the server.

        - name: dns.answers.ttl
          description: >
            The time interval in seconds that this resource record may be cached
            before it should be discarded. Zero values mean that the data should 
            not be cached.
          type: int

        - name: dns.answers.data
          description: >
            The data describing the resource. The meaning of this data depends
            on the type and class of the resource record.

        - name: dns.additionals
          type: dict
          description: >
            An array containing a dictionary for each additional section from the
            answer.

        - name: dns.additionals_count
          type: int
          description: >
            The number of resource records contained in the `dns.additionals` field.
            The `dns.additionals` field may or may not be included depending on the
            configuration of Packetbeat.

        - name: dns.additionals.name
          description: The domain name to which this resource record pertains.
          example: example.com

        - name: dns.additionals.type
          description: The type of data contained in this resource record.
          example: NS

        - name: dns.additionals.class
          description: The class of DNS data contained in this resource record.
          example: IN

        - name: dns.additionals.ttl
          description: >
            The time interval in seconds that this resource record may be cached
            before it should be discarded. Zero values mean that the data should 
            not be cached.
          type: int

        - name: dns.additionals.data
          description: >
            The data describing the resource. The meaning of this data depends
            on the type and class of the resource record.

    - name: http
      type: group
      description: HTTP-specific event fields.
      fields:
        - name: http.code
          description: The HTTP status code.
          example: 404

        - name: http.phrase
          description: The HTTP status phrase.
          example: Not found.

        - name: http.request_headers
          type: dict
          description: >
            A map containing the captured header fields from the request. 
            Which headers to capture is configurable. If headers with the same
            header name are present in the message, they will be separated by
            commas.

        - name: http.response_headers
          type: dict
          description: >
            A map containing the captured header fields from the response. 
            Which headers to capture is configurable. If headers with the
            same header name are present in the message, they will be separated
            by commas.

        - name: http.content_length
          type: int
          description: >
            The value of the Content-Length header if present.

    - name: memcache
      type: group
      description: Memcached-specific event fields
      fields:
        - name: memcache.protocol_type
          type: string
          description: >
            The memcache protocol implementation. The value can be "binary" 
            for binary-based, "text" for text-based, or "unknown" for an unknown 
            memcache protocol type.

        - name: memcache.request.line
          type: string
          description: >
            The raw command line for unknown commands ONLY.

        - name: memcache.request.command
          type: string
          description: >
            The memcache command being requested in the memcache text protocol.
            For example "set" or "get".
            The binary protocol opcodes are translated into memcache text protocol
            commands.

        - name: memcache.response.command
          type: string
          description: >
            Either the text based protocol response message type
            or the name of the originating request if binary protocol is used.

        - name: memcache.request.type
          type: string
          description: >
            The memcache command classification. This value can be "UNKNOWN", "Load",
            "Store", "Delete", "Counter", "Info", "SlabCtrl", "LRUCrawler",
            "Stats", "Success", "Fail", or "Auth".

        - name: memcache.response.type
          type: string
          description: >
            The memcache command classification. This value can be "UNKNOWN", "Load",
            "Store", "Delete", "Counter", "Info", "SlabCtrl", "LRUCrawler",
            "Stats", "Success", "Fail", or "Auth".
            The text based protocol will employ any of these, whereas the
            binary based protocol will mirror the request commands only (see
            `memcache.response.status` for binary protocol).

        - name: memcache.response.error_msg
          type: string
          description: >
            The optional error message in the memcache response (text based protocol only).

        - name: memcache.request.opcode
          type: string
          description: >
            The binary protocol message opcode name.

        - name: memcache.response.opcode
          type: string
          description: >
            The binary protocol message opcode name.

        - name: memcache.request.opcode_value
          type: int
          description: >
            The binary protocol message opcode value.

        - name: memcache.response.opcode_value
          type: int
          description: >
            The binary protocol message opcode value.

        - name: memcache.request.opaque
          type: int
          description: >
            The binary protocol opaque header value used for correlating request
            with response messages.

        - name: memcache.response.opaque
          type: int
          description: >
            The binary protocol opaque header value used for correlating request
            with response messages.

        - name: memcache.request.vbucket
          type: int
          description: >
            The vbucket index sent in the binary message.

        - name: memcache.response.status
          type: string
          description: >
            The textual representation of the response error code
            (binary protocol only).

        - name: memcache.response.status_code
          type: int
          description: >
            The status code value returned in the response (binary protocol only).

        - name: memcache.request.keys
          type: list
          description: >
            The list of keys sent in the store or load commands.

        - name: memcache.response.keys
          type: list
          description: >
            The list of keys returned for the load command (if present).

        - name: memcache.request.count_values
          type: int
          description: >
            The number of values found in the memcache request message.
            If the command does not send any data, this field is missing.

        - name: memcache.response.count_values
          type: int
          description: >
            The number of values found in the memcache response message.
            If the command does not send any data, this field is missing.

        - name: memcache.request.values
          type: list
          description: >
            The list of base64 encoded values sent with the request (if present).

        - name: memcache.response.values
          type: list
          description: >
            The list of base64 encoded values sent with the response (if present).

        - name: memcache.request.bytes
          type: int
          description: >
            The byte count of the values being transfered.

        - name: memcache.response.bytes
          type: int
          description: >
            The byte count of the values being transfered.

        - name: memcache.request.delta
          type: int
          description: >
            The counter increment/decrement delta value.

        - name: memcache.request.initial
          type: int
          description: >
            The counter increment/decrement initial value parameter (binary protocol only).

        - name: memcache.request.verbosity
          type: int
          description: >
            The value of the memcache "verbosity" command.

        - name: memcache.request.raw_args
          type: string
          description: >
            The text protocol raw arguments for the "stats ..." and "lru crawl ..." commands.

        - name: memcache.request.source_class
          type: int
          description: >
            The source class id in 'slab reassign' command.

        - name: memcache.request.dest_class
          type: int
          description: >
            The destination class id in 'slab reassign' command.

        - name: memcache.request.automove
          type: string
          description: >
              The automove mode in the 'slab automove' command expressed as a string.
              This value can be "standby"(=0), "slow"(=1), "aggressive"(=2), or the raw value if
              the value is unknown.

        - name: memcache.request.flags
          type: int
          description: >
            The memcache command flags sent in the request (if present).

        - name: memcache.response.flags
          type: int
          description: >
            The memcache message flags sent in the response (if present).

        - name: memcache.request.exptime
          type: int
          description: >
            The data expiry time in seconds sent with the memcache command (if present).
            If the value is <30 days, the expiry time is relative to "now", or else it
            is an absolute Unix time in seconds (32-bit).

        - name: memcache.request.sleep_us
          type: int
          description: >
            The sleep setting in microseconds for the 'lru_crawler sleep' command.

        - name: memcache.response.value
          type: int
          description: >
            The counter value returned by a counter operation.

        - name: memcache.request.noreply
          type: bool
          description: >
            Set to true if noreply was set in the request.
            The `memcache.response` field will be missing.

        - name: memcache.request.quiet
          type: bool
          description: >
            Set to true if the binary protocol message is to be treated as a quiet message.

        - name: memcache.request.cas_unique
          type: int
          description: >
            The CAS (compare-and-swap) identifier if present.

        - name: memcache.response.cas_unique
          type: int
          description: >
            The CAS (compare-and-swap) identifier to be used with CAS-based updates
            (if present).

        - name: memcache.response.stats
          type: list
          description: >
            The list of statistic values returned. Each entry is a dictionary with the 
            fields "name" and "value".

        - name: memcache.response.version
          type: string
          description: >
            The returned memcache version string.


    - name: mysql
      type: group
      description: MySQL-specific event fields.
      fields:
        - name: mysql.iserror
          type: bool
          description: >
           If the MySQL query returns an error, this field is set to true.

        - name: mysql.affected_rows
          type: int
          description: >
            If the MySQL command is successful, this field contains the affected
            number of rows of the last statement.

        - name: mysql.insert_id
          description: >
            If the INSERT query is successful, this field contains the id of the
            newly inserted row.

        - name: mysql.num_fields
          description: >
            If the SELECT query is successful, this field is set to the number
            of fields returned.

        - name: mysql.num_rows
          description: >
            If the SELECT query is successful, this field is set to the number
            of rows returned.

        - name: mysql.query
          description: >
            The row mysql query as read from the transaction's request.

        - name: mysql.error_code
          type: int
          description: >
            The error code returned by MySQL.

        - name: mysql.error_message
          description: >
            The error info message returned by MySQL.

    - name: pgsql
      type: group
      description: PostgreSQL-specific event fields.
      fields:
        - name: pgsql.query
          description: >
            The row pgsql query as read from the transaction's request.

        - name: pgsql.iserror
          type: bool
          description: >
            If the PgSQL query returns an error, this field is set to true.

        - name: pgsql.error_code
          description: The PostgreSQL error code.
          type: int

        - name: pgsql.error_message
          description: The PostgreSQL error message.

        - name: pgsql.error_severity
          description: The PostgreSQL error severity.
          possible_values:
            - ERROR
            - FATAL
            - PANIC

        - name: pgsql.num_fields
          description: >
            If the SELECT query if successful, this field is set to the number
            of fields returned.

        - name: pgsql.num_rows
          description: >
            If the SELECT query if successful, this field is set to the number
            of rows returned.

    - name: thrift
      type: group
      description: Thrift-RPC specific event fields.
      fields:
        - name: thrift.params
          description: >
            The RPC method call parameters in a human readable format. If the IDL
            files are available, the parameters use names whenever possible.
            Otherwise, the IDs from the message are used.

        - name: thrift.service
          description: >
            The name of the Thrift-RPC service as defined in the IDL files.

        - name: thrift.return_value
          description: >
            The value returned by the Thrift-RPC call. This is encoded in a human
            readable format.

        - name: thrift.exceptions
          description: >
            If the call resulted in exceptions, this field contains the exceptions in a human
            readable format.

    - name: redis
      type: group
      description: Redis-specific event fields.
      fields:
        - name: redis.return_value
          description: >
            The return value of the Redis command in a human readable format.

        - name: redis.error
          description: >
            If the Redis command has resulted in an error, this field contains the
            error message returned by the Redis server.

    - name: mongodb
      type: group
      description: >
         MongoDB-specific event fields. These fields mirror closely
         the fields for the MongoDB wire protocol. The higher level fields
         (for example, `query` and `resource`) apply to MongoDB events as well.
      fields:
        - name: mongodb.error
          description: >
            If the MongoDB request has resulted in an error, this field contains the
            error message returned by the server.
        - name: mongodb.fullCollectionName
          description: >
            The full collection name.
            The full collection name is the concatenation of the database name with the collection name,
            using a dot (.) for the concatenation.
            For example, for the database foo and the collection bar, the full collection name is foo.bar.
        - name: mongodb.numberToSkip
          type: number
          description: >
            Sets the number of documents to omit - starting from the first document in the resulting dataset -
            when returning the result of the query.
        - name: mongodb.numberToReturn
          type: number
          description: >
            The requested maximum number of documents to be returned.
        - name: mongodb.numberReturned
          type: number
          description: >
            The number of documents in the reply.
        - name: mongodb.startingFrom
          description: >
            Where in the cursor this reply is starting.
        - name: mongodb.query
          description: >
            A JSON document that represents the query.
            The query will contain one or more elements, all of which must match for a document
            to be included in the result set.
            Possible elements include $query, $orderby, $hint, $explain, and $snapshot.
        - name: mongodb.returnFieldsSelector
          description: >
            A JSON document that limits the fields in the returned documents.
            The returnFieldsSelector contains one or more elements, each of which is the name of a field that should be returned,
            and the integer value 1.
        - name: mongodb.selector
          description: >
            A BSON document that specifies the query for selecting the document to update or delete.
        - name: mongodb.update
          description: >
            A BSON document that specifies the update to be performed.
            For information on specifying updates, see the Update Operations documentation from the MongoDB Manual.
        - name: mongodb.cursorId
          description: >
            The cursor identifier returned in the OP_REPLY. This must be the value that was returned from the database.

raw:
  type: group
  description: These fields contain the raw transaction data.
  fields:
    - name: request
      index: analyzed
      description: >
        For text protocols, this is the request as seen on the wire
        (application layer only). For binary protocols this is our
        representation of the request.

    - name: response
      index: analyzed
      description: >
        For text protocols, this is the response as seen on the wire
        (application layer only). For binary protocols this is our
        representation of the request.

measurements:
  type: group
  description: >
    These fields contain measurements related to the transaction.
  fields:
    - name: responsetime
      description: >
        The wall clock time it took to complete the transaction.
        The precision is in milliseconds.
      type: int

    - name: cpu_time
      description: The CPU time it took to complete the transaction.
      type: int

    - name: bytes_in
      description: >
        The number of bytes of the request. Note that this size is
        the application layer message length, without the length of the IP or
        TCP headers.
      type: int

    - name: bytes_out
      description: >
        The number of bytes of the response. Note that this size is
        the application layer message length, without the length of the IP or
        TCP headers.
      type: int

    - name: dnstime
      type: int
      description: >
        The time it takes to query the name server for a given request.
        This is typically used for RUM (real-user-monitoring) but can
        also have values for server-to-server communication when DNS
        is used for service discovery.
        The precision is in microseconds.

    - name: connecttime
      type: int
      description: >
        The time it takes for the TCP connection to be established for
        the given transaction.
        The precision is in microseconds.

    - name: loadtime
      type: int
      description: >
        The time it takes for the content to be loaded. This is typically
        used for RUM (real-user-monitoring) but it can make sense in other
        cases as well.
        The precision is in microseconds.

    - name: domloadtime
      type: int
      description: >
        In RUM (real-user-monitoring), the total time it takes for the
        DOM to be loaded. In terms of the W3 Navigation Timing API, this is
        the difference between `domContentLoadedEnd` and
        `domContentLoadedStart`.
