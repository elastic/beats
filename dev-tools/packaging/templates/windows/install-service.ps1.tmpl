<#
.SYNOPSIS
    Installs {{.BeatName}} Windows service.
.DESCRIPTION
    Installs {{.BeatName}} Windows service, the data and logs path are
    set as part of the command for the service.

    For {{.BeatName}} < 9.1.0 the data path used to be
    'C:\ProgramData\{{.BeatName}}' (set from '$env:ProgramData) for >= 9.1.0
    the new default is 'C:\Program Files\{{.BeatName}}-Data'
    (set from '$env:ProgramFiles').

    If the legacy data path exists, then the script will use it, regardless
    of {{.BeatName}} version.

    You can pass -UseLegacyPath or -ForceNewDataPath to override this behaviour.

    If the Windows service already exits, it will be stopped and deleted, then
    the new one will be installed.
#>

Param (
  # Use the legacy ( < 9.1.0) data path
  [switch]$UseLegacyPath,
  # Force the usage of the new ( >= 9.1.0) data path, even if the legacy one exists
  [switch]$ForceNewDataPath
)

If (($UseLegacyPath -eq $True) -and ($ForceNewDataPath -eq $True)){
  Throw "-UseLegacyPath and -ForceNewDataPath cannot be passed on the same invocation."
}

# Delete and stop the service if it already exists.
if (Get-Service {{.BeatName}} -ErrorAction SilentlyContinue) {
  Stop-Service {{.BeatName}}
  (Get-Service {{.BeatName}}).WaitForStatus('Stopped')
  Start-Sleep -s 1
  sc.exe delete {{.BeatName}}
}

# We need to support a new default path for the data folder, ideally
# automatically detecting if the old one is used and keeping it

$WorkDir = Split-Path $MyInvocation.MyCommand.Path
$BasePath = "$env:ProgramFiles\{{.BeatName}}-Data"
$LegacyDataPath = "$env:PROGRAMDATA\{{.BeatName}}"

# Overwrite $BasePath to the legacy default
If ($ForceNewDataPath -eq $False){
  If (($UseLegacyPath -eq $True) -or (Test-Path $LegacyDataPath)) {
    $BasePath = $env:PROGRAMDATA
  }
}

$HomePath = "$BasePath\{{.BeatName}}"
$LogsPath = "$HomePath\log"
$KeystorePath = "$WorkDir\data\{{.BeatName}}.keystore"

$FullCmd = "`"$WorkDir\{{.BeatName}}.exe`" " +
           "--environment=windows_service " +
           "-c `"$WorkDir\{{.BeatName}}.yml`" " +
           "--path.home `"$WorkDir`" " +
           "--path.data `"$HomePath`" " +
           "--path.logs `"$LogsPath`" " +
           "-E keystore.path=`"$KeyStorePath`" " +
           "-E logging.files.redirect_stderr=true"

# Create the new service.
New-Service -name {{.BeatName}} `
  -displayName {{.BeatName | title}} `
  -binaryPathName $FullCmd

# Attempt to set the service to delayed start using sc config.
Try {
  Start-Process -FilePath sc.exe -ArgumentList 'config {{.BeatName}} start= delayed-auto'
}
Catch { Write-Host -f red "An error occurred setting the service to delayed start." }
