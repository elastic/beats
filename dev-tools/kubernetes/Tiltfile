
load('ext://restart_process', 'docker_build_with_restart')

def beat(
        mode="run",  # or debug
        beat="metricbeat",
        **kwargs):

    if mode not in ["run", "debug"]:
        exit(-1)

    print("Mode: {}".format(mode))

    ## Compile
    flags = ""
    if mode == "debug":
        flags = '-gcflags "-N -l"'
    build_cmd = "CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build {} -o build/{} ../../{}".format(flags, beat, beat)
    print("Build cmd: {}".format(build_cmd))

    local_resource(
        '{}-compile'.format(beat),
        build_cmd,
        deps=['.'],
        ignore=[
            "build",
            "Tiltfile"
        ])


    ## Docker Build
    docker_image = '{}-{}-image'.format(beat, mode)
    print("Docker image: {}".format(docker_image))

    docker_file = '{}/Dockerfile.{}'.format(beat, mode)
    print("Docker file: {}".format(docker_file))

    extra_args = ""
    if beat == "metricbeat":
        extra_args = "-system.hostfs=/hostfs"

    if mode == "run":
        docker_entrypoint = [
                '/usr/share/{}/{}'.format(beat, beat),
                "-c",
                "/etc/{}.yml".format(beat),
                "-e",
                extra_args
            ]
    else:
        docker_entrypoint = [
            "dlv",
            "--headless=true",
            "--listen=:56268",
            "--api-version=2",
            "--log",
            "exec",
            "/usr/share/{}/{}".format(beat, beat),
            "--",
            "-c",
            "/etc/{}.yml".format(beat),
            "-e",
            extra_args
        ]
    print("Docker entrypoint: {}".format(docker_entrypoint))

    docker_build_with_restart(
        docker_image,
        '.',
        entrypoint=docker_entrypoint,
        dockerfile=docker_file,
        only=["build"],
        live_update=[
            sync('./build', '/usr/share/{}'.format(beat)),
        ],
    )

    ## Deploy to k8s
    k8s_manifest = '{}/manifest.{}.yaml'.format(beat, mode)
    print("K8s manifest: {}".format(k8s_manifest))

    k8s_yaml(k8s_manifest)

    ## Expose resource
    if mode == "run":
        k8s_resource(beat)
    else:
        k8s_resource(beat, port_forwards=56268)

    allow_k8s_contexts(k8s_context())


# beat(mode="run")
beat(beat="filebeat", mode="run")
# beat(beat="metricbeat", mode="debug")




