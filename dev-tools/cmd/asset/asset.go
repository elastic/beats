// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"text/template"

	"github.com/elastic/beats/libbeat/asset"
)

var pkg *string

func init() {
	pkg = flag.String("pkg", "", "Package name")
}

var tpl = template.Must(template.New("normalizations").Parse(`
// ${ES_BEATS}/dev-tools/cmd/asset/asset.go
// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT

package {{ .Package }}

import (
	"github.com/elastic/beats/libbeat/asset"
)

func init() {
	if err := asset.SetFields("{{ .Name }}", Asset); err != nil {
		panic(err)
	}
}

// Asset returns asset data
func Asset() string {
	return "{{ .Data }}"
}

`))

type assetData struct {
	Name    string
	Data    string
	Package string
}

func main() {
	flag.Parse()

	args := flag.Args()
	if len(args) != 2 {
		fmt.Fprintln(os.Stderr, "File path must be set")
		os.Exit(1)
	}

	file := args[0]
	beatName := args[1]

	data, err := ioutil.ReadFile(file)
	if err != nil {
		fmt.Fprintln(os.Stderr, "Invalid file path: %s", args[0])
		os.Exit(1)
	}

	encData, err := asset.EncodeData(string(data))
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error encoding the data: %s", err)
		os.Exit(1)
	}

	var buf bytes.Buffer
	tpl.Execute(&buf, assetData{
		Name:    beatName + "/" + file,
		Data:    encData,
		Package: *pkg,
	})

	bs, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	os.Stdout.Write(bs)
}
