== Create a Metricset

A Metricset is the part of a Metricbeat module that fetches and structures the
data from the remote service. Each module can have multiple MetricSets.

This guide should help you to create your own MetricSet. It will focus on the details
of the MetricSet creation itself. If you want to create your own beat using Metricbeat
as a library, have a look here.

In general when creating a MetricSet for the first time, it helps before to have a look at the
implementation of the existing MetricSets as inspiration.


[float]
== Create Metricset Files
Creating a new metricset is simple. Run the command

[source,bash]
----
make create-metricset
----

inside your beat directory. This will prompt you to enter a module and metricset name. Only use characters `[a-z]` here
and if required also `_`. No other characters are allowed.

This will create all basic files for your metricset and if the module did not exist yet, it will also add the required
module files. More details on the module files can be found here (TODO: link to module guide).

NOTE: We will used `{metricset}`, `{module}`, `{beat}` across this guide. It means this part should be replaced by the actual
name of your metricset, module or beat.

The create metricset is already a functioning metricset and can be compiled. To compile your new metricset, run the commands:

[source,bash]
----
make collect
make
----

The first command `make collect` will update all generated files with the most recent metricset, the second command `make`
will compile your source code and provide your with a binary in the beat folder calle `{beat}`. The binary can be run
in debug mode with

[source,bash]
----
./{beat} -e -d "*"
----


[float]
== MetricSet Files
The MetricSet which was generated with its files can be found under `module/{module}/{metricset}`. This directory contains
the following files:

* \{metricset}.go
* _meta/docs.asciidoc
* _meta/data.json
* _meta/fields.yml

We will looking at each file in more detail below.

[float]
=== \{metricset}.go File

The first file is `{metricset}.go`. It contains the logic on how to fetch our data from the service and convert it to be
sent to the output.

To directly jump in, the file generated looks as following:

[source,go]
----
include::../../scripts/module/metricset/metricset.go.tmpl[]
----

The `package` and `import` part are part of the base structure of each Golang file. This part must only be modified if
more imports are required by the implementation.

[float]
==== Initialisation

The init method registers the MetricSet with the central registry. In Golang the `init()` function will be called
before the execution of all other code. This means the module will be automatically registered with the gobal registry.

The `New method` which is passed to `AddMetricSet` will be called after the setup of the module and before starting to fetch data.

This part normally does not need any change.

[source,go]
----
func init() {
	if err := mb.Registry.AddMetricSet("{module}", "{metricset}", New); err != nil {
		panic(err)
	}
}
----

[float]
==== Definition

MetricSet type defines all fields of the MetricSet. As a minimum it must inherit the mb.BaseMetricSet fields,
but can be extended with additional entries. These variables can be used to persist data or configuration between
multiple fetch calls.

More fields can be added as seen below in the example where a string field `username` and `password` were added.

[source,go]
----
type MetricSet struct {
	mb.BaseMetricSet
	username    string
	password    string
}
----

You can get started with the basic definition and extend the struct over type with additional files you need.


[float]
==== Creation

The New function creates a new instance of the MetricSet. The setup process
of the MetricSet is also part of New. This method will be called before Fetch
is called the first time.


Part of New is also setting up the configuration by processing additional
configuration entries if needed.

[source,go]
----

func New(base mb.BaseMetricSet) (mb.MetricSet, error) {

	config := struct{}{}

	if err := base.Module().UnpackConfig(&config); err != nil {
		return nil, err
	}

	return &MetricSet{
		BaseMetricSet: base,
	}, nil
}
----

[float]
==== Fetching

The `Fetch` method is the central part of the MetricSet. Fetch is called every
time new data is retrieved. In case more then one host is defined, fetch is
called for each host once. The frequency of calling fetch is based on the `period`
defined in the configuration file.

Fetch must return a `common.MapStr` object which is then sent to elasticsearch.
In case an error happens, an error must be returned which is then sent instead
to elasticsearch. That means metricbeat always sends an event, also on failure.
It must made sure, that the error message helps to identify what the actual
error is.

In our example we have a counter which is increment by one for each fetch call.

[source,go]
----
func (m *MetricSet) Fetch() (common.MapStr, error) {

	event := common.MapStr{
		"counter": m.counter,
	}
	m.counter++

	return event, nil
}
----

Fetch must return a `common.MapStr` which will be translated to the JSON content.
The JSON output will be identical to the naming and structure you use in
common.MapStr. More details about MapStr and its functions can be found in the API
docs https://godoc.org/github.com/elastic/beats/libbeat/common#MapStr[here].


[float]
==== Multi Fetching
Metricbeat has two different Fetch interfaces. One is to fetch a single event
which is shown above. In some cases every fetch returns a list of events. Instead
of using an array inside a JSON document, we recommend to create a list of events.

For this kind of data the following interface can be used:

[source,go]
----
(m *MetricSet) Fetch() ([]common.MapStr, error)
----

The only difference to the previous example is that a `[]common.MapStr` is returned.
Metricbeat will send all events with the same timestamp and a unique identifier
to make it possible to correlate the events.


[float]
==== Configuration File
The configuration file for a MetricSet is handled by the module. In case there are
multiple MetricSets in one module, make sure to add all MetricSets to the configuration:

[source,go]
----
metricbeat:
  modules:
    - module: {module-name}
      metricsets: ["{metricset1}", "{metricset2}"]
----

NOTE: Make sure to run `make collect` every time after you update the config file
so it is also applied to the global configuration file and the docs.

More details on the configuration file can be found here in the module docs.


[float]
== Next Steps
In the above descriptions the basic steps to create a MetricSet are documented. For more in depth details about MetricSet
and how to extend your MetricSet further, check the MetricSet details page.

