
////
This file is generated! See _meta/fields.yml and scripts/generate_fields_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by Metricbeat. They are
grouped in the following categories:

* <<exported-fields-appsearch>>
* <<exported-fields-aws>>
* <<exported-fields-azure>>
* <<exported-fields-beat-common>>
* <<exported-fields-beat>>
* <<exported-fields-cloud>>
* <<exported-fields-cockroachdb>>
* <<exported-fields-common>>
* <<exported-fields-coredns>>
* <<exported-fields-docker-processor>>
* <<exported-fields-ecs>>
* <<exported-fields-host-processor>>
* <<exported-fields-jolokia-autodiscover>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-mssql>>
* <<exported-fields-oracle>>
* <<exported-fields-process>>
* <<exported-fields-statsd>>
* <<exported-fields-system>>
* <<exported-fields-tomcat>>

--
[[exported-fields-appsearch]]
== appsearch fields

appsearch module



[float]
=== appsearch




[float]
=== stats

App Search stats



[float]
=== jvm

JVM stats



[float]
=== memory_usage

Memory usage



*`appsearch.stats.jvm.memory_usage.heap_init.bytes`*::
+
--
Heap init used by the JVM in bytes.


type: long

--

*`appsearch.stats.jvm.memory_usage.heap_used.bytes`*::
+
--
Heap used by the JVM in bytes.


type: long

--

*`appsearch.stats.jvm.memory_usage.heap_committed.bytes`*::
+
--
Committed heap to the JVM in bytes.


type: long

--

*`appsearch.stats.jvm.memory_usage.heap_max.bytes`*::
+
--
Max heap used by the JVM in bytes


type: long

--

*`appsearch.stats.jvm.memory_usage.non_heap_init.bytes`*::
+
--
Non-Heap initial memory used by the JVM in bytes.


type: long

--

*`appsearch.stats.jvm.memory_usage.non_heap_committed.bytes`*::
+
--
Non-Heap committed memory used by the JVM in bytes.


type: long

--

[float]
=== queues

Worker queues



*`appsearch.stats.queues.analytics_events.count`*::
+
--
Number of pending jobs in the `analytics_events` queue.


type: long

--

*`appsearch.stats.queues.document_destroyer.count`*::
+
--
Number of pending jobs in the `document_destroyer` queue.


type: long

--

*`appsearch.stats.queues.engine_destroyer.count`*::
+
--
Number of pending jobs in the `engine_destroyer` queue.


type: long

--

*`appsearch.stats.queues.index_adder.count`*::
+
--
Number of pending jobs in the `index_adder` queue.


type: long

--

*`appsearch.stats.queues.indexed_doc_remover.count`*::
+
--
Number of pending jobs in the `indexed_doc_remover` queue.


type: long

--

*`appsearch.stats.queues.mailer.count`*::
+
--
Number of pending jobs in the `mailer` queue.


type: long

--

*`appsearch.stats.queues.refresh_document_counts.count`*::
+
--
Number of pending jobs in the `refresh_document_counts` queue.


type: long

--

*`appsearch.stats.queues.reindexer.count`*::
+
--
Number of pending jobs in the `reindexer` queue.


type: long

--

*`appsearch.stats.queues.schema_updater.count`*::
+
--
Number of pending jobs in the `schema_updater` queue.


type: long

--

*`appsearch.stats.queues.failed.count`*::
+
--
Number of failed jobs waiting to be retried.


type: long

--

[float]
=== requests

Request metrics



*`appsearch.stats.requests.count`*::
+
--
Number of recently completed requests


type: long

--

[float]
=== api.duration

API response time metrics



*`appsearch.stats.requests.api.duration.avg.ms`*::
+
--
Average response time in milliseconds


type: long

--

*`appsearch.stats.requests.api.duration.max.ms`*::
+
--
Max response time in milliseconds


type: long

--

[float]
=== web.duration

Dashboard response time metrics



*`appsearch.stats.requests.web.duration.avg.ms`*::
+
--
Average response time in milliseconds


type: long

--

*`appsearch.stats.requests.web.duration.max.ms`*::
+
--
Max response time in milliseconds


type: long

--

[[exported-fields-aws]]
== aws fields

`aws` module collects AWS monitoring metrics from AWS Cloudwatch.



*`cloud.account.name`*::
+
--
The cloud account name or alias used to identify different entities in a multi-tenant environment.


type: keyword

--

[float]
=== aws




*`aws.tags.*`*::
+
--
Tag key value pairs from aws resources.


type: object

--

*`aws.s3.bucket.name`*::
+
--
Name of a S3 bucket.


type: keyword

--

[float]
=== cloudwatch

`cloudwatch` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by different namespaces.



*`aws.cloudwatch.namespace`*::
+
--
The namespace specified when query cloudwatch api.


type: keyword

--

*`aws.cloudwatch.metrics.*.*`*::
+
--
Metrics that returned from Cloudwatch api query.


type: object

--

*`aws.cloudwatch.dimensions.*`*::
+
--
Cloudwatch metric dimensions.


type: object

--

[float]
=== ebs

`ebs` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS EBS.


[float]
=== ec2

`ec2` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS EC2.



*`aws.ec2.cpu.total.pct`*::
+
--
The percentage of allocated EC2 compute units that are currently in use on the instance.


type: scaled_float

--

*`aws.ec2.cpu.credit_usage`*::
+
--
The number of CPU credits spent by the instance for CPU utilization.


type: long

--

*`aws.ec2.cpu.credit_balance`*::
+
--
The number of earned CPU credits that an instance has accrued since it was launched or started.


type: long

--

*`aws.ec2.cpu.surplus_credit_balance`*::
+
--
The number of surplus credits that have been spent by an unlimited instance when its CPUCreditBalance value is zero.


type: long

--

*`aws.ec2.cpu.surplus_credits_charged`*::
+
--
The number of spent surplus credits that are not paid down by earned CPU credits, and which thus incur an additional charge.


type: long

--

*`aws.ec2.network.in.packets`*::
+
--
The number of packets received on all network interfaces by the instance.


type: long

--

*`aws.ec2.network.in.packets_per_sec`*::
+
--
The number of packets per second sent out on all network interfaces by the instance.


type: long

--

*`aws.ec2.network.out.packets`*::
+
--
The number of packets sent out on all network interfaces by the instance.


type: long

--

*`aws.ec2.network.out.packets_per_sec`*::
+
--
The number of packets per second sent out on all network interfaces by the instance.


type: long

--

*`aws.ec2.network.in.bytes`*::
+
--
The number of bytes received on all network interfaces by the instance.


type: long

format: bytes

--

*`aws.ec2.network.in.bytes_per_sec`*::
+
--
The number of bytes per second received on all network interfaces by the instance.


type: long

--

*`aws.ec2.network.out.bytes`*::
+
--
The number of bytes sent out on all network interfaces by the instance.


type: long

format: bytes

--

*`aws.ec2.network.out.bytes_per_sec`*::
+
--
The number of bytes per second sent out on all network interfaces by the instance.


type: long

--

*`aws.ec2.diskio.read.bytes`*::
+
--
Bytes read from all instance store volumes available to the instance.


type: long

format: bytes

--

*`aws.ec2.diskio.read.bytes_per_sec`*::
+
--
Bytes read per second from all instance store volumes available to the instance.


type: long

--

*`aws.ec2.diskio.write.bytes`*::
+
--
Bytes written to all instance store volumes available to the instance.


type: long

format: bytes

--

*`aws.ec2.diskio.write.bytes_per_sec`*::
+
--
Bytes written per second to all instance store volumes available to the instance.


type: long

--

*`aws.ec2.diskio.read.ops`*::
+
--
Completed read operations from all instance store volumes available to the instance in a specified period of time.


type: long

--

*`aws.ec2.diskio.read.ops_per_sec`*::
+
--
Completed read operations per second from all instance store volumes available to the instance in a specified period of time.


type: long

--

*`aws.ec2.diskio.write.ops`*::
+
--
Completed write operations to all instance store volumes available to the instance in a specified period of time.


type: long

--

*`aws.ec2.diskio.write.ops_per_sec`*::
+
--
Completed write operations per second to all instance store volumes available to the instance in a specified period of time.


type: long

--

*`aws.ec2.status.check_failed`*::
+
--
Reports whether the instance has passed both the instance status check and the system status check in the last minute.


type: long

--

*`aws.ec2.status.check_failed_system`*::
+
--
Reports whether the instance has passed the system status check in the last minute.


type: long

--

*`aws.ec2.status.check_failed_instance`*::
+
--
Reports whether the instance has passed the instance status check in the last minute.


type: long

--

*`aws.ec2.instance.core.count`*::
+
--
The number of CPU cores for the instance.


type: integer

--

*`aws.ec2.instance.image.id`*::
+
--
The ID of the image used to launch the instance.


type: keyword

--

*`aws.ec2.instance.monitoring.state`*::
+
--
Indicates whether detailed monitoring is enabled.


type: keyword

--

*`aws.ec2.instance.private.dns_name`*::
+
--
The private DNS name of the network interface.


type: keyword

--

*`aws.ec2.instance.private.ip`*::
+
--
The private IPv4 address associated with the network interface.


type: ip

--

*`aws.ec2.instance.public.dns_name`*::
+
--
The public DNS name of the instance.


type: keyword

--

*`aws.ec2.instance.public.ip`*::
+
--
The address of the Elastic IP address (IPv4) bound to the network interface.


type: ip

--

*`aws.ec2.instance.state.code`*::
+
--
The state of the instance, as a 16-bit unsigned integer.


type: integer

--

*`aws.ec2.instance.state.name`*::
+
--
The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).


type: keyword

--

*`aws.ec2.instance.threads_per_core`*::
+
--
The number of threads per CPU core.


type: integer

--

[float]
=== elb

`elb` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS ELB.


[float]
=== rds

`rds` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS RDS.



*`aws.rds.cpu.total.pct`*::
+
--
The percentage of CPU utilization.


type: scaled_float

format: percent

--

*`aws.rds.cpu.credit_usage`*::
+
--
The number of CPU credits spent by the instance for CPU utilization.


type: long

--

*`aws.rds.cpu.credit_balance`*::
+
--
The number of earned CPU credits that an instance has accrued since it was launched or started.


type: long

--

*`aws.rds.database_connections`*::
+
--
The number of database connections in use.


type: long

--

*`aws.rds.db_instance.arn`*::
+
--
Amazon Resource Name(ARN) for each rds.


type: keyword

--

*`aws.rds.db_instance.class`*::
+
--
Contains the name of the compute and memory capacity class of the DB instance.


type: keyword

--

*`aws.rds.db_instance.identifier`*::
+
--
Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.


type: keyword

--

*`aws.rds.db_instance.status`*::
+
--
Specifies the current state of this database.


type: keyword

--

*`aws.rds.disk_queue_depth`*::
+
--
The number of outstanding IOs (read/write requests) waiting to access the disk.


type: float

--

*`aws.rds.failed_sql_server_agent_jobs`*::
+
--
The number of failed SQL Server Agent jobs during the last minute.


type: long

--

*`aws.rds.freeable_memory.bytes`*::
+
--
The amount of available random access memory.


type: long

format: bytes

--

*`aws.rds.free_storage.bytes`*::
+
--
The amount of available storage space.


type: long

format: bytes

--

*`aws.rds.maximum_used_transaction_ids`*::
+
--
The maximum transaction ID that has been used. Applies to PostgreSQL.


type: long

--

*`aws.rds.oldest_replication_slot_lag.mb`*::
+
--
The lagging size of the replica lagging the most in terms of WAL data received. Applies to PostgreSQL.


type: long

--

*`aws.rds.read_io.ops_per_sec`*::
+
--
The average number of disk read I/O operations per second.


type: float

--

*`aws.rds.replica_lag.sec`*::
+
--
The amount of time a Read Replica DB instance lags behind the source DB instance. Applies to MySQL, MariaDB, and PostgreSQL Read Replicas.


type: long

format: duration

--

*`aws.rds.swap_usage.bytes`*::
+
--
The amount of swap space used on the DB instance. This metric is not available for SQL Server.


type: long

format: bytes

--

*`aws.rds.transaction_logs_generation`*::
+
--
The disk space used by transaction logs. Applies to PostgreSQL.


type: long

--

*`aws.rds.write_io.ops_per_sec`*::
+
--
The average number of disk write I/O operations per second.


type: float

--

*`aws.rds.queries`*::
+
--
The average number of queries executed per second.


type: long

--

*`aws.rds.deadlocks`*::
+
--
The average number of deadlocks in the database per second.


type: long

--

*`aws.rds.volume_used.bytes`*::
+
--
The amount of storage used by your Aurora DB instance, in bytes.


type: long

format: bytes

--

*`aws.rds.free_local_storage.bytes`*::
+
--
The amount of storage available for temporary tables and logs, in bytes.


type: long

format: bytes

--

*`aws.rds.login_failures`*::
+
--
The average number of failed login attempts per second.


type: long

--

*`aws.rds.throughput.commit`*::
+
--
The average number of commit operations per second.


type: float

--

*`aws.rds.throughput.delete`*::
+
--
The average number of delete queries per second.


type: float

--

*`aws.rds.throughput.ddl`*::
+
--
The average number of DDL requests per second.


type: float

--

*`aws.rds.throughput.dml`*::
+
--
The average number of inserts, updates, and deletes per second.


type: float

--

*`aws.rds.throughput.insert`*::
+
--
The average number of insert queries per second.


type: float

--

*`aws.rds.throughput.network`*::
+
--
The amount of network throughput both received from and transmitted to clients by each instance in the Aurora MySQL DB cluster, in bytes per second.


type: float

--

*`aws.rds.throughput.network_receive`*::
+
--
The incoming (Receive) network traffic on the DB instance, including both customer database traffic and Amazon RDS traffic used for monitoring and replication.


type: float

--

*`aws.rds.throughput.network_transmit`*::
+
--
The outgoing (Transmit) network traffic on the DB instance, including both customer database traffic and Amazon RDS traffic used for monitoring and replication.


type: float

--

*`aws.rds.throughput.read`*::
+
--
The average amount of time taken per disk I/O operation.


type: float

--

*`aws.rds.throughput.select`*::
+
--
The average number of select queries per second.


type: float

--

*`aws.rds.throughput.update`*::
+
--
The average number of update queries per second.


type: float

--

*`aws.rds.throughput.write`*::
+
--
The average number of bytes written to disk per second.


type: float

--

*`aws.rds.latency.commit`*::
+
--
The amount of latency for commit operations, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.ddl`*::
+
--
The amount of latency for data definition language (DDL) requests, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.dml`*::
+
--
The amount of latency for inserts, updates, and deletes, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.insert`*::
+
--
The amount of latency for insert queries, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.read`*::
+
--
The average amount of time taken per disk I/O operation.


type: float

format: duration

--

*`aws.rds.latency.select`*::
+
--
The amount of latency for select queries, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.update`*::
+
--
The amount of latency for update queries, in milliseconds.


type: float

format: duration

--

*`aws.rds.latency.write`*::
+
--
The average amount of time taken per disk I/O operation.


type: float

format: duration

--

*`aws.rds.disk_usage.bin_log.bytes`*::
+
--
The amount of disk space occupied by binary logs on the master. Applies to MySQL read replicas.


type: long

format: bytes

--

*`aws.rds.disk_usage.replication_slot.mb`*::
+
--
The disk space used by replication slot files. Applies to PostgreSQL.


type: long

--

*`aws.rds.disk_usage.transaction_logs.mb`*::
+
--
The disk space used by transaction logs. Applies to PostgreSQL.


type: long

--

*`aws.rds.transactions.active`*::
+
--
The average number of current transactions executing on an Aurora database instance per second.


type: long

--

*`aws.rds.transactions.blocked`*::
+
--
The average number of transactions in the database that are blocked per second.


type: long

--

[float]
=== s3_daily_storage

`s3_daily_storage` contains the daily storage metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS S3.



*`aws.s3_daily_storage.bucket.size.bytes`*::
+
--
The amount of data in bytes stored in a bucket.


type: long

format: bytes

--

*`aws.s3_daily_storage.number_of_objects`*::
+
--
The total number of objects stored in a bucket for all storage classes.


type: long

--

[float]
=== s3_request

`s3_request` contains request metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS S3.



*`aws.s3_request.requests.total`*::
+
--
The total number of HTTP requests made to an Amazon S3 bucket, regardless of type.


type: long

--

*`aws.s3_request.requests.get`*::
+
--
The number of HTTP GET requests made for objects in an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.put`*::
+
--
The number of HTTP PUT requests made for objects in an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.delete`*::
+
--
The number of HTTP DELETE requests made for objects in an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.head`*::
+
--
The number of HTTP HEAD requests made to an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.post`*::
+
--
The number of HTTP POST requests made to an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.select`*::
+
--
The number of Amazon S3 SELECT Object Content requests made for objects in an Amazon S3 bucket.


type: long

--

*`aws.s3_request.requests.select_scanned.bytes`*::
+
--
The number of bytes of data scanned with Amazon S3 SELECT Object Content requests in an Amazon S3 bucket.


type: long

format: bytes

--

*`aws.s3_request.requests.select_returned.bytes`*::
+
--
The number of bytes of data returned with Amazon S3 SELECT Object Content requests in an Amazon S3 bucket.


type: long

format: bytes

--

*`aws.s3_request.requests.list`*::
+
--
The number of HTTP requests that list the contents of a bucket.


type: long

--

*`aws.s3_request.downloaded.bytes`*::
+
--
The number bytes downloaded for requests made to an Amazon S3 bucket, where the response includes a body.


type: long

format: bytes

--

*`aws.s3_request.uploaded.bytes`*::
+
--
The number bytes uploaded that contain a request body, made to an Amazon S3 bucket.


type: long

format: bytes

--

*`aws.s3_request.errors.4xx`*::
+
--
The number of HTTP 4xx client error status code requests made to an Amazon S3 bucket with a value of either 0 or 1.


type: long

--

*`aws.s3_request.errors.5xx`*::
+
--
The number of HTTP 5xx server error status code requests made to an Amazon S3 bucket with a value of either 0 or 1.


type: long

--

*`aws.s3_request.latency.first_byte.ms`*::
+
--
The per-request time from the complete request being received by an Amazon S3 bucket to when the response starts to be returned.


type: long

format: duration

--

*`aws.s3_request.latency.total_request.ms`*::
+
--
The elapsed per-request time from the first byte received to the last byte sent to an Amazon S3 bucket.


type: long

format: duration

--

[float]
=== sqs

`sqs` contains the metrics that were scraped from AWS CloudWatch which contains monitoring metrics sent by AWS SQS.



*`aws.sqs.oldest_message_age.sec`*::
+
--
The approximate age of the oldest non-deleted message in the queue.


type: long

format: duration

--

*`aws.sqs.messages.delayed`*::
+
--
TThe number of messages in the queue that are delayed and not available for reading immediately.


type: long

--

*`aws.sqs.messages.not_visible`*::
+
--
The number of messages that are in flight.


type: long

--

*`aws.sqs.messages.visible`*::
+
--
The number of messages available for retrieval from the queue.


type: long

--

*`aws.sqs.messages.deleted`*::
+
--
The number of messages deleted from the queue.


type: long

--

*`aws.sqs.messages.received`*::
+
--
The number of messages returned by calls to the ReceiveMessage action.


type: long

--

*`aws.sqs.messages.sent`*::
+
--
The number of messages added to a queue.


type: long

--

*`aws.sqs.empty_receives`*::
+
--
The number of ReceiveMessage API calls that did not return a message.


type: long

--

*`aws.sqs.sent_message_size.bytes`*::
+
--
The size of messages added to a queue.


type: long

format: bytes

--

*`aws.sqs.queue.name`*::
+
--
SQS queue name


type: keyword

--

[[exported-fields-azure]]
== azure fields

azure module



[float]
=== azure




*`azure.namespace`*::
+
--
The namespace selected


type: keyword

--

*`azure.subscription_id`*::
+
--
The subscription ID


type: keyword

--

*`azure.dimensions.*`*::
+
--
Azure metric dimensions.


type: object

--

[float]
=== resource

The resource specified



*`azure.resource.name`*::
+
--
The name of the resource


type: keyword

--

*`azure.resource.type`*::
+
--
The type of the resource


type: keyword

--

*`azure.resource.group`*::
+
--
The resource group


type: keyword

--

*`azure.resource.tags.*`*::
+
--
Azure resource tags.


type: object

--

*`azure.resource.compute_vm.*.*`*::
+
--
compute_vm


type: object

--

*`azure.resource.compute_vm_scaleset.*.*`*::
+
--
compute_vm_scaleset


type: object

--

[float]
=== monitor

monitor



*`azure.resource.monitor.metrics.*.*`*::
+
--
Metrics returned.


type: object

--

[[exported-fields-beat-common]]
== Beat fields

Contains common beat fields available in all event types.



*`agent.hostname`*::
+
--
Hostname of the agent.

type: keyword

--

*`beat.timezone`*::
+
--
type: alias

alias to: event.timezone

--

*`fields`*::
+
--
Contains user configurable fields.


type: object

--

*`beat.name`*::
+
--
type: alias

alias to: host.name

--

*`beat.hostname`*::
+
--
type: alias

alias to: agent.hostname

--

*`timeseries.instance`*::
+
--
Time series instance id

type: keyword

--

[[exported-fields-beat]]
== Beat fields

Beat module



[float]
=== beat




*`beat.id`*::
+
--
Beat ID.


type: keyword

--

*`beat.type`*::
+
--
Beat type.


type: keyword

--

[float]
=== state

Beat state



*`beat.state.management.enabled`*::
+
--
Is central management enabled?


type: boolean

--

*`beat.state.module.count`*::
+
--
Number of modules enabled


type: integer

--

*`beat.state.output.name`*::
+
--
Name of output used by Beat


type: keyword

--

*`beat.state.queue.name`*::
+
--
Name of queue being used by Beat


type: keyword

--

[float]
=== stats

Beat stats



*`beat.stats.uptime.ms`*::
+
--
Beat uptime


type: long

--

*`beat.stats.runtime.goroutines`*::
+
--
Number of goroutines running in Beat


type: long

--

[float]
=== libbeat

Fields common to all Beats



[float]
=== output

Output stats



*`beat.stats.libbeat.output.type`*::
+
--
Type of output


type: keyword

--

[float]
=== events

Event counters



*`beat.stats.libbeat.output.events.acked`*::
+
--
Number of events acknowledged


type: long

--

*`beat.stats.libbeat.output.events.active`*::
+
--
Number of active events


type: long

--

*`beat.stats.libbeat.output.events.batches`*::
+
--
Number of event batches


type: long

--

*`beat.stats.libbeat.output.events.dropped`*::
+
--
Number of events dropped


type: long

--

*`beat.stats.libbeat.output.events.duplicates`*::
+
--
Number of events duplicated


type: long

--

*`beat.stats.libbeat.output.events.failed`*::
+
--
Number of events failed


type: long

--

*`beat.stats.libbeat.output.events.toomany`*::
+
--
Number of too many events


type: long

--

*`beat.stats.libbeat.output.events.total`*::
+
--
Total number of events


type: long

--

[float]
=== read

Read stats



*`beat.stats.libbeat.output.read.bytes`*::
+
--
Number of bytes read


type: long

--

*`beat.stats.libbeat.output.read.errors`*::
+
--
Number of read errors


type: long

--

[float]
=== write

Write stats



*`beat.stats.libbeat.output.write.bytes`*::
+
--
Number of bytes written


type: long

--

*`beat.stats.libbeat.output.write.errors`*::
+
--
Number of write errors


type: long

--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`cloud.project.id`*::
+
--
Name of the project in Google Cloud.


example: project-x

--

*`cloud.image.id`*::
+
--
Image ID for the cloud instance.


example: ami-abcd1234

--

*`meta.cloud.provider`*::
+
--
type: alias

alias to: cloud.provider

--

*`meta.cloud.instance_id`*::
+
--
type: alias

alias to: cloud.instance.id

--

*`meta.cloud.instance_name`*::
+
--
type: alias

alias to: cloud.instance.name

--

*`meta.cloud.machine_type`*::
+
--
type: alias

alias to: cloud.machine.type

--

*`meta.cloud.availability_zone`*::
+
--
type: alias

alias to: cloud.availability_zone

--

*`meta.cloud.project_id`*::
+
--
type: alias

alias to: cloud.project.id

--

*`meta.cloud.region`*::
+
--
type: alias

alias to: cloud.region

--

[[exported-fields-cockroachdb]]
== CockroachDB fields

CockroachDB module




[[exported-fields-common]]
== Common fields

Contains common fields available in all event types.



*`metricset.module`*::
+
--
The name of the module that generated the event.


type: alias

alias to: event.module

--

*`metricset.name`*::
+
--
The name of the metricset that generated the event.


--

*`metricset.period`*::
+
--
Current data collection period for this event in milliseconds.


type: integer

--

*`service.address`*::
+
--
Address of the machine where the service is running. This field may not be present when the data was collected locally.


--

*`service.hostname`*::
+
--
Host name of the machine where the service is running.


--

*`type`*::
+
--
The document type. Always set to "doc".


example: metricsets

required: True

--

*`process.exit_code`*::
+
--
the exit code of a process

type: long

--

*`systemd.fragment_path`*::
+
--
the location of the systemd unit path

type: keyword

--

*`systemd.unit`*::
+
--
the unit name of the systemd service

type: keyword

--

[[exported-fields-coredns]]
== coredns fields

coredns Module



[float]
=== coredns

`coredns` contains statistics that were read from coreDNS



[float]
=== stats

Contains statistics related to the coreDNS service



*`coredns.stats.panic.count`*::
+
--
Total number of panics


type: long

--

*`coredns.stats.dns.request.count`*::
+
--
Total query count


type: long

--

*`coredns.stats.dns.request.duration.ns.bucket.*`*::
+
--
Request duration histogram buckets in nanoseconds


type: object

--

*`coredns.stats.dns.request.duration.ns.sum`*::
+
--
Requests duration, sum of durations in nanoseconds


type: long

format: duration

--

*`coredns.stats.dns.request.duration.ns.count`*::
+
--
Requests duration, number of requests


type: long

--

*`coredns.stats.dns.request.size.bytes.bucket.*`*::
+
--
Request Size histogram buckets


type: object

--

*`coredns.stats.dns.request.size.bytes.sum`*::
+
--
Request Size histogram sum


type: long

--

*`coredns.stats.dns.request.size.bytes.count`*::
+
--
Request Size histogram count


type: long

--

*`coredns.stats.dns.request.do.count`*::
+
--
Number of queries that have the DO bit set


type: long

--

*`coredns.stats.dns.request.type.count`*::
+
--
Counter of queries per zone and type


type: long

--

*`coredns.stats.type`*::
+
--
Holds the query type of the request


type: keyword

--

*`coredns.stats.dns.response.rcode.count`*::
+
--
Counter of responses per zone and rcode


type: long

--

*`coredns.stats.rcode`*::
+
--
Holds the rcode of the response


type: keyword

--

*`coredns.stats.family`*::
+
--
The address family of the transport (1 = IP (IP version 4), 2 = IP6 (IP version 6))


type: keyword

--

*`coredns.stats.dns.response.size.bytes.bucket.*`*::
+
--
Response Size histogram buckets


type: object

--

*`coredns.stats.dns.response.size.bytes.sum`*::
+
--
Response Size histogram sum


type: long

--

*`coredns.stats.dns.response.size.bytes.count`*::
+
--
Response Size histogram count


type: long

--

*`coredns.stats.server`*::
+
--
The server responsible for the request


type: keyword

--

*`coredns.stats.zone`*::
+
--
The zonename used for the request/response


type: keyword

--

*`coredns.stats.proto`*::
+
--
The transport of the response ("udp" or "tcp")


type: keyword

--

*`coredns.stats.dns.cache.hits.count`*::
+
--
Cache hits count for the cache plugin


type: long

--

*`coredns.stats.dns.cache.misses.count`*::
+
--
Cache misses count for the cache plugin


type: long

--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: alias

alias to: container.id

--

*`docker.container.image`*::
+
--
type: alias

alias to: container.image.name

--

*`docker.container.name`*::
+
--
type: alias

alias to: container.name

--

*`docker.container.labels`*::
+
--
Image labels.


type: object

--

[[exported-fields-ecs]]
== ECS fields

ECS Fields.


*`@timestamp`*::
+
--
Date/time when the event originated.
This is the date/time extracted from the event, typically representing when the event was generated by the source.
If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
Required field for all events.

type: date

example: 2016-05-23T08:05:34.853Z

required: True

--

*`labels`*::
+
--
Custom key/value pairs.
Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
Example: `docker` and `k8s` labels.

type: object

example: {'application': 'foo-bar', 'env': 'production'}

--

*`message`*::
+
--
For log events the message field contains the log message, optimized for viewing in a log viewer.
For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
If multiple messages exist, they can be combined into one message.

type: text

example: Hello World

--

*`tags`*::
+
--
List of keywords used to tag each event.

type: keyword

example: ["production", "env2"]

--

[float]
=== agent

The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.
Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.


*`agent.ephemeral_id`*::
+
--
Ephemeral identifier of this agent (if one exists).
This id normally changes across restarts, but `agent.id` does not.

type: keyword

example: 8a4f500f

--

*`agent.id`*::
+
--
Unique identifier of this agent (if one exists).
Example: For Beats this would be beat.id.

type: keyword

example: 8a4f500d

--

*`agent.name`*::
+
--
Custom name of the agent.
This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
If no name is given, the name is often left empty.

type: keyword

example: foo

--

*`agent.type`*::
+
--
Type of the agent.
The agent type stays always the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.

type: keyword

example: filebeat

--

*`agent.version`*::
+
--
Version of the agent.

type: keyword

example: 6.0.0-rc2

--

[float]
=== as

An autonomous system (AS) is a collection of connected Internet Protocol (IP) routing prefixes under the control of one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the internet.


*`as.number`*::
+
--
Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

type: long

example: 15169

--

*`as.organization.name`*::
+
--
Organization name.

type: keyword

example: Google LLC

--

[float]
=== client

A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term "originator" to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields. Client fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.


*`client.address`*::
+
--
Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword

--

*`client.as.number`*::
+
--
Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

type: long

example: 15169

--

*`client.as.organization.name`*::
+
--
Organization name.

type: keyword

example: Google LLC

--

*`client.bytes`*::
+
--
Bytes sent from the client to the server.

type: long

example: 184

format: bytes

--

*`client.domain`*::
+
--
Client domain.

type: keyword

--

*`client.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`client.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`client.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`client.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`client.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`client.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`client.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`client.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`client.ip`*::
+
--
IP address of the client.
Can be one or multiple IPv4 or IPv6 addresses.

type: ip

--

*`client.mac`*::
+
--
MAC address of the client.

type: keyword

--

*`client.nat.ip`*::
+
--
Translated IP of source based NAT sessions (e.g. internal client to internet).
Typically connections traversing load balancers, firewalls, or routers.

type: ip

--

*`client.nat.port`*::
+
--
Translated port of source based NAT sessions (e.g. internal client to internet).
Typically connections traversing load balancers, firewalls, or routers.

type: long

format: string

--

*`client.packets`*::
+
--
Packets sent from the client to the server.

type: long

example: 12

--

*`client.port`*::
+
--
Port of the client.

type: long

format: string

--

*`client.registered_domain`*::
+
--
The highest registered client domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`client.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`client.user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`client.user.email`*::
+
--
User email address.

type: keyword

--

*`client.user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`client.user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`client.user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`client.user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`client.user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`client.user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`client.user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== cloud

Fields related to the cloud or infrastructure the events are coming from.


*`cloud.account.id`*::
+
--
The cloud account or organization id used to identify different entities in a multi-tenant environment.
Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

type: keyword

example: 666777888999

--

*`cloud.availability_zone`*::
+
--
Availability zone in which this host is running.

type: keyword

example: us-east-1c

--

*`cloud.instance.id`*::
+
--
Instance ID of the host machine.

type: keyword

example: i-1234567890abcdef0

--

*`cloud.instance.name`*::
+
--
Instance name of the host machine.

type: keyword

--

*`cloud.machine.type`*::
+
--
Machine type of the host machine.

type: keyword

example: t2.medium

--

*`cloud.provider`*::
+
--
Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

type: keyword

example: aws

--

*`cloud.region`*::
+
--
Region in which this host is running.

type: keyword

example: us-east-1

--

[float]
=== container

Container fields are used for meta information about the specific container that is the source of information.
These fields help correlate data based containers from any runtime.


*`container.id`*::
+
--
Unique container id.

type: keyword

--

*`container.image.name`*::
+
--
Name of the image the container was built on.

type: keyword

--

*`container.image.tag`*::
+
--
Container image tag.

type: keyword

--

*`container.labels`*::
+
--
Image labels.

type: object

--

*`container.name`*::
+
--
Container name.

type: keyword

--

*`container.runtime`*::
+
--
Runtime managing this container.

type: keyword

example: docker

--

[float]
=== destination

Destination fields describe details about the destination of a packet/event.
Destination fields are usually populated in conjunction with source fields.


*`destination.address`*::
+
--
Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword

--

*`destination.as.number`*::
+
--
Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

type: long

example: 15169

--

*`destination.as.organization.name`*::
+
--
Organization name.

type: keyword

example: Google LLC

--

*`destination.bytes`*::
+
--
Bytes sent from the destination to the source.

type: long

example: 184

format: bytes

--

*`destination.domain`*::
+
--
Destination domain.

type: keyword

--

*`destination.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`destination.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`destination.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`destination.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`destination.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`destination.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`destination.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`destination.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`destination.ip`*::
+
--
IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.

type: ip

--

*`destination.mac`*::
+
--
MAC address of the destination.

type: keyword

--

*`destination.nat.ip`*::
+
--
Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
Typically used with load balancers, firewalls, or routers.

type: ip

--

*`destination.nat.port`*::
+
--
Port the source session is translated to by NAT Device.
Typically used with load balancers, firewalls, or routers.

type: long

format: string

--

*`destination.packets`*::
+
--
Packets sent from the destination to the source.

type: long

example: 12

--

*`destination.port`*::
+
--
Port of the destination.

type: long

format: string

--

*`destination.registered_domain`*::
+
--
The highest registered destination domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`destination.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`destination.user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`destination.user.email`*::
+
--
User email address.

type: keyword

--

*`destination.user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`destination.user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`destination.user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`destination.user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`destination.user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`destination.user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`destination.user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== dns

Fields describing DNS queries and answers.
DNS events should either represent a single DNS query prior to getting answers (`dns.type:query`) or they should represent a full exchange and contain the query details as well as all of the answers that were provided for this query (`dns.type:answer`).


*`dns.answers`*::
+
--
An array containing an object for each answer section returned by the server.
The main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.
Not all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.

type: object

--

*`dns.answers.class`*::
+
--
The class of DNS data contained in this resource record.

type: keyword

example: IN

--

*`dns.answers.data`*::
+
--
The data describing the resource.
The meaning of this data depends on the type and class of the resource record.

type: keyword

example: 10.10.10.10

--

*`dns.answers.name`*::
+
--
The domain name to which this resource record pertains.
If a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.

type: keyword

example: www.google.com

--

*`dns.answers.ttl`*::
+
--
The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.

type: long

example: 180

--

*`dns.answers.type`*::
+
--
The type of data contained in this resource record.

type: keyword

example: CNAME

--

*`dns.header_flags`*::
+
--
Array of 2 letter DNS header flags.
Expected values are: AA, TC, RD, RA, AD, CD, DO.

type: keyword

example: ['RD', 'RA']

--

*`dns.id`*::
+
--
The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.

type: keyword

example: 62111

--

*`dns.op_code`*::
+
--
The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.

type: keyword

example: QUERY

--

*`dns.question.class`*::
+
--
The class of of records being queried.

type: keyword

example: IN

--

*`dns.question.name`*::
+
--
The name being queried.
If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.

type: keyword

example: www.google.com

--

*`dns.question.registered_domain`*::
+
--
The highest registered domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`dns.question.subdomain`*::
+
--
The subdomain is all of the labels under the registered_domain.
If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

type: keyword

example: www

--

*`dns.question.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`dns.question.type`*::
+
--
The type of record being queried.

type: keyword

example: AAAA

--

*`dns.resolved_ip`*::
+
--
Array containing all IPs seen in `answers.data`.
The `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.

type: ip

example: ['10.10.10.10', '10.10.10.11']

--

*`dns.response_code`*::
+
--
The DNS response code.

type: keyword

example: NOERROR

--

*`dns.type`*::
+
--
The type of DNS event captured, query or answer.
If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.
If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.

type: keyword

example: answer

--

[float]
=== ecs

Meta-information specific to ECS.


*`ecs.version`*::
+
--
ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.

type: keyword

example: 1.0.0

required: True

--

[float]
=== error

These fields can represent errors of any kind.
Use them for errors that happen while fetching events or in cases where the event itself contains an error.


*`error.code`*::
+
--
Error code describing the error.

type: keyword

--

*`error.id`*::
+
--
Unique identifier for the error.

type: keyword

--

*`error.message`*::
+
--
Error message.

type: text

--

*`error.stack_trace`*::
+
--
The stack trace of this error in plain text.

type: keyword

--

*`error.type`*::
+
--
The type of the error, for example the class name of the exception.

type: keyword

example: java.lang.NullPointerException

--

[float]
=== event

The event fields are used for context information about the log or metric event itself.
A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical or categorical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host, or vulnerabilities measured on a scanned host.


*`event.action`*::
+
--
The action captured by the event.
This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.

type: keyword

example: user-password-change

--

*`event.category`*::
+
--
Event category.
This contains high-level information about the contents of the event. It is more generic than `event.action`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

type: keyword

example: user-management

--

*`event.code`*::
+
--
Identification code for this event, if one exists.
Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.

type: keyword

example: 4648

--

*`event.created`*::
+
--
event.created contains the date/time when the event was first read by an agent, or by your pipeline.
This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
In case the two timestamps are identical, @timestamp should be used.

type: date

--

*`event.dataset`*::
+
--
Name of the dataset.
If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.

type: keyword

example: apache.access

--

*`event.duration`*::
+
--
Duration of the event in nanoseconds.
If event.start and event.end are known this value should be the difference between the end and start time.

type: long

format: duration

--

*`event.end`*::
+
--
event.end contains the date when the event ended or when the activity was last observed.

type: date

--

*`event.hash`*::
+
--
Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.

type: keyword

example: 123456789012345678901234567890ABCD

--

*`event.id`*::
+
--
Unique ID to describe the event.

type: keyword

example: 8a4f500d

--

*`event.kind`*::
+
--
The kind of the event.
This gives information about what type of information the event contains, without being specific to the contents of the event.  Examples are `event`, `state`, `alarm`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

type: keyword

example: state

--

*`event.module`*::
+
--
Name of the module this data is coming from.
If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.

type: keyword

example: apache

--

*`event.original`*::
+
--
Raw text message of entire event. Used to demonstrate log integrity.
This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`.

type: keyword

example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232

--

*`event.outcome`*::
+
--
The outcome of the event.
If the event describes an action, this fields contains the outcome of that action. Examples outcomes are `success` and `failure`. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.

type: keyword

example: success

--

*`event.provider`*::
+
--
Source of the event.
Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).

type: keyword

example: kernel

--

*`event.risk_score`*::
+
--
Risk score or priority of the event (e.g. security solutions). Use your system's original value here.

type: float

--

*`event.risk_score_norm`*::
+
--
Normalized risk score or priority of the event, on a scale of 0 to 100.
This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.

type: float

--

*`event.sequence`*::
+
--
Sequence number of the event.
The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regarless of the timestamp precision.

type: long

format: string

--

*`event.severity`*::
+
--
The numeric severity of the event according to your event source.
What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.

type: long

example: 7

format: string

--

*`event.start`*::
+
--
event.start contains the date when the event started or when the activity was first observed.

type: date

--

*`event.timezone`*::
+
--
This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").

type: keyword

--

*`event.type`*::
+
--
Reserved for future usage.
Please avoid using this field for user data.

type: keyword

--

[float]
=== file

A file is defined as a set of information that has been created on, or has existed on a filesystem.
File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.


*`file.accessed`*::
+
--
Last time the file was accessed.
Note that not all filesystems keep track of access time.

type: date

--

*`file.created`*::
+
--
File creation time.
Note that not all filesystems store the creation time.

type: date

--

*`file.ctime`*::
+
--
Last time the file attributes or metadata changed.
Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.

type: date

--

*`file.device`*::
+
--
Device that is the source of the file.

type: keyword

example: sda

--

*`file.directory`*::
+
--
Directory where the file is located.

type: keyword

example: /home/alice

--

*`file.extension`*::
+
--
File extension.

type: keyword

example: png

--

*`file.gid`*::
+
--
Primary group ID (GID) of the file.

type: keyword

example: 1001

--

*`file.group`*::
+
--
Primary group name of the file.

type: keyword

example: alice

--

*`file.hash.md5`*::
+
--
MD5 hash.

type: keyword

--

*`file.hash.sha1`*::
+
--
SHA1 hash.

type: keyword

--

*`file.hash.sha256`*::
+
--
SHA256 hash.

type: keyword

--

*`file.hash.sha512`*::
+
--
SHA512 hash.

type: keyword

--

*`file.inode`*::
+
--
Inode representing the file in the filesystem.

type: keyword

example: 256383

--

*`file.mode`*::
+
--
Mode of the file in octal representation.

type: keyword

example: 0640

--

*`file.mtime`*::
+
--
Last time the file content was modified.

type: date

--

*`file.name`*::
+
--
Name of the file including the extension, without the directory.

type: keyword

example: example.png

--

*`file.owner`*::
+
--
File owner's username.

type: keyword

example: alice

--

*`file.path`*::
+
--
Full path to the file.

type: keyword

example: /home/alice/example.png

--

*`file.size`*::
+
--
File size in bytes.
Only relevant when `file.type` is "file".

type: long

example: 16384

--

*`file.target_path`*::
+
--
Target path for symlinks.

type: keyword

--

*`file.type`*::
+
--
File type (file, dir, or symlink).

type: keyword

example: file

--

*`file.uid`*::
+
--
The user ID (UID) or security identifier (SID) of the file owner.

type: keyword

example: 1001

--

[float]
=== geo

Geo fields can carry data about a specific location related to an event.
This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.


*`geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

[float]
=== group

The group fields are meant to represent groups that are relevant to the event.


*`group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`group.name`*::
+
--
Name of the group.

type: keyword

--

[float]
=== hash

The hash fields represent different hash algorithms and their values.
Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for other hashes by lowercasing the hash algorithm name and using underscore separators as appropriate (snake case, e.g. sha3_512).


*`hash.md5`*::
+
--
MD5 hash.

type: keyword

--

*`hash.sha1`*::
+
--
SHA1 hash.

type: keyword

--

*`hash.sha256`*::
+
--
SHA256 hash.

type: keyword

--

*`hash.sha512`*::
+
--
SHA512 hash.

type: keyword

--

[float]
=== host

A host is defined as a general computing instance.
ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.


*`host.architecture`*::
+
--
Operating system architecture.

type: keyword

example: x86_64

--

*`host.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`host.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`host.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`host.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`host.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`host.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`host.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`host.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`host.hostname`*::
+
--
Hostname of the host.
It normally contains what the `hostname` command returns on the host machine.

type: keyword

--

*`host.id`*::
+
--
Unique host id.
As hostname is not always unique, use values that are meaningful in your environment.
Example: The current usage of `beat.name`.

type: keyword

--

*`host.ip`*::
+
--
Host ip address.

type: ip

--

*`host.mac`*::
+
--
Host mac address.

type: keyword

--

*`host.name`*::
+
--
Name of the host.
It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.

type: keyword

--

*`host.os.family`*::
+
--
OS family (such as redhat, debian, freebsd, windows).

type: keyword

example: debian

--

*`host.os.full`*::
+
--
Operating system name, including the version or code name.

type: keyword

example: Mac OS Mojave

--

*`host.os.kernel`*::
+
--
Operating system kernel version as a raw string.

type: keyword

example: 4.4.0-112-generic

--

*`host.os.name`*::
+
--
Operating system name, without the version.

type: keyword

example: Mac OS X

--

*`host.os.platform`*::
+
--
Operating system platform (such centos, ubuntu, windows).

type: keyword

example: darwin

--

*`host.os.version`*::
+
--
Operating system version as a raw string.

type: keyword

example: 10.14.1

--

*`host.type`*::
+
--
Type of host.
For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.

type: keyword

--

*`host.uptime`*::
+
--
Seconds the host has been up.

type: long

example: 1325

--

*`host.user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`host.user.email`*::
+
--
User email address.

type: keyword

--

*`host.user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`host.user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`host.user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`host.user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`host.user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`host.user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`host.user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== http

Fields related to HTTP activity. Use the `url` field set to store the url of the request.


*`http.request.body.bytes`*::
+
--
Size in bytes of the request body.

type: long

example: 887

format: bytes

--

*`http.request.body.content`*::
+
--
The full HTTP request body.

type: keyword

example: Hello world

--

*`http.request.bytes`*::
+
--
Total size in bytes of the request (body and headers).

type: long

example: 1437

format: bytes

--

*`http.request.method`*::
+
--
HTTP request method.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

type: keyword

example: get, post, put

--

*`http.request.referrer`*::
+
--
Referrer for this HTTP request.

type: keyword

example: https://blog.example.com/

--

*`http.response.body.bytes`*::
+
--
Size in bytes of the response body.

type: long

example: 887

format: bytes

--

*`http.response.body.content`*::
+
--
The full HTTP response body.

type: keyword

example: Hello world

--

*`http.response.bytes`*::
+
--
Total size in bytes of the response (body and headers).

type: long

example: 1437

format: bytes

--

*`http.response.status_code`*::
+
--
HTTP response status code.

type: long

example: 404

format: string

--

*`http.version`*::
+
--
HTTP version.

type: keyword

example: 1.1

--

[float]
=== log

Details about the event's logging mechanism or logging transport.
The log.* fields are typically populated with details about the logging mechanism used to create and/or transport the event. For example, syslog details belong under `log.syslog.*`.
The details specific to your event source are typically not logged under `log.*`, but rather in `event.*` or in other ECS fields.


*`log.level`*::
+
--
Original log level of the log event.
If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
Some examples are `warn`, `err`, `i`, `informational`.

type: keyword

example: error

--

*`log.logger`*::
+
--
The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.

type: keyword

example: org.elasticsearch.bootstrap.Bootstrap

--

*`log.origin.file.line`*::
+
--
The line number of the file containing the source code which originated the log event.

type: integer

example: 42

--

*`log.origin.file.name`*::
+
--
The name of the file containing the source code which originated the log event. Note that this is not the name of the log file.

type: keyword

example: Bootstrap.java

--

*`log.origin.function`*::
+
--
The name of the function or method which originated the log event.

type: keyword

example: init

--

*`log.original`*::
+
--
This is the original log message and contains the full log message before splitting it up in multiple parts.
In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.

type: keyword

example: Sep 19 08:26:10 localhost My log

--

*`log.syslog`*::
+
--
The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.

type: object

--

*`log.syslog.facility.code`*::
+
--
The Syslog numeric facility of the log event, if available.
According to RFCs 5424 and 3164, this value should be an integer between 0 and 23.

type: long

example: 23

format: string

--

*`log.syslog.facility.name`*::
+
--
The Syslog text-based facility of the log event, if available.

type: keyword

example: local7

--

*`log.syslog.priority`*::
+
--
Syslog numeric priority of the event, if available.
According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This number is therefore expected to contain a value between 0 and 191.

type: long

example: 135

format: string

--

*`log.syslog.severity.code`*::
+
--
The Syslog numeric severity of the log event, if available.
If the event source publishing via Syslog provides a different numeric severity value (e.g. firewall, IDS), your source's numeric severity should go to `event.severity`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `event.severity`.

type: long

example: 3

--

*`log.syslog.severity.name`*::
+
--
The Syslog numeric severity of the log event, if available.
If the event source publishing via Syslog provides a different severity value (e.g. firewall, IDS), your source's text severity should go to `log.level`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `log.level`.

type: keyword

example: Error

--

[float]
=== network

The network is defined as the communication path over which a host or network event happens.
The network.* fields should be populated with details about the network activity associated with an event.


*`network.application`*::
+
--
A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

type: keyword

example: aim

--

*`network.bytes`*::
+
--
Total bytes transferred in both directions.
If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.

type: long

example: 368

format: bytes

--

*`network.community_id`*::
+
--
A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
Learn more at https://github.com/corelight/community-id-spec.

type: keyword

example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=

--

*`network.direction`*::
+
--
Direction of the network traffic.
Recommended values are:
  * inbound
  * outbound
  * internal
  * external
  * unknown

When mapping events from a host-based monitoring context, populate this field from the host's point of view.
When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.

type: keyword

example: inbound

--

*`network.forwarded_ip`*::
+
--
Host IP address when the source IP address is the proxy.

type: ip

example: 192.1.1.2

--

*`network.iana_number`*::
+
--
IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.

type: keyword

example: 6

--

*`network.name`*::
+
--
Name given by operators to sections of their network.

type: keyword

example: Guest Wifi

--

*`network.packets`*::
+
--
Total packets transferred in both directions.
If `source.packets` and `destination.packets` are known, `network.packets` is their sum.

type: long

example: 24

--

*`network.protocol`*::
+
--
L7 Network protocol name. ex. http, lumberjack, transport protocol.
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

type: keyword

example: http

--

*`network.transport`*::
+
--
Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

type: keyword

example: tcp

--

*`network.type`*::
+
--
In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".

type: keyword

example: ipv4

--

[float]
=== observer

An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics.
This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, web proxies, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.


*`observer.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`observer.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`observer.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`observer.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`observer.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`observer.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`observer.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`observer.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`observer.hostname`*::
+
--
Hostname of the observer.

type: keyword

--

*`observer.ip`*::
+
--
IP address of the observer.

type: ip

--

*`observer.mac`*::
+
--
MAC address of the observer

type: keyword

--

*`observer.name`*::
+
--
Custom name of the observer.
This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
If no custom name is needed, the field can be left empty.

type: keyword

example: 1_proxySG

--

*`observer.os.family`*::
+
--
OS family (such as redhat, debian, freebsd, windows).

type: keyword

example: debian

--

*`observer.os.full`*::
+
--
Operating system name, including the version or code name.

type: keyword

example: Mac OS Mojave

--

*`observer.os.kernel`*::
+
--
Operating system kernel version as a raw string.

type: keyword

example: 4.4.0-112-generic

--

*`observer.os.name`*::
+
--
Operating system name, without the version.

type: keyword

example: Mac OS X

--

*`observer.os.platform`*::
+
--
Operating system platform (such centos, ubuntu, windows).

type: keyword

example: darwin

--

*`observer.os.version`*::
+
--
Operating system version as a raw string.

type: keyword

example: 10.14.1

--

*`observer.product`*::
+
--
The product name of the observer.

type: keyword

example: s200

--

*`observer.serial_number`*::
+
--
Observer serial number.

type: keyword

--

*`observer.type`*::
+
--
The type of the observer the data is coming from.
There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.

type: keyword

example: firewall

--

*`observer.vendor`*::
+
--
Vendor name of the observer.

type: keyword

example: Symantec

--

*`observer.version`*::
+
--
Observer version.

type: keyword

--

[float]
=== organization

The organization fields enrich data with information about the company or entity the data is associated with.
These fields help you arrange or filter data stored in an index by one or multiple organizations.


*`organization.id`*::
+
--
Unique identifier for the organization.

type: keyword

--

*`organization.name`*::
+
--
Organization name.

type: keyword

--

[float]
=== os

The OS fields contain information about the operating system.


*`os.family`*::
+
--
OS family (such as redhat, debian, freebsd, windows).

type: keyword

example: debian

--

*`os.full`*::
+
--
Operating system name, including the version or code name.

type: keyword

example: Mac OS Mojave

--

*`os.kernel`*::
+
--
Operating system kernel version as a raw string.

type: keyword

example: 4.4.0-112-generic

--

*`os.name`*::
+
--
Operating system name, without the version.

type: keyword

example: Mac OS X

--

*`os.platform`*::
+
--
Operating system platform (such centos, ubuntu, windows).

type: keyword

example: darwin

--

*`os.version`*::
+
--
Operating system version as a raw string.

type: keyword

example: 10.14.1

--

[float]
=== package

These fields contain information about an installed software package. It contains general information about a package, such as name, version or size. It also contains installation details, such as time or location.


*`package.architecture`*::
+
--
Package architecture.

type: keyword

example: x86_64

--

*`package.checksum`*::
+
--
Checksum of the installed package for verification.

type: keyword

example: 68b329da9893e34099c7d8ad5cb9c940

--

*`package.description`*::
+
--
Description of the package.

type: keyword

example: Open source programming language to build simple/reliable/efficient software.

--

*`package.install_scope`*::
+
--
Indicating how the package was installed, e.g. user-local, global.

type: keyword

example: global

--

*`package.installed`*::
+
--
Time when package was installed.

type: date

--

*`package.license`*::
+
--
License under which the package was released.
Use a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).

type: keyword

example: Apache License 2.0

--

*`package.name`*::
+
--
Package name

type: keyword

example: go

--

*`package.path`*::
+
--
Path where the package is installed.

type: keyword

example: /usr/local/Cellar/go/1.12.9/

--

*`package.size`*::
+
--
Package size in bytes.

type: long

example: 62231

format: string

--

*`package.version`*::
+
--
Package version

type: keyword

example: 1.12.9

--

[float]
=== process

These fields contain information about a process.
These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.


*`process.args`*::
+
--
Array of process arguments.
May be filtered to protect sensitive information.

type: keyword

example: ['ssh', '-l', 'user', '10.0.0.16']

--

*`process.executable`*::
+
--
Absolute path to the process executable.

type: keyword

example: /usr/bin/ssh

--

*`process.hash.md5`*::
+
--
MD5 hash.

type: keyword

--

*`process.hash.sha1`*::
+
--
SHA1 hash.

type: keyword

--

*`process.hash.sha256`*::
+
--
SHA256 hash.

type: keyword

--

*`process.hash.sha512`*::
+
--
SHA512 hash.

type: keyword

--

*`process.name`*::
+
--
Process name.
Sometimes called program name or similar.

type: keyword

example: ssh

--

*`process.pgid`*::
+
--
Identifier of the group of processes the process belongs to.

type: long

format: string

--

*`process.pid`*::
+
--
Process id.

type: long

example: 4242

format: string

--

*`process.ppid`*::
+
--
Parent process' pid.

type: long

example: 4241

format: string

--

*`process.start`*::
+
--
The time the process started.

type: date

example: 2016-05-23T08:05:34.853Z

--

*`process.thread.id`*::
+
--
Thread ID.

type: long

example: 4242

format: string

--

*`process.thread.name`*::
+
--
Thread name.

type: keyword

example: thread-0

--

*`process.title`*::
+
--
Process title.
The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

type: keyword

--

*`process.uptime`*::
+
--
Seconds the process has been up.

type: long

example: 1325

--

*`process.working_directory`*::
+
--
The working directory of the process.

type: keyword

example: /home/alice

--

[float]
=== related

This field set is meant to facilitate pivoting around a piece of data.
Some pieces of information can be seen in many places in an ECS event. To facilitate searching for them, store an array of all seen values to their corresponding field in `related.`.
A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to `related.ip`, you can then search for a given IP trivially, no matter where it appeared, by querying `related.ip:a.b.c.d`.


*`related.ip`*::
+
--
All of the IPs seen on your event.

type: ip

--

[float]
=== server

A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records.
For TCP events, the server is the receiver of the initial SYN packet(s) of the TCP connection. For other protocols, the server is generally the responder in the network transaction. Some systems actually use the term "responder" to refer the server in TCP connections. The server fields describe details about the system acting as the server in the network event. Server fields are usually populated in conjunction with client fields. Server fields are generally not populated for packet-level events.
Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.


*`server.address`*::
+
--
Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword

--

*`server.as.number`*::
+
--
Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

type: long

example: 15169

--

*`server.as.organization.name`*::
+
--
Organization name.

type: keyword

example: Google LLC

--

*`server.bytes`*::
+
--
Bytes sent from the server to the client.

type: long

example: 184

format: bytes

--

*`server.domain`*::
+
--
Server domain.

type: keyword

--

*`server.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`server.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`server.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`server.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`server.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`server.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`server.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`server.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`server.ip`*::
+
--
IP address of the server.
Can be one or multiple IPv4 or IPv6 addresses.

type: ip

--

*`server.mac`*::
+
--
MAC address of the server.

type: keyword

--

*`server.nat.ip`*::
+
--
Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
Typically used with load balancers, firewalls, or routers.

type: ip

--

*`server.nat.port`*::
+
--
Translated port of destination based NAT sessions (e.g. internet to private DMZ)
Typically used with load balancers, firewalls, or routers.

type: long

format: string

--

*`server.packets`*::
+
--
Packets sent from the server to the client.

type: long

example: 12

--

*`server.port`*::
+
--
Port of the server.

type: long

format: string

--

*`server.registered_domain`*::
+
--
The highest registered server domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`server.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`server.user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`server.user.email`*::
+
--
User email address.

type: keyword

--

*`server.user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`server.user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`server.user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`server.user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`server.user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`server.user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`server.user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== service

The service fields describe the service for or from which the data was collected.
These fields help you find and correlate logs for a specific service and version.


*`service.ephemeral_id`*::
+
--
Ephemeral identifier of this service (if one exists).
This id normally changes across restarts, but `service.id` does not.

type: keyword

example: 8a4f500f

--

*`service.id`*::
+
--
Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.
This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.
Note that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.

type: keyword

example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

--

*`service.name`*::
+
--
Name of the service data is collected from.
The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.

type: keyword

example: elasticsearch-metrics

--

*`service.node.name`*::
+
--
Name of a service node.
This allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.
In the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.

type: keyword

example: instance-0000000016

--

*`service.state`*::
+
--
Current state of the service.

type: keyword

--

*`service.type`*::
+
--
The type of the service data is collected from.
The type can be used to group and correlate logs and metrics from one service type.
Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.

type: keyword

example: elasticsearch

--

*`service.version`*::
+
--
Version of the service the data was collected from.
This allows to look at a data set only for a specific version of a service.

type: keyword

example: 3.2.4

--

[float]
=== source

Source fields describe details about the source of a packet/event.
Source fields are usually populated in conjunction with destination fields.


*`source.address`*::
+
--
Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.

type: keyword

--

*`source.as.number`*::
+
--
Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

type: long

example: 15169

--

*`source.as.organization.name`*::
+
--
Organization name.

type: keyword

example: Google LLC

--

*`source.bytes`*::
+
--
Bytes sent from the source to the destination.

type: long

example: 184

format: bytes

--

*`source.domain`*::
+
--
Source domain.

type: keyword

--

*`source.geo.city_name`*::
+
--
City name.

type: keyword

example: Montreal

--

*`source.geo.continent_name`*::
+
--
Name of the continent.

type: keyword

example: North America

--

*`source.geo.country_iso_code`*::
+
--
Country ISO code.

type: keyword

example: CA

--

*`source.geo.country_name`*::
+
--
Country name.

type: keyword

example: Canada

--

*`source.geo.location`*::
+
--
Longitude and latitude.

type: geo_point

example: { "lon": -73.614830, "lat": 45.505918 }

--

*`source.geo.name`*::
+
--
User-defined description of a location, at the level of granularity they care about.
Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
Not typically used in automated geolocation.

type: keyword

example: boston-dc

--

*`source.geo.region_iso_code`*::
+
--
Region ISO code.

type: keyword

example: CA-QC

--

*`source.geo.region_name`*::
+
--
Region name.

type: keyword

example: Quebec

--

*`source.ip`*::
+
--
IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.

type: ip

--

*`source.mac`*::
+
--
MAC address of the source.

type: keyword

--

*`source.nat.ip`*::
+
--
Translated ip of source based NAT sessions (e.g. internal client to internet)
Typically connections traversing load balancers, firewalls, or routers.

type: ip

--

*`source.nat.port`*::
+
--
Translated port of source based NAT sessions. (e.g. internal client to internet)
Typically used with load balancers, firewalls, or routers.

type: long

format: string

--

*`source.packets`*::
+
--
Packets sent from the source to the destination.

type: long

example: 12

--

*`source.port`*::
+
--
Port of the source.

type: long

format: string

--

*`source.registered_domain`*::
+
--
The highest registered source domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`source.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`source.user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`source.user.email`*::
+
--
User email address.

type: keyword

--

*`source.user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`source.user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`source.user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`source.user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`source.user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`source.user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`source.user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== threat

Fields to classify events and alerts according to a threat taxonomy such as the Mitre ATT&CK framework.
These fields are for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.) within a  common taxonomy. The threat.tactic.* are meant to capture the high level category of the threat  (e.g. "impact"). The threat.technique.* fields are meant to capture which kind of approach is used by  this detected threat, to accomplish the goal (e.g. "endpoint denial of service").


*`threat.framework`*::
+
--
Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat.   Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.

type: keyword

example: MITRE ATT&CK

--

*`threat.tactic.id`*::
+
--
The id of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: TA0040

--

*`threat.tactic.name`*::
+
--
Name of the type of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: impact

--

*`threat.tactic.reference`*::
+
--
The reference url of tactic used by this threat. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/ )

type: keyword

example: https://attack.mitre.org/tactics/TA0040/

--

*`threat.technique.id`*::
+
--
The id of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

example: T1499

--

*`threat.technique.name`*::
+
--
The name of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

example: endpoint denial of service

--

*`threat.technique.reference`*::
+
--
The reference url of technique used by this tactic. You can use the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/ )

type: keyword

example: https://attack.mitre.org/techniques/T1499/

--

[float]
=== tracing

Distributed tracing makes it possible to analyze performance throughout a microservice architecture all in one view. This is accomplished by tracing all of the requests - from the initial web request in the front-end service - to queries made through multiple back-end services.


*`tracing.trace.id`*::
+
--
Unique identifier of the trace.
A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.

type: keyword

example: 4bf92f3577b34da6a3ce929d0e0e4736

--

*`tracing.transaction.id`*::
+
--
Unique identifier of the transaction.
A transaction is the highest level of work measured within a service, such as a request to a server.

type: keyword

example: 00f067aa0ba902b7

--

[float]
=== url

URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.


*`url.domain`*::
+
--
Domain of the url, such as "www.elastic.co".
In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.

type: keyword

example: www.elastic.co

--

*`url.extension`*::
+
--
The field contains the file extension from the original request url.
The file extension is only set if it exists, as not every url has a file extension.
The leading period must not be included. For example, the value must be "png", not ".png".

type: keyword

example: png

--

*`url.fragment`*::
+
--
Portion of the url after the `#`, such as "top".
The `#` is not part of the fragment.

type: keyword

--

*`url.full`*::
+
--
If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.

type: keyword

example: https://www.elastic.co:443/search?q=elasticsearch#top

--

*`url.original`*::
+
--
Unmodified original url as seen in the event source.
Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
This field is meant to represent the URL as it was observed, complete or not.

type: keyword

example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

--

*`url.password`*::
+
--
Password of the request.

type: keyword

--

*`url.path`*::
+
--
Path of the request, such as "/search".

type: keyword

--

*`url.port`*::
+
--
Port of the request, such as 443.

type: long

example: 443

format: string

--

*`url.query`*::
+
--
The query field describes the query string of the request, such as "q=elasticsearch".
The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.

type: keyword

--

*`url.registered_domain`*::
+
--
The highest registered url domain, stripped of the subdomain.
For example, the registered domain for "foo.google.com" is "google.com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

type: keyword

example: google.com

--

*`url.scheme`*::
+
--
Scheme of the request, such as "https".
Note: The `:` is not part of the scheme.

type: keyword

example: https

--

*`url.top_level_domain`*::
+
--
The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for google.com is "com".
This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

type: keyword

example: co.uk

--

*`url.username`*::
+
--
Username of the request.

type: keyword

--

[float]
=== user

The user fields describe information about the user that is relevant to the event.
Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.


*`user.domain`*::
+
--
Name of the directory the user is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`user.email`*::
+
--
User email address.

type: keyword

--

*`user.full_name`*::
+
--
User's full name, if available.

type: keyword

example: Albert Einstein

--

*`user.group.domain`*::
+
--
Name of the directory the group is a member of.
For example, an LDAP or Active Directory domain name.

type: keyword

--

*`user.group.id`*::
+
--
Unique identifier for the group on the system/platform.

type: keyword

--

*`user.group.name`*::
+
--
Name of the group.

type: keyword

--

*`user.hash`*::
+
--
Unique user hash to correlate information for a user in anonymized form.
Useful if `user.id` or `user.name` contain confidential information and cannot be used.

type: keyword

--

*`user.id`*::
+
--
One or multiple unique identifiers of the user.

type: keyword

--

*`user.name`*::
+
--
Short name or login of the user.

type: keyword

example: albert

--

[float]
=== user_agent

The user_agent fields normally come from a browser request.
They often show up in web service logs coming from the parsed user agent string.


*`user_agent.device.name`*::
+
--
Name of the device.

type: keyword

example: iPhone

--

*`user_agent.name`*::
+
--
Name of the user agent.

type: keyword

example: Safari

--

*`user_agent.original`*::
+
--
Unparsed version of the user_agent.

type: keyword

example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1

--

*`user_agent.os.family`*::
+
--
OS family (such as redhat, debian, freebsd, windows).

type: keyword

example: debian

--

*`user_agent.os.full`*::
+
--
Operating system name, including the version or code name.

type: keyword

example: Mac OS Mojave

--

*`user_agent.os.kernel`*::
+
--
Operating system kernel version as a raw string.

type: keyword

example: 4.4.0-112-generic

--

*`user_agent.os.name`*::
+
--
Operating system name, without the version.

type: keyword

example: Mac OS X

--

*`user_agent.os.platform`*::
+
--
Operating system platform (such centos, ubuntu, windows).

type: keyword

example: darwin

--

*`user_agent.os.version`*::
+
--
Operating system version as a raw string.

type: keyword

example: 10.14.1

--

*`user_agent.version`*::
+
--
Version of the user agent.

type: keyword

example: 12.0

--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.containerized`*::
+
--
If the host is a container.


type: boolean

--

*`host.os.build`*::
+
--
OS build information.


type: keyword

example: 18D109

--

*`host.os.codename`*::
+
--
OS codename, if any.


type: keyword

example: stretch

--

[[exported-fields-jolokia-autodiscover]]
== Jolokia Discovery autodiscover provider fields

Metadata from Jolokia Discovery added by the jolokia provider.



*`jolokia.agent.version`*::
+
--
Version number of jolokia agent.


type: keyword

--

*`jolokia.agent.id`*::
+
--
Each agent has a unique id which can be either provided during startup of the agent in form of a configuration parameter or being autodetected. If autodected, the id has several parts: The IP, the process id, hashcode of the agent and its type.


type: keyword

--

*`jolokia.server.product`*::
+
--
The container product if detected.


type: keyword

--

*`jolokia.server.version`*::
+
--
The container's version (if detected).


type: keyword

--

*`jolokia.server.vendor`*::
+
--
The vendor of the container the agent is running in.


type: keyword

--

*`jolokia.url`*::
+
--
The URL how this agent can be contacted.


type: keyword

--

*`jolokia.secured`*::
+
--
Whether the agent was configured for authentication or not.


type: boolean

--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
Kubernetes pod name


type: keyword

--

*`kubernetes.pod.uid`*::
+
--
Kubernetes Pod UID


type: keyword

--

*`kubernetes.namespace`*::
+
--
Kubernetes namespace


type: keyword

--

*`kubernetes.node.name`*::
+
--
Kubernetes node name


type: keyword

--

*`kubernetes.labels.*`*::
+
--
Kubernetes labels map


type: object

--

*`kubernetes.annotations.*`*::
+
--
Kubernetes annotations map


type: object

--

*`kubernetes.replicaset.name`*::
+
--
Kubernetes replicaset name


type: keyword

--

*`kubernetes.deployment.name`*::
+
--
Kubernetes deployment name


type: keyword

--

*`kubernetes.statefulset.name`*::
+
--
Kubernetes statefulset name


type: keyword

--

*`kubernetes.container.name`*::
+
--
Kubernetes container name


type: keyword

--

*`kubernetes.container.image`*::
+
--
Kubernetes container image


type: keyword

--

[[exported-fields-mssql]]
== MSSQL fields

MS SQL module


[float]
=== mssql

The root field containing all MSSQL fields


[float]
=== database

The database that the metrics is being referred to


*`mssql.database.id`*::
+
--
Unique ID of the database inside MSSQL

type: long

--

*`mssql.database.name`*::
+
--
Name of the database

type: keyword

--

[float]
=== performance

performance metricset fetches information about the Performance Counters


*`mssql.performance.page_splits_per_sec`*::
+
--
Number of page splits per second that occur as the result of overflowing index pages.

type: long

--

*`mssql.performance.lock_waits_per_sec`*::
+
--
Number of lock requests per second that required the caller to wait.

type: long

--

*`mssql.performance.user_connections`*::
+
--
Total number of user connections

type: long

--

*`mssql.performance.transactions`*::
+
--
Total number of transactions

type: long

--

*`mssql.performance.active_temp_tables`*::
+
--
Number of temporary tables/table variables in use.

type: long

--

*`mssql.performance.connections_reset_per_sec`*::
+
--
Total number of logins started from the connection pool.

type: long

--

*`mssql.performance.logins_per_sec`*::
+
--
Total number of logins started per second. This does not include pooled connections.

type: long

--

*`mssql.performance.logouts_per_sec`*::
+
--
Total number of logout operations started per second.

type: long

--

*`mssql.performance.recompilations_per_sec`*::
+
--
Number of statement recompiles per second. Counts the number of times statement recompiles are triggered. Generally, you want the recompiles to be low.

type: long

--

*`mssql.performance.compilations_per_sec`*::
+
--
Number of SQL compilations per second. Indicates the number of times the compile code path is entered. Includes compiles caused by statement-level recompilations in SQL Server. After SQL Server user activity is stable, this value reaches a steady state.

type: long

--

*`mssql.performance.batch_requests_per_sec`*::
+
--
Number of Transact-SQL command batches received per second. This statistic is affected by all constraints (such as I/O, number of users, cache size, complexity of requests, and so on). High batch requests mean good throughput.

type: long

--


[float]
=== cache_hit

Indicates the percentage of pages found in the buffer cache without having to read from disk.


*`mssql.performance.buffer.cache_hit.pct`*::
+
--
The ratio is the total number of cache hits divided by the total number of cache lookups over the last few thousand page accesses. After a long period of time, the ratio moves very little. Because reading from the cache is much less expensive than reading from disk, you want this ratio to be high

type: double

--

[float]
=== page_life_expectancy

Indicates the number of seconds a page will stay in the buffer pool without references.


*`mssql.performance.buffer.page_life_expectancy.sec`*::
+
--
Indicates the number of seconds a page will stay in the buffer pool without references (in seconds).

type: long

--

*`mssql.performance.buffer.checkpoint_pages_per_sec`*::
+
--
Indicates the number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed.

type: long

--

*`mssql.performance.buffer.database_pages`*::
+
--
Indicates the number of pages in the buffer pool with database content.

type: long

--

*`mssql.performance.buffer.target_pages`*::
+
--
Ideal number of pages in the buffer pool.

type: long

--

[float]
=== transaction_log

transaction_log metricset will fetch information about the operation and transaction log of each database from a MSSQL instance


[float]
=== space_usage

Space usage information for the transaction log


[float]
=== since_last_backup

The amount of space used since the last log backup


*`mssql.transaction_log.space_usage.since_last_backup.bytes`*::
+
--
The amount of space used since the last log backup in bytes

type: long

--

[float]
=== total

The size of the log


*`mssql.transaction_log.space_usage.total.bytes`*::
+
--
The size of the log in bytes

type: long

--

[float]
=== used

The occupied size of the log


*`mssql.transaction_log.space_usage.used.bytes`*::
+
--
The occupied size of the log in bytes

type: long

--

*`mssql.transaction_log.space_usage.used.pct`*::
+
--
A percentage of the occupied size of the log as a percent of the total log size

type: float

--

[float]
=== stats

Returns summary level attributes and information on transaction log files of databases. Use this information for monitoring and diagnostics of transaction log health.


[float]
=== active_size

Total active transaction log size.


*`mssql.transaction_log.stats.active_size.bytes`*::
+
--
Total active transaction log size in bytes

type: long

--

*`mssql.transaction_log.stats.backup_time`*::
+
--
Last transaction log backup time.

type: date

--

[float]
=== recovery_size

Log size since log recovery log sequence number (LSN).


*`mssql.transaction_log.stats.recovery_size.bytes`*::
+
--
Log size in bytes since log recovery log sequence number (LSN).

type: long

--

[float]
=== since_last_checkpoint

Log size since last checkpoint log sequence number (LSN).


*`mssql.transaction_log.stats.since_last_checkpoint.bytes`*::
+
--
Log size in bytes since last checkpoint log sequence number (LSN).

type: long

--

[float]
=== total_size

Total transaction log size.


*`mssql.transaction_log.stats.total_size.bytes`*::
+
--
Total transaction log size in bytes.

type: long

--

[[exported-fields-oracle]]
== Oracle fields

Oracle database module


[float]
=== oracle

Oracle module


[float]
=== performance

Performance related metrics on a single database instance


*`oracle.performance.machine`*::
+
--
Operating system machine name

type: keyword

--

*`oracle.performance.buffer_pool`*::
+
--
Name of the buffer pool in the instance

type: keyword

--

*`oracle.performance.username`*::
+
--
Oracle username

type: keyword

--

*`oracle.performance.io_reloads`*::
+
--
Reloads / Pins ratio. A Reload is any PIN of an object that is not the first PIN performed since the object handle was created, and which requires loading the object from disk. Pins are the number of times a PIN was requested for objects of this namespace

type: double

--

*`oracle.performance.lock_requests`*::
+
--
Average of the ratio between 'gethits' and 'gets' being 'Gethits' the number of times an object's handle was found in memory and 'gets' the number of times a lock was requested for objects of this namespace.

type: long

--

*`oracle.performance.pin_requests`*::
+
--
Average of all pinhits/pins ratios being 'PinHits' the number of times all of the metadata pieces of the library object were found in memory and 'pins' the number of times a PIN was requested for objects of this namespace

type: double

--

[float]
=== cache

Statistics about all buffer pools available for the instance


*`oracle.performance.cache.buffer.hit.pct`*::
+
--
The cache hit ratio of the specified buffer pool.

type: double

--

*`oracle.performance.cache.physical_reads`*::
+
--
Physical reads

type: long

--

[float]
=== get

Buffer pool 'get' statistics


*`oracle.performance.cache.get.consistent`*::
+
--
Consistent gets statistic

type: long

--

*`oracle.performance.cache.get.db_blocks`*::
+
--
Database blocks gotten

type: long

--

[float]
=== cursors

Cursors information


*`oracle.performance.cursors.avg`*::
+
--
Average cursors opened by username and machine

type: double

--

*`oracle.performance.cursors.max`*::
+
--
Max cursors opened by username and machine

type: double

--

*`oracle.performance.cursors.total`*::
+
--
Total opened cursors by username and machine

type: double

--

[float]
=== opened

Opened cursors statistic


*`oracle.performance.cursors.opened.current`*::
+
--
Total number of current open cursors

type: long

--

*`oracle.performance.cursors.opened.total`*::
+
--
Total number of cursors opened since the instance started

type: long

--

[float]
=== parse

Parses statistic information that occured in the current session


*`oracle.performance.cursors.parse.real`*::
+
--
Real number of parses that occurred: session cursor cache hits - parse count (total)

type: long

--

*`oracle.performance.cursors.parse.total`*::
+
--
Total number of parse calls (hard and soft). A soft parse is a check on an object already in the shared pool, to verify that the permissions on the underlying object have not changed.

type: long

--

*`oracle.performance.cursors.session.cache_hits`*::
+
--
Number of hits in the session cursor cache. A hit means that the SQL statement did not have to be reparsed.

type: long

--

*`oracle.performance.cursors.cache_hit.pct`*::
+
--
Ratio of session cursor cache hits from total number of cursors

type: double

--

[float]
=== tablespace

tablespace


*`oracle.tablespace.name`*::
+
--
Tablespace name

type: keyword

--

[float]
=== data_file

Database files information


*`oracle.tablespace.data_file.id`*::
+
--
Tablespace unique identifier

type: long

--

*`oracle.tablespace.data_file.name`*::
+
--
Filename of the data file

type: keyword

--

[float]
=== size

Size information about the file


*`oracle.tablespace.data_file.size.max.bytes`*::
+
--
Maximum file size in bytes

type: long

format: bytes

--

*`oracle.tablespace.data_file.size.bytes`*::
+
--
Size of the file in bytes

type: long

format: bytes

--

*`oracle.tablespace.data_file.size.free.bytes`*::
+
--
The size of the file available for user data. The actual size of the file minus this value is used to store file related metadata.


type: long

format: bytes

--

*`oracle.tablespace.data_file.status`*::
+
--
'File status: AVAILABLE or INVALID (INVALID means that the file number is not in use, for example, a file in a tablespace that was dropped)'


type: keyword

--

*`oracle.tablespace.data_file.online_status`*::
+
--
Last known online status of the data file. One of SYSOFF, SYSTEM, OFFLINE, ONLINE or RECOVER.

type: keyword

--

[float]
=== space

Tablespace space usage information


*`oracle.tablespace.space.free.bytes`*::
+
--
Tablespace total free space available, in bytes.

type: long

format: bytes

--

*`oracle.tablespace.space.used.bytes`*::
+
--
Tablespace used space, in bytes.

type: long

format: bytes

--

*`oracle.tablespace.space.total.bytes`*::
+
--
Tablespace total size, in bytes.

type: long

format: bytes

--

[[exported-fields-process]]
== Process fields

Process metadata fields




*`process.exe`*::
+
--
type: alias

alias to: process.executable

--

[[exported-fields-statsd]]
== Statsd fields

Statsd module



*`statsd.*.count`*::
+
--
Statsd counters


type: object

--

*`statsd.*.*`*::
+
--
Statsd metrics - release: beta


type: object

--

[[exported-fields-system]]
== System fields

System status metrics, like CPU and memory usage, that are collected from the operating system.



[float]
=== system

`system` contains local system metrics.



[float]
=== core

`system-core` contains CPU metrics for a single core of a multi-core system.



*`system.core.id`*::
+
--
CPU Core number.


type: long

--

*`system.core.user.pct`*::
+
--
The percentage of CPU time spent in user space.


type: scaled_float

format: percent

--

*`system.core.user.ticks`*::
+
--
The amount of CPU time spent in user space.


type: long

--

*`system.core.system.pct`*::
+
--
The percentage of CPU time spent in kernel space.


type: scaled_float

format: percent

--

*`system.core.system.ticks`*::
+
--
The amount of CPU time spent in kernel space.


type: long

--

*`system.core.nice.pct`*::
+
--
The percentage of CPU time spent on low-priority processes.


type: scaled_float

format: percent

--

*`system.core.nice.ticks`*::
+
--
The amount of CPU time spent on low-priority processes.


type: long

--

*`system.core.idle.pct`*::
+
--
The percentage of CPU time spent idle.


type: scaled_float

format: percent

--

*`system.core.idle.ticks`*::
+
--
The amount of CPU time spent idle.


type: long

--

*`system.core.iowait.pct`*::
+
--
The percentage of CPU time spent in wait (on disk).


type: scaled_float

format: percent

--

*`system.core.iowait.ticks`*::
+
--
The amount of CPU time spent in wait (on disk).


type: long

--

*`system.core.irq.pct`*::
+
--
The percentage of CPU time spent servicing and handling hardware interrupts.


type: scaled_float

format: percent

--

*`system.core.irq.ticks`*::
+
--
The amount of CPU time spent servicing and handling hardware interrupts.


type: long

--

*`system.core.softirq.pct`*::
+
--
The percentage of CPU time spent servicing and handling software interrupts.


type: scaled_float

format: percent

--

*`system.core.softirq.ticks`*::
+
--
The amount of CPU time spent servicing and handling software interrupts.


type: long

--

*`system.core.steal.pct`*::
+
--
The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


type: scaled_float

format: percent

--

*`system.core.steal.ticks`*::
+
--
The amount of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


type: long

--

[float]
=== cpu

`cpu` contains local CPU stats.



*`system.cpu.cores`*::
+
--
The number of CPU cores present on the host. The non-normalized percentages will have a maximum value of `100% * cores`. The normalized percentages already take this value into account and have a maximum value of 100%.


type: long

--

*`system.cpu.user.pct`*::
+
--
The percentage of CPU time spent in user space. On multi-core systems, you can have percentages that are greater than 100%. For example, if 3 cores are at 60% use, then the `system.cpu.user.pct` will be 180%.


type: scaled_float

format: percent

--

*`system.cpu.system.pct`*::
+
--
The percentage of CPU time spent in kernel space.


type: scaled_float

format: percent

--

*`system.cpu.nice.pct`*::
+
--
The percentage of CPU time spent on low-priority processes.


type: scaled_float

format: percent

--

*`system.cpu.idle.pct`*::
+
--
The percentage of CPU time spent idle.


type: scaled_float

format: percent

--

*`system.cpu.iowait.pct`*::
+
--
The percentage of CPU time spent in wait (on disk).


type: scaled_float

format: percent

--

*`system.cpu.irq.pct`*::
+
--
The percentage of CPU time spent servicing and handling hardware interrupts.


type: scaled_float

format: percent

--

*`system.cpu.softirq.pct`*::
+
--
The percentage of CPU time spent servicing and handling software interrupts.


type: scaled_float

format: percent

--

*`system.cpu.steal.pct`*::
+
--
The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


type: scaled_float

format: percent

--

*`system.cpu.total.pct`*::
+
--
The percentage of CPU time spent in states other than Idle and IOWait.


type: scaled_float

format: percent

--

*`system.cpu.user.norm.pct`*::
+
--
The percentage of CPU time spent in user space.


type: scaled_float

format: percent

--

*`system.cpu.system.norm.pct`*::
+
--
The percentage of CPU time spent in kernel space.


type: scaled_float

format: percent

--

*`system.cpu.nice.norm.pct`*::
+
--
The percentage of CPU time spent on low-priority processes.


type: scaled_float

format: percent

--

*`system.cpu.idle.norm.pct`*::
+
--
The percentage of CPU time spent idle.


type: scaled_float

format: percent

--

*`system.cpu.iowait.norm.pct`*::
+
--
The percentage of CPU time spent in wait (on disk).


type: scaled_float

format: percent

--

*`system.cpu.irq.norm.pct`*::
+
--
The percentage of CPU time spent servicing and handling hardware interrupts.


type: scaled_float

format: percent

--

*`system.cpu.softirq.norm.pct`*::
+
--
The percentage of CPU time spent servicing and handling software interrupts.


type: scaled_float

format: percent

--

*`system.cpu.steal.norm.pct`*::
+
--
The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


type: scaled_float

format: percent

--

*`system.cpu.total.norm.pct`*::
+
--
The percentage of CPU time in states other than Idle and IOWait, normalised by the number of cores.


type: scaled_float

format: percent

--

*`system.cpu.user.ticks`*::
+
--
The amount of CPU time spent in user space.


type: long

--

*`system.cpu.system.ticks`*::
+
--
The amount of CPU time spent in kernel space.


type: long

--

*`system.cpu.nice.ticks`*::
+
--
The amount of CPU time spent on low-priority processes.


type: long

--

*`system.cpu.idle.ticks`*::
+
--
The amount of CPU time spent idle.


type: long

--

*`system.cpu.iowait.ticks`*::
+
--
The amount of CPU time spent in wait (on disk).


type: long

--

*`system.cpu.irq.ticks`*::
+
--
The amount of CPU time spent servicing and handling hardware interrupts.


type: long

--

*`system.cpu.softirq.ticks`*::
+
--
The amount of CPU time spent servicing and handling software interrupts.


type: long

--

*`system.cpu.steal.ticks`*::
+
--
The amount of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


type: long

--

[float]
=== diskio

`disk` contains disk IO metrics collected from the operating system.



*`system.diskio.name`*::
+
--
The disk name.


type: keyword

example: sda1

--

*`system.diskio.serial_number`*::
+
--
The disk's serial number. This may not be provided by all operating systems.


type: keyword

--

*`system.diskio.read.count`*::
+
--
The total number of reads completed successfully.


type: long

--

*`system.diskio.write.count`*::
+
--
The total number of writes completed successfully.


type: long

--

*`system.diskio.read.bytes`*::
+
--
The total number of bytes read successfully. On Linux this is the number of sectors read multiplied by an assumed sector size of 512.


type: long

format: bytes

--

*`system.diskio.write.bytes`*::
+
--
The total number of bytes written successfully. On Linux this is the number of sectors written multiplied by an assumed sector size of 512.


type: long

format: bytes

--

*`system.diskio.read.time`*::
+
--
The total number of milliseconds spent by all reads.


type: long

--

*`system.diskio.write.time`*::
+
--
The total number of milliseconds spent by all writes.


type: long

--

*`system.diskio.io.time`*::
+
--
The total number of of milliseconds spent doing I/Os.


type: long

--

*`system.diskio.iostat.read.request.merges_per_sec`*::
+
--
The number of read requests merged per second that were queued to the device.


type: float

--

*`system.diskio.iostat.write.request.merges_per_sec`*::
+
--
The number of write requests merged per second that were queued to the device.


type: float

--

*`system.diskio.iostat.read.request.per_sec`*::
+
--
The number of read requests that were issued to the device per second


type: float

--

*`system.diskio.iostat.write.request.per_sec`*::
+
--
The number of write requests that were issued to the device per second


type: float

--

*`system.diskio.iostat.read.per_sec.bytes`*::
+
--
The number of Bytes read from the device per second.


type: float

format: bytes

--

*`system.diskio.iostat.read.await`*::
+
--
The average time spent for read requests issued to the device to be served.


type: float

--

*`system.diskio.iostat.write.per_sec.bytes`*::
+
--
The number of Bytes write from the device per second.


type: float

format: bytes

--

*`system.diskio.iostat.write.await`*::
+
--
The average time spent for write requests issued to the device to be served.


type: float

--

*`system.diskio.iostat.request.avg_size`*::
+
--
The average size (in sectors) of the requests that were issued to the device.


type: float

--

*`system.diskio.iostat.queue.avg_size`*::
+
--
The average queue length of the requests that were issued to the device.


type: float

--

*`system.diskio.iostat.await`*::
+
--
The average time spent for requests issued to the device to be served.


type: float

--

*`system.diskio.iostat.service_time`*::
+
--
The average service time (in milliseconds) for I/O requests that were issued to the device.


type: float

--

*`system.diskio.iostat.busy`*::
+
--
Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%.


type: float

--

[float]
=== entropy

Available system entropy



*`system.entropy.available_bits`*::
+
--
The available bits of entropy


type: long

--

*`system.entropy.pct`*::
+
--
The percentage of available entropy, relative to the pool size of 4096


type: scaled_float

format: percent

--

[float]
=== filesystem

`filesystem` contains local filesystem stats.



*`system.filesystem.available`*::
+
--
The disk space available to an unprivileged user in bytes.


type: long

format: bytes

--

*`system.filesystem.device_name`*::
+
--
The disk name. For example: `/dev/disk1`


type: keyword

--

*`system.filesystem.type`*::
+
--
The disk type. For example: `ext4`


type: keyword

--

*`system.filesystem.mount_point`*::
+
--
The mounting point. For example: `/`


type: keyword

--

*`system.filesystem.files`*::
+
--
The total number of file nodes in the file system.


type: long

--

*`system.filesystem.free`*::
+
--
The disk space available in bytes.


type: long

format: bytes

--

*`system.filesystem.free_files`*::
+
--
The number of free file nodes in the file system.


type: long

--

*`system.filesystem.total`*::
+
--
The total disk space in bytes.


type: long

format: bytes

--

*`system.filesystem.used.bytes`*::
+
--
The used disk space in bytes.


type: long

format: bytes

--

*`system.filesystem.used.pct`*::
+
--
The percentage of used disk space.


type: scaled_float

format: percent

--

[float]
=== fsstat

`system.fsstat` contains filesystem metrics aggregated from all mounted filesystems.



*`system.fsstat.count`*::
+
--
Number of file systems found.

type: long

--

*`system.fsstat.total_files`*::
+
--
Total number of files.

type: long

--

[float]
=== total_size

Nested file system docs.


*`system.fsstat.total_size.free`*::
+
--
Total free space.


type: long

format: bytes

--

*`system.fsstat.total_size.used`*::
+
--
Total used space.


type: long

format: bytes

--

*`system.fsstat.total_size.total`*::
+
--
Total space (used plus free).


type: long

format: bytes

--

[float]
=== load

CPU load averages.



*`system.load.1`*::
+
--
Load average for the last minute.


type: scaled_float

--

*`system.load.5`*::
+
--
Load average for the last 5 minutes.


type: scaled_float

--

*`system.load.15`*::
+
--
Load average for the last 15 minutes.


type: scaled_float

--

*`system.load.norm.1`*::
+
--
Load for the last minute divided by the number of cores.


type: scaled_float

--

*`system.load.norm.5`*::
+
--
Load for the last 5 minutes divided by the number of cores.


type: scaled_float

--

*`system.load.norm.15`*::
+
--
Load for the last 15 minutes divided by the number of cores.


type: scaled_float

--

*`system.load.cores`*::
+
--
The number of CPU cores present on the host.


type: long

--

[float]
=== memory

`memory` contains local memory stats.



*`system.memory.total`*::
+
--
Total memory.


type: long

format: bytes

--

*`system.memory.used.bytes`*::
+
--
Used memory.


type: long

format: bytes

--

*`system.memory.free`*::
+
--
The total amount of free memory in bytes. This value does not include memory consumed by system caches and buffers (see system.memory.actual.free).


type: long

format: bytes

--

*`system.memory.used.pct`*::
+
--
The percentage of used memory.


type: scaled_float

format: percent

--

[float]
=== actual

Actual memory used and free.



*`system.memory.actual.used.bytes`*::
+
--
Actual used memory in bytes. It represents the difference between the total and the available memory. The available memory depends on the OS. For more details, please check `system.actual.free`.


type: long

format: bytes

--

*`system.memory.actual.free`*::
+
--
Actual free memory in bytes. It is calculated based on the OS. On Linux it consists of the free memory plus caches and buffers. On OSX it is a sum of free memory and the inactive memory. On Windows, it is equal to `system.memory.free`.


type: long

format: bytes

--

*`system.memory.actual.used.pct`*::
+
--
The percentage of actual used memory.


type: scaled_float

format: percent

--

[float]
=== swap

This group contains statistics related to the swap memory usage on the system.


*`system.memory.swap.total`*::
+
--
Total swap memory.


type: long

format: bytes

--

*`system.memory.swap.used.bytes`*::
+
--
Used swap memory.


type: long

format: bytes

--

*`system.memory.swap.free`*::
+
--
Available swap memory.


type: long

format: bytes

--

*`system.memory.swap.out.pages`*::
+
--
count of pages swapped out

type: long

--

*`system.memory.swap.in.pages`*::
+
--
count of pages swapped in

type: long

--

*`system.memory.swap.readahead.pages`*::
+
--
swap readahead pages

type: long

--

*`system.memory.swap.readahead.cached`*::
+
--
swap readahead cache hits

type: long

--

*`system.memory.swap.used.pct`*::
+
--
The percentage of used swap memory.


type: scaled_float

format: percent

--

[float]
=== hugepages

This group contains statistics related to huge pages usage on the system.


*`system.memory.hugepages.total`*::
+
--
Number of huge pages in the pool.


type: long

format: number

--

*`system.memory.hugepages.used.bytes`*::
+
--
Memory used in allocated huge pages.


type: long

format: bytes

--

*`system.memory.hugepages.used.pct`*::
+
--
Percentage of huge pages used.


type: long

format: percent

--

*`system.memory.hugepages.free`*::
+
--
Number of available huge pages in the pool.


type: long

format: number

--

*`system.memory.hugepages.reserved`*::
+
--
Number of reserved but not allocated huge pages in the pool.


type: long

format: number

--

*`system.memory.hugepages.surplus`*::
+
--
Number of overcommited huge pages.


type: long

format: number

--

*`system.memory.hugepages.default_size`*::
+
--
Default size for huge pages.


type: long

format: bytes

--

[float]
=== swap.out

huge pages swapped out


*`system.memory.hugepages.swap.out.pages`*::
+
--
pages swapped out

type: long

--

*`system.memory.hugepages.swap.out.fallback`*::
+
--
Count of huge pages that must be split before swapout

type: long

--

[float]
=== network

`network` contains network IO metrics for a single network interface.



*`system.network.name`*::
+
--
The network interface name.


type: keyword

example: eth0

--

*`system.network.out.bytes`*::
+
--
The number of bytes sent.


type: long

format: bytes

--

*`system.network.in.bytes`*::
+
--
The number of bytes received.


type: long

format: bytes

--

*`system.network.out.packets`*::
+
--
The number of packets sent.


type: long

--

*`system.network.in.packets`*::
+
--
The number or packets received.


type: long

--

*`system.network.in.errors`*::
+
--
The number of errors while receiving.


type: long

--

*`system.network.out.errors`*::
+
--
The number of errors while sending.


type: long

--

*`system.network.in.dropped`*::
+
--
The number of incoming packets that were dropped.


type: long

--

*`system.network.out.dropped`*::
+
--
The number of outgoing packets that were dropped. This value is always 0 on Darwin and BSD because it is not reported by the operating system.


type: long

--

[float]
=== process

`process` contains process metadata, CPU metrics, and memory metrics.



*`system.process.name`*::
+
--
type: alias

alias to: process.name

--

*`system.process.state`*::
+
--
The process state. For example: "running".


type: keyword

--

*`system.process.pid`*::
+
--
type: alias

alias to: process.pid

--

*`system.process.ppid`*::
+
--
type: alias

alias to: process.ppid

--

*`system.process.pgid`*::
+
--
type: alias

alias to: process.pgid

--

*`system.process.cmdline`*::
+
--
The full command-line used to start the process, including the arguments separated by space.


type: keyword

--

*`system.process.username`*::
+
--
type: alias

alias to: user.name

--

*`system.process.cwd`*::
+
--
type: alias

alias to: process.working_directory

--

*`system.process.env`*::
+
--
The environment variables used to start the process. The data is available on FreeBSD, Linux, and OS X.


type: object

--

[float]
=== cpu

CPU-specific statistics per process.


*`system.process.cpu.user.ticks`*::
+
--
The amount of CPU time the process spent in user space.


type: long

--

*`system.process.cpu.total.value`*::
+
--
The value of CPU usage since starting the process.


type: long

--

*`system.process.cpu.total.pct`*::
+
--
The percentage of CPU time spent by the process since the last update. Its value is similar to the %CPU value of the process displayed by the top command on Unix systems.


type: scaled_float

format: percent

--

*`system.process.cpu.total.norm.pct`*::
+
--
The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


type: scaled_float

format: percent

--

*`system.process.cpu.system.ticks`*::
+
--
The amount of CPU time the process spent in kernel space.


type: long

--

*`system.process.cpu.total.ticks`*::
+
--
The total CPU time spent by the process.


type: long

--

*`system.process.cpu.start_time`*::
+
--
The time when the process was started.


type: date

--

[float]
=== memory

Memory-specific statistics per process.


*`system.process.memory.size`*::
+
--
The total virtual memory the process has.


type: long

format: bytes

--

*`system.process.memory.rss.bytes`*::
+
--
The Resident Set Size. The amount of memory the process occupied in main memory (RAM).


type: long

format: bytes

--

*`system.process.memory.rss.pct`*::
+
--
The percentage of memory the process occupied in main memory (RAM).


type: scaled_float

format: percent

--

*`system.process.memory.share`*::
+
--
The shared memory the process uses.


type: long

format: bytes

--

[float]
=== fd

File descriptor usage metrics. This set of metrics is available for Linux and FreeBSD.



*`system.process.fd.open`*::
+
--
The number of file descriptors open by the process.

type: long

--

*`system.process.fd.limit.soft`*::
+
--
The soft limit on the number of file descriptors opened by the process. The soft limit can be changed by the process at any time.


type: long

--

*`system.process.fd.limit.hard`*::
+
--
The hard limit on the number of file descriptors opened by the process. The hard limit can only be raised by root.


type: long

--

[float]
=== cgroup

Metrics and limits from the cgroup of which the task is a member. cgroup metrics are reported when the process has membership in a non-root cgroup. These metrics are only available on Linux.



*`system.process.cgroup.id`*::
+
--
The ID common to all cgroups associated with this task. If there isn't a common ID used by all cgroups this field will be absent.


type: keyword

--

*`system.process.cgroup.path`*::
+
--
The path to the cgroup relative to the cgroup subsystem's mountpoint. If there isn't a common path used by all cgroups this field will be absent.


type: keyword

--

[float]
=== cpu

The cpu subsystem schedules CPU access for tasks in the cgroup. Access can be controlled by two separate schedulers, CFS and RT. CFS stands for completely fair scheduler which proportionally divides the CPU time between cgroups based on weight. RT stands for real time scheduler which sets a maximum amount of CPU time that processes in the cgroup can consume during a given period.



*`system.process.cgroup.cpu.id`*::
+
--
ID of the cgroup.

type: keyword

--

*`system.process.cgroup.cpu.path`*::
+
--
Path to the cgroup relative to the cgroup subsystem's mountpoint.


type: keyword

--

*`system.process.cgroup.cpu.cfs.period.us`*::
+
--
Period of time in microseconds for how regularly a cgroup's access to CPU resources should be reallocated.


type: long

--

*`system.process.cgroup.cpu.cfs.quota.us`*::
+
--
Total amount of time in microseconds for which all tasks in a cgroup can run during one period (as defined by cfs.period.us).


type: long

--

*`system.process.cgroup.cpu.cfs.shares`*::
+
--
An integer value that specifies a relative share of CPU time available to the tasks in a cgroup. The value specified in the cpu.shares file must be 2 or higher.


type: long

--

*`system.process.cgroup.cpu.rt.period.us`*::
+
--
Period of time in microseconds for how regularly a cgroup's access to CPU resources is reallocated.


type: long

--

*`system.process.cgroup.cpu.rt.runtime.us`*::
+
--
Period of time in microseconds for the longest continuous period in which the tasks in a cgroup have access to CPU resources.


type: long

--

*`system.process.cgroup.cpu.stats.periods`*::
+
--
Number of period intervals (as specified in cpu.cfs.period.us) that have elapsed.


type: long

--

*`system.process.cgroup.cpu.stats.throttled.periods`*::
+
--
Number of times tasks in a cgroup have been throttled (that is, not allowed to run because they have exhausted all of the available time as specified by their quota).


type: long

--

*`system.process.cgroup.cpu.stats.throttled.ns`*::
+
--
The total time duration (in nanoseconds) for which tasks in a cgroup have been throttled.


type: long

--

[float]
=== cpuacct

CPU accounting metrics.


*`system.process.cgroup.cpuacct.id`*::
+
--
ID of the cgroup.

type: keyword

--

*`system.process.cgroup.cpuacct.path`*::
+
--
Path to the cgroup relative to the cgroup subsystem's mountpoint.


type: keyword

--

*`system.process.cgroup.cpuacct.total.ns`*::
+
--
Total CPU time in nanoseconds consumed by all tasks in the cgroup.


type: long

--

*`system.process.cgroup.cpuacct.stats.user.ns`*::
+
--
CPU time consumed by tasks in user mode.

type: long

--

*`system.process.cgroup.cpuacct.stats.system.ns`*::
+
--
CPU time consumed by tasks in user (kernel) mode.

type: long

--

*`system.process.cgroup.cpuacct.percpu`*::
+
--
CPU time (in nanoseconds) consumed on each CPU by all tasks in this cgroup.


type: object

--

[float]
=== memory

Memory limits and metrics.


*`system.process.cgroup.memory.id`*::
+
--
ID of the cgroup.

type: keyword

--

*`system.process.cgroup.memory.path`*::
+
--
Path to the cgroup relative to the cgroup subsystem's mountpoint.


type: keyword

--

*`system.process.cgroup.memory.mem.usage.bytes`*::
+
--
Total memory usage by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.mem.usage.max.bytes`*::
+
--
The maximum memory used by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.mem.limit.bytes`*::
+
--
The maximum amount of user memory in bytes (including file cache) that tasks in the cgroup are allowed to use.


type: long

format: bytes

--

*`system.process.cgroup.memory.mem.failures`*::
+
--
The number of times that the memory limit (mem.limit.bytes) was reached.


type: long

--

*`system.process.cgroup.memory.memsw.usage.bytes`*::
+
--
The sum of current memory usage plus swap space used by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.memsw.usage.max.bytes`*::
+
--
The maximum amount of memory and swap space used by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.memsw.limit.bytes`*::
+
--
The maximum amount for the sum of memory and swap usage that tasks in the cgroup are allowed to use.


type: long

format: bytes

--

*`system.process.cgroup.memory.memsw.failures`*::
+
--
The number of times that the memory plus swap space limit (memsw.limit.bytes) was reached.


type: long

--

*`system.process.cgroup.memory.kmem.usage.bytes`*::
+
--
Total kernel memory usage by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem.usage.max.bytes`*::
+
--
The maximum kernel memory used by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem.limit.bytes`*::
+
--
The maximum amount of kernel memory that tasks in the cgroup are allowed to use.


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem.failures`*::
+
--
The number of times that the memory limit (kmem.limit.bytes) was reached.


type: long

--

*`system.process.cgroup.memory.kmem_tcp.usage.bytes`*::
+
--
Total memory usage for TCP buffers in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem_tcp.usage.max.bytes`*::
+
--
The maximum memory used for TCP buffers by processes in the cgroup (in bytes).


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem_tcp.limit.bytes`*::
+
--
The maximum amount of memory for TCP buffers that tasks in the cgroup are allowed to use.


type: long

format: bytes

--

*`system.process.cgroup.memory.kmem_tcp.failures`*::
+
--
The number of times that the memory limit (kmem_tcp.limit.bytes) was reached.


type: long

--

*`system.process.cgroup.memory.stats.active_anon.bytes`*::
+
--
Anonymous and swap cache on active least-recently-used (LRU) list, including tmpfs (shmem), in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.active_file.bytes`*::
+
--
File-backed memory on active LRU list, in bytes.

type: long

format: bytes

--

*`system.process.cgroup.memory.stats.cache.bytes`*::
+
--
Page cache, including tmpfs (shmem), in bytes.

type: long

format: bytes

--

*`system.process.cgroup.memory.stats.hierarchical_memory_limit.bytes`*::
+
--
Memory limit for the hierarchy that contains the memory cgroup, in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.hierarchical_memsw_limit.bytes`*::
+
--
Memory plus swap limit for the hierarchy that contains the memory cgroup, in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.inactive_anon.bytes`*::
+
--
Anonymous and swap cache on inactive LRU list, including tmpfs (shmem), in bytes


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.inactive_file.bytes`*::
+
--
File-backed memory on inactive LRU list, in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.mapped_file.bytes`*::
+
--
Size of memory-mapped mapped files, including tmpfs (shmem), in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.page_faults`*::
+
--
Number of times that a process in the cgroup triggered a page fault.


type: long

--

*`system.process.cgroup.memory.stats.major_page_faults`*::
+
--
Number of times that a process in the cgroup triggered a major fault. "Major" faults happen when the kernel actually has to read the data from disk.


type: long

--

*`system.process.cgroup.memory.stats.pages_in`*::
+
--
Number of pages paged into memory. This is a counter.


type: long

--

*`system.process.cgroup.memory.stats.pages_out`*::
+
--
Number of pages paged out of memory. This is a counter.


type: long

--

*`system.process.cgroup.memory.stats.rss.bytes`*::
+
--
Anonymous and swap cache (includes transparent hugepages), not including tmpfs (shmem), in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.rss_huge.bytes`*::
+
--
Number of bytes of anonymous transparent hugepages.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.swap.bytes`*::
+
--
Swap usage, in bytes.


type: long

format: bytes

--

*`system.process.cgroup.memory.stats.unevictable.bytes`*::
+
--
Memory that cannot be reclaimed, in bytes.


type: long

format: bytes

--

[float]
=== blkio

Block IO metrics.


*`system.process.cgroup.blkio.id`*::
+
--
ID of the cgroup.

type: keyword

--

*`system.process.cgroup.blkio.path`*::
+
--
Path to the cgroup relative to the cgroup subsystems mountpoint.


type: keyword

--

*`system.process.cgroup.blkio.total.bytes`*::
+
--
Total number of bytes transferred to and from all block devices by processes in the cgroup.


type: long

format: bytes

--

*`system.process.cgroup.blkio.total.ios`*::
+
--
Total number of I/O operations performed on all devices by processes in the cgroup as seen by the throttling policy.


type: long

--

[float]
=== process.summary

Summary metrics for the processes running on the host.



*`system.process.summary.total`*::
+
--
Total number of processes on this host.


type: long

--

*`system.process.summary.running`*::
+
--
Number of running processes on this host.


type: long

--

*`system.process.summary.idle`*::
+
--
Number of idle processes on this host.


type: long

--

*`system.process.summary.sleeping`*::
+
--
Number of sleeping processes on this host.


type: long

--

*`system.process.summary.stopped`*::
+
--
Number of stopped processes on this host.


type: long

--

*`system.process.summary.zombie`*::
+
--
Number of zombie processes on this host.


type: long

--

*`system.process.summary.dead`*::
+
--
Number of dead processes on this host. It's very unlikely that it will appear but in some special situations it may happen.


type: long

--

*`system.process.summary.unknown`*::
+
--
Number of processes for which the state couldn't be retrieved or is unknown.


type: long

--

[float]
=== raid

raid



*`system.raid.name`*::
+
--
Name of the device.


type: keyword

--

*`system.raid.status`*::
+
--
activity-state of the device.


type: keyword

--

*`system.raid.level`*::
+
--
The raid level of the device


type: keyword

--

*`system.raid.sync_action`*::
+
--
Current sync action, if the RAID array is redundant 


type: keyword

--

*`system.raid.disks.active`*::
+
--
Number of active disks.


type: long

--

*`system.raid.disks.total`*::
+
--
Total number of disks the device consists of.


type: long

--

*`system.raid.disks.spare`*::
+
--
Number of spared disks.


type: long

--

*`system.raid.disks.failed`*::
+
--
Number of failed disks.


type: long

--

*`system.raid.disks.states.*`*::
+
--
map of raw disk states


type: object

--

*`system.raid.blocks.total`*::
+
--
Number of blocks the device holds, in 1024-byte blocks.


type: long

--

*`system.raid.blocks.synced`*::
+
--
Number of blocks on the device that are in sync, in 1024-byte blocks.


type: long

--

[float]
=== service

metrics for system services



*`system.service.name`*::
+
--
The name of the service

type: keyword

--

*`system.service.load_state`*::
+
--
The load state of the service

type: keyword

--

*`system.service.state`*::
+
--
The activity state of the service

type: keyword

--

*`system.service.sub_state`*::
+
--
The sub-state of the service

type: keyword

--

*`system.service.state_since`*::
+
--
The timestamp of the last state change. If the service is active and running, this is its uptime.

type: date

--

*`system.service.exec_code`*::
+
--
The SIGCHLD code from the service's main process

type: keyword

--

[float]
=== resources

system metrics associated with the service


*`system.service.resources.cpu.usage.ns`*::
+
--
CPU usage in nanoseconds

type: long

--

*`system.service.resources.memory.usage.bytes`*::
+
--
memory usage in bytes

type: long

--

*`system.service.resources.tasks.count`*::
+
--
number of tasks associated with the service

type: long

--

[float]
=== network

network resource usage


*`system.service.resources.network.in.bytes`*::
+
--
bytes in

type: long

format: bytes

--

*`system.service.resources.network.in.packets`*::
+
--
packets in

type: long

format: bytes

--

*`system.service.resources.network.out.packets`*::
+
--
packets out

type: long

--

*`system.service.resources.network.out.bytes`*::
+
--
bytes out

type: long

--

[float]
=== socket

TCP sockets that are active.



*`system.socket.direction`*::
+
--
type: alias

alias to: network.direction

--

*`system.socket.family`*::
+
--
type: alias

alias to: network.type

--

*`system.socket.local.ip`*::
+
--
Local IP address. This can be an IPv4 or IPv6 address.


type: ip

example: 192.0.2.1 or 2001:0DB8:ABED:8536::1

--

*`system.socket.local.port`*::
+
--
Local port.


type: long

example: 22

--

*`system.socket.remote.ip`*::
+
--
Remote IP address. This can be an IPv4 or IPv6 address.


type: ip

example: 192.0.2.1 or 2001:0DB8:ABED:8536::1

--

*`system.socket.remote.port`*::
+
--
Remote port.


type: long

example: 22

--

*`system.socket.remote.host`*::
+
--
PTR record associated with the remote IP. It is obtained via reverse IP lookup.


type: keyword

example: 76-211-117-36.nw.example.com.

--

*`system.socket.remote.etld_plus_one`*::
+
--
The effective top-level domain (eTLD) of the remote host plus one more label. For example, the eTLD+1 for "foo.bar.golang.org." is "golang.org.". The data for determining the eTLD comes from an embedded copy of the data from http://publicsuffix.org.


type: keyword

example: example.com.

--

*`system.socket.remote.host_error`*::
+
--
Error describing the cause of the reverse lookup failure.


type: keyword

--

*`system.socket.process.pid`*::
+
--
type: alias

alias to: process.pid

--

*`system.socket.process.command`*::
+
--
type: alias

alias to: process.name

--

*`system.socket.process.cmdline`*::
+
--
Full command line


type: keyword

--

*`system.socket.process.exe`*::
+
--
type: alias

alias to: process.executable

--

*`system.socket.user.id`*::
+
--
type: alias

alias to: user.id

--

*`system.socket.user.name`*::
+
--
type: alias

alias to: user.full_name

--

[float]
=== socket.summary

Summary metrics of open sockets in the host system



[float]
=== all

All connections



*`system.socket.summary.all.count`*::
+
--
All open connections


type: integer

--

*`system.socket.summary.all.listening`*::
+
--
All listening ports


type: integer

--

[float]
=== tcp

All TCP connections



*`system.socket.summary.tcp.memory`*::
+
--
Memory used by TCP sockets in bytes, based on number of allocated pages and system page size. Corresponds to limits set in /proc/sys/net/ipv4/tcp_mem. Only available on Linux. 


type: integer

format: bytes

--

[float]
=== all

All TCP connections



*`system.socket.summary.tcp.all.orphan`*::
+
--
A count of all orphaned tcp sockets. Only available on Linux.


type: integer

--

*`system.socket.summary.tcp.all.count`*::
+
--
All open TCP connections


type: integer

--

*`system.socket.summary.tcp.all.listening`*::
+
--
All TCP listening ports


type: integer

--

*`system.socket.summary.tcp.all.established`*::
+
--
Number of established TCP connections


type: integer

--

*`system.socket.summary.tcp.all.close_wait`*::
+
--
Number of TCP connections in _close_wait_ state


type: integer

--

*`system.socket.summary.tcp.all.time_wait`*::
+
--
Number of TCP connections in _time_wait_ state


type: integer

--

*`system.socket.summary.tcp.all.syn_sent`*::
+
--
Number of TCP connections in _syn_sent_ state


type: integer

--

*`system.socket.summary.tcp.all.syn_recv`*::
+
--
Number of TCP connections in _syn_recv_ state


type: integer

--

*`system.socket.summary.tcp.all.fin_wait1`*::
+
--
Number of TCP connections in _fin_wait1_ state


type: integer

--

*`system.socket.summary.tcp.all.fin_wait2`*::
+
--
Number of TCP connections in _fin_wait2_ state


type: integer

--

*`system.socket.summary.tcp.all.last_ack`*::
+
--
Number of TCP connections in _last_ack_ state


type: integer

--

*`system.socket.summary.tcp.all.closing`*::
+
--
Number of TCP connections in _closing_ state


type: integer

--

[float]
=== udp

All UDP connections



*`system.socket.summary.udp.memory`*::
+
--
Memory used by UDP sockets in bytes, based on number of allocated pages and system page size. Corresponds to limits set in /proc/sys/net/ipv4/udp_mem. Only available on Linux. 


type: integer

format: bytes

--

[float]
=== all

All UDP connections



*`system.socket.summary.udp.all.count`*::
+
--
All open UDP connections


type: integer

--

[float]
=== uptime

`uptime` contains the operating system uptime metric.



*`system.uptime.duration.ms`*::
+
--
The OS uptime in milliseconds.


type: long

format: duration

--

[[exported-fields-tomcat]]
== Tomcat fields

Tomcat module




[float]
=== cache

Catalina Cache metrics from the WebResourceRoot


*`tomcat.cache.mbean`*::
+
--
Mbean that this event is related to

type: keyword

--

*`tomcat.cache.hit.total`*::
+
--
The number of requests for resources that were served from the cache

type: long

--

*`tomcat.cache.size.total.kb`*::
+
--
The current estimate of the cache size in kilobytes

type: long

--

*`tomcat.cache.size.max.kb`*::
+
--
The maximum permitted size of the cache in kilobytes

type: long

--

*`tomcat.cache.lookup.total`*::
+
--
The number of requests for resources

type: long

--

*`tomcat.cache.ttl.ms`*::
+
--
The time-to-live for cache entries in milliseconds

type: long

--

[float]
=== memory

Memory metrics from java.lang JMX


*`tomcat.memory.mbean`*::
+
--
Mbean that this event is related to

type: keyword

--

*`tomcat.memory.heap.usage.committed`*::
+
--
Committed heap memory usage

type: long

--

*`tomcat.memory.heap.usage.max`*::
+
--
Max heap memory usage

type: long

--

*`tomcat.memory.heap.usage.used`*::
+
--
Used heap memory usage

type: long

--

*`tomcat.memory.heap.usage.init`*::
+
--
Initial heap memory usage

type: long

--

*`tomcat.memory.other.usage.committed`*::
+
--
Committed non-heap memory usage

type: long

--

*`tomcat.memory.other.usage.max`*::
+
--
Max non-heap memory usage

type: long

--

*`tomcat.memory.other.usage.used`*::
+
--
Used non-heap memory usage

type: long

--

*`tomcat.memory.other.usage.init`*::
+
--
Initial non-heap memory usage

type: long

--

[float]
=== requests

Requests processor metrics from GlobalRequestProcessor JMX


*`tomcat.requests.mbean`*::
+
--
Mbean that this event is related to

type: keyword

--

*`tomcat.requests.total`*::
+
--
Number of requests processed

type: long

--

*`tomcat.requests.bytes.received`*::
+
--
Amount of data received, in bytes

type: long

--

*`tomcat.requests.bytes.sent`*::
+
--
Amount of data sent, in bytes

type: long

--

*`tomcat.requests.processing.ms`*::
+
--
Total time to process the requests

type: long

--

*`tomcat.requests.errors.total`*::
+
--
Number of errors

type: long

--

[float]
=== threading

Threading metrics from the Catalina's ThreadPool JMX


*`tomcat.threading.busy`*::
+
--
Current busy threads from the ThreadPool

type: long

--

*`tomcat.threading.max`*::
+
--
Max threads from the ThreadPool

type: long

--

*`tomcat.threading.current`*::
+
--
Current number of threads, taken from the ThreadPool

type: long

--

*`tomcat.threading.keep_alive.total`*::
+
--
Total keep alive on the ThreadPool

type: long

--

*`tomcat.threading.keep_alive.timeout.ms`*::
+
--
Keep alive timeout on the ThreadPool

type: long

--

*`tomcat.threading.started.total`*::
+
--
Current started threads at JVM level (from java.lang:type=Threading)

type: long

--

*`tomcat.threading.user.time.ms`*::
+
--
User time in milliseconds (from java.lang:type=Threading)

type: long

--

*`tomcat.threading.cpu.time.ms`*::
+
--
CPU time in milliseconds (from java.lang:type=Threading)

type: long

--

*`tomcat.threading.total`*::
+
--
Total threads at the JVM level (from java.lang:type=Threading)

type: long

--

*`tomcat.threading.peak`*::
+
--
Peak number of threads at JVM level (from java.lang:type=Threading)

type: long

--

