
////
This file is generated! See _meta/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
= Exported fields

[partintro]

--
This document describes the fields that are exported by Metricbeat. They are
grouped in the following categories:

* <<exported-fields-aerospike>>
* <<exported-fields-alias>>
* <<exported-fields-apache>>
* <<exported-fields-beat>>
* <<exported-fields-ceph>>
* <<exported-fields-cloud>>
* <<exported-fields-common>>
* <<exported-fields-couchbase>>
* <<exported-fields-docker-processor>>
* <<exported-fields-docker>>
* <<exported-fields-dropwizard>>
* <<exported-fields-elasticsearch>>
* <<exported-fields-envoyproxy>>
* <<exported-fields-etcd>>
* <<exported-fields-golang>>
* <<exported-fields-graphite>>
* <<exported-fields-haproxy>>
* <<exported-fields-host-processor>>
* <<exported-fields-http>>
* <<exported-fields-jolokia>>
* <<exported-fields-kafka>>
* <<exported-fields-kibana>>
* <<exported-fields-kubernetes-processor>>
* <<exported-fields-kubernetes>>
* <<exported-fields-kvm>>
* <<exported-fields-logstash>>
* <<exported-fields-memcached>>
* <<exported-fields-mongodb>>
* <<exported-fields-munin>>
* <<exported-fields-mysql>>
* <<exported-fields-nginx>>
* <<exported-fields-php_fpm>>
* <<exported-fields-postgresql>>
* <<exported-fields-prometheus>>
* <<exported-fields-rabbitmq>>
* <<exported-fields-redis>>
* <<exported-fields-system>>
* <<exported-fields-traefik>>
* <<exported-fields-uwsgi>>
* <<exported-fields-vsphere>>
* <<exported-fields-windows>>
* <<exported-fields-zookeeper>>

--
[[exported-fields-aerospike]]
== Aerospike fields

Aerospike module



[float]
== aerospike fields




[float]
== namespace fields

namespace



[float]
== client fields

Client stats.



[float]
== delete fields

Client delete transactions stats.



*`aerospike.namespace.client.delete.error`*::
+
--
type: long

Number of client delete transactions that failed with an error.


--

*`aerospike.namespace.client.delete.not_found`*::
+
--
type: long

Number of client delete transactions that resulted in a not found.


--

*`aerospike.namespace.client.delete.success`*::
+
--
type: long

Number of successful client delete transactions.


--

*`aerospike.namespace.client.delete.timeout`*::
+
--
type: long

Number of client delete transactions that timed out.


--

[float]
== read fields

Client read transactions stats.



*`aerospike.namespace.client.read.error`*::
+
--
type: long

Number of client read transaction errors.


--

*`aerospike.namespace.client.read.not_found`*::
+
--
type: long

Number of client read transaction that resulted in not found.


--

*`aerospike.namespace.client.read.success`*::
+
--
type: long

Number of successful client read transactions.


--

*`aerospike.namespace.client.read.timeout`*::
+
--
type: long

Number of client read transaction that timed out.


--

[float]
== write fields

Client write transactions stats.



*`aerospike.namespace.client.write.error`*::
+
--
type: long

Number of client write transactions that failed with an error.


--

*`aerospike.namespace.client.write.success`*::
+
--
type: long

Number of successful client write transactions.


--

*`aerospike.namespace.client.write.timeout`*::
+
--
type: long

Number of client write transactions that timed out.


--

[float]
== device fields

Disk storage stats



*`aerospike.namespace.device.available.pct`*::
+
--
type: scaled_float

format: percent

Measures the minimum contiguous disk space across all disks in a namespace.


--

*`aerospike.namespace.device.free.pct`*::
+
--
type: scaled_float

format: percent

Percentage of disk capacity free for this namespace.


--

*`aerospike.namespace.device.total.bytes`*::
+
--
type: long

format: bytes

Total bytes of disk space allocated to this namespace on this node.


--

*`aerospike.namespace.device.used.bytes`*::
+
--
type: long

format: bytes

Total bytes of disk space used by this namespace on this node.


--

*`aerospike.namespace.hwm_breached`*::
+
--
type: boolean

If true, Aerospike has breached 'high-water-[disk|memory]-pct' for this namespace.


--

[float]
== memory fields

Memory storage stats.



*`aerospike.namespace.memory.free.pct`*::
+
--
type: scaled_float

format: percent

Percentage of memory capacity free for this namespace on this node.


--

*`aerospike.namespace.memory.used.data.bytes`*::
+
--
type: long

format: bytes

Amount of memory occupied by data for this namespace on this node.


--

*`aerospike.namespace.memory.used.index.bytes`*::
+
--
type: long

format: bytes

Amount of memory occupied by the index for this namespace on this node.


--

*`aerospike.namespace.memory.used.sindex.bytes`*::
+
--
type: long

format: bytes

Amount of memory occupied by secondary indexes for this namespace on this node.


--

*`aerospike.namespace.memory.used.total.bytes`*::
+
--
type: long

format: bytes

Total bytes of memory used by this namespace on this node.


--

*`aerospike.namespace.name`*::
+
--
type: keyword

Namespace name


--

*`aerospike.namespace.node.host`*::
+
--
type: keyword

Node host


--

*`aerospike.namespace.node.name`*::
+
--
type: keyword

Node name


--

[float]
== objects fields

Records stats.



*`aerospike.namespace.objects.master`*::
+
--
type: long

Number of records on this node which are active masters.


--

*`aerospike.namespace.objects.total`*::
+
--
type: long

Number of records in this namespace for this node.


--

*`aerospike.namespace.stop_writes`*::
+
--
type: boolean

If true this namespace is currently not allowing writes.


--

[[exported-fields-alias]]
== Alias fields

Alias fields for compatibility with 7.x.



*`host.hostname`*::
+
--
type: alias

alias to: beat.hostname

--

*`event.timezone`*::
+
--
type: alias

alias to: beat.timezone

--

*`cloud.provider`*::
+
--
type: alias

alias to: meta.cloud.provider

--

*`cloud.instance.id`*::
+
--
type: alias

alias to: meta.cloud.instance_id

--

*`cloud.instance.name`*::
+
--
type: alias

alias to: meta.cloud.instance_name

--

*`cloud.machine.type`*::
+
--
type: alias

alias to: meta.cloud.machine_type

--

*`cloud.availability_zone`*::
+
--
type: alias

alias to: meta.cloud.availability_zone

--

*`cloud.project.id`*::
+
--
type: alias

alias to: meta.cloud.project_id

--

*`cloud.region`*::
+
--
type: alias

alias to: meta.cloud.region

--

*`container.id`*::
+
--
type: alias

alias to: docker.container.id

--

*`container.name`*::
+
--
type: alias

alias to: docker.container.name

--

*`container.image.name`*::
+
--
type: alias

alias to: docker.container.image

--

[[exported-fields-apache]]
== Apache fields

Apache HTTPD server metricsets collected from the Apache web server.



[float]
== apache fields

`apache` contains the metrics that were scraped from Apache.



[float]
== status fields

`status` contains the metrics that were scraped from the Apache status page.



*`apache.status.hostname`*::
+
--
type: keyword

Apache hostname.


--

*`apache.status.total_accesses`*::
+
--
type: long

Total number of access requests.


--

*`apache.status.total_kbytes`*::
+
--
type: long

Total number of kilobytes served.


--

*`apache.status.requests_per_sec`*::
+
--
type: scaled_float

Requests per second.


--

*`apache.status.bytes_per_sec`*::
+
--
type: scaled_float

Bytes per second.


--

*`apache.status.bytes_per_request`*::
+
--
type: scaled_float

Bytes per request.


--

*`apache.status.workers.busy`*::
+
--
type: long

Number of busy workers.


--

*`apache.status.workers.idle`*::
+
--
type: long

Number of idle workers.


--

[float]
== uptime fields

Uptime stats.



*`apache.status.uptime.server_uptime`*::
+
--
type: long

Server uptime in seconds.


--

*`apache.status.uptime.uptime`*::
+
--
type: long

Server uptime.


--

[float]
== cpu fields

CPU stats.



*`apache.status.cpu.load`*::
+
--
type: scaled_float

CPU Load.


--

*`apache.status.cpu.user`*::
+
--
type: scaled_float

CPU user load.


--

*`apache.status.cpu.system`*::
+
--
type: scaled_float

System cpu.


--

*`apache.status.cpu.children_user`*::
+
--
type: scaled_float

CPU of children user.


--

*`apache.status.cpu.children_system`*::
+
--
type: scaled_float

CPU of children system.


--

[float]
== connections fields

Connection stats.



*`apache.status.connections.total`*::
+
--
type: long

Total connections.


--

*`apache.status.connections.async.writing`*::
+
--
type: long

Async connection writing.


--

*`apache.status.connections.async.keep_alive`*::
+
--
type: long

Async keeped alive connections.


--

*`apache.status.connections.async.closing`*::
+
--
type: long

Async closed connections.


--

[float]
== load fields

Load averages.



*`apache.status.load.1`*::
+
--
type: scaled_float

Load average for the last minute.


--

*`apache.status.load.5`*::
+
--
type: scaled_float

Load average for the last 5 minutes.


--

*`apache.status.load.15`*::
+
--
type: scaled_float

Load average for the last 15 minutes.


--

[float]
== scoreboard fields

Scoreboard metrics.



*`apache.status.scoreboard.starting_up`*::
+
--
type: long

Starting up.


--

*`apache.status.scoreboard.reading_request`*::
+
--
type: long

Reading requests.


--

*`apache.status.scoreboard.sending_reply`*::
+
--
type: long

Sending Reply.


--

*`apache.status.scoreboard.keepalive`*::
+
--
type: long

Keep alive.


--

*`apache.status.scoreboard.dns_lookup`*::
+
--
type: long

Dns Lookups.


--

*`apache.status.scoreboard.closing_connection`*::
+
--
type: long

Closing connections.


--

*`apache.status.scoreboard.logging`*::
+
--
type: long

Logging


--

*`apache.status.scoreboard.gracefully_finishing`*::
+
--
type: long

Gracefully finishing.


--

*`apache.status.scoreboard.idle_cleanup`*::
+
--
type: long

Idle cleanups.


--

*`apache.status.scoreboard.open_slot`*::
+
--
type: long

Open slots.


--

*`apache.status.scoreboard.waiting_for_connection`*::
+
--
type: long

Waiting for connections.


--

*`apache.status.scoreboard.total`*::
+
--
type: long

Total.


--

[[exported-fields-beat]]
== Beat fields

Contains common beat fields available in all event types.



*`beat.name`*::
+
--
The name of the Beat sending the log messages. If the Beat name is set in the configuration file, then that value is used. If it is not set, the hostname is used. To set the Beat name, use the `name` option in the configuration file.


--

*`beat.hostname`*::
+
--
The hostname as returned by the operating system on which the Beat is running.


--

*`beat.timezone`*::
+
--
The timezone as returned by the operating system on which the Beat is running.


--

*`beat.version`*::
+
--
The version of the beat that generated this event.


--

*`@timestamp`*::
+
--
type: date

example: August 26th 2016, 12:35:53.332

format: date

required: True

The timestamp when the event log record was generated.


--

*`tags`*::
+
--
Arbitrary tags that can be set per Beat and per transaction type.


--

*`fields`*::
+
--
type: object

Contains user configurable fields.


--

[float]
== error fields

Error fields containing additional info in case of errors.



*`error.message`*::
+
--
type: text

Error message.


--

*`error.code`*::
+
--
type: long

Error code.


--

*`error.type`*::
+
--
type: keyword

Error type.


--

[[exported-fields-ceph]]
== Ceph fields

Ceph module



[float]
== ceph fields

`ceph` contains the metrics that were scraped from CEPH.



[float]
== cluster_disk fields

cluster_disk



*`ceph.cluster_disk.available.bytes`*::
+
--
type: long

format: bytes

Available bytes of the cluster


--

*`ceph.cluster_disk.total.bytes`*::
+
--
type: long

format: bytes

Total bytes of the cluster


--

*`ceph.cluster_disk.used.bytes`*::
+
--
type: long

format: bytes

Used bytes of the cluster


--

[float]
== cluster_health fields

cluster_health



*`ceph.cluster_health.overall_status`*::
+
--
type: keyword

Overall status of the cluster


--

*`ceph.cluster_health.timechecks.epoch`*::
+
--
type: long

Map version


--

*`ceph.cluster_health.timechecks.round.value`*::
+
--
type: long

timecheck round


--

*`ceph.cluster_health.timechecks.round.status`*::
+
--
type: keyword

Status of the round


--

[float]
== cluster_status fields

cluster_status



*`ceph.cluster_status.version`*::
+
--
type: long

Ceph Status version


--

*`ceph.cluster_status.traffic.read_bytes`*::
+
--
type: long

format: bytes

Cluster read throughput per second


--

*`ceph.cluster_status.traffic.write_bytes`*::
+
--
type: long

format: bytes

Cluster write throughput per second


--

*`ceph.cluster_status.traffic.read_op_per_sec`*::
+
--
type: long

Cluster read iops per second


--

*`ceph.cluster_status.traffic.write_op_per_sec`*::
+
--
type: long

Cluster write iops per second


--

*`ceph.cluster_status.misplace.total`*::
+
--
type: long

Cluster misplace pg number


--

*`ceph.cluster_status.misplace.objects`*::
+
--
type: long

Cluster misplace objects number


--

*`ceph.cluster_status.misplace.ratio`*::
+
--
type: scaled_float

format: percent

Cluster misplace ratio


--

*`ceph.cluster_status.degraded.total`*::
+
--
type: long

Cluster degraded pg number


--

*`ceph.cluster_status.degraded.objects`*::
+
--
type: long

Cluster degraded objects number


--

*`ceph.cluster_status.degraded.ratio`*::
+
--
type: scaled_float

format: percent

Cluster degraded ratio


--

*`ceph.cluster_status.pg.data_bytes`*::
+
--
type: long

format: bytes

Cluster pg data bytes


--

*`ceph.cluster_status.pg.avail_bytes`*::
+
--
type: long

format: bytes

Cluster available bytes


--

*`ceph.cluster_status.pg.total_bytes`*::
+
--
type: long

format: bytes

Cluster total bytes


--

*`ceph.cluster_status.pg.used_bytes`*::
+
--
type: long

format: bytes

Cluster used bytes


--

*`ceph.cluster_status.pg_state.state_name`*::
+
--
type: long

Pg state description


--

*`ceph.cluster_status.pg_state.count`*::
+
--
type: long

Shows how many pgs are in state of pg_state.state_name


--

*`ceph.cluster_status.pg_state.version`*::
+
--
type: long

Cluster status version


--

*`ceph.cluster_status.osd.full`*::
+
--
type: boolean

Is osd full


--

*`ceph.cluster_status.osd.nearfull`*::
+
--
type: boolean

Is osd near full


--

*`ceph.cluster_status.osd.num_osds`*::
+
--
type: long

Shows how many osds in the cluster


--

*`ceph.cluster_status.osd.num_up_osds`*::
+
--
type: long

Shows how many osds are on the state of UP


--

*`ceph.cluster_status.osd.num_in_osds`*::
+
--
type: long

Shows how many osds are on the state of IN


--

*`ceph.cluster_status.osd.num_remapped_pgs`*::
+
--
type: long

Shows how many osds are on the state of REMAPPED


--

*`ceph.cluster_status.osd.epoch`*::
+
--
type: long

epoch number


--

[float]
== monitor_health fields

monitor_health stats data



*`ceph.monitor_health.available.pct`*::
+
--
type: long

Available percent of the MON


--

*`ceph.monitor_health.health`*::
+
--
type: keyword

Health of the MON


--

*`ceph.monitor_health.available.kb`*::
+
--
type: long

Available KB of the MON


--

*`ceph.monitor_health.total.kb`*::
+
--
type: long

Total KB of the MON


--

*`ceph.monitor_health.used.kb`*::
+
--
type: long

Used KB of the MON


--

*`ceph.monitor_health.last_updated`*::
+
--
type: date

Time when was updated


--

*`ceph.monitor_health.name`*::
+
--
type: keyword

Name of the MON


--

*`ceph.monitor_health.store_stats.log.bytes`*::
+
--
type: long

format: bytes

Log bytes of MON


--

*`ceph.monitor_health.store_stats.misc.bytes`*::
+
--
type: long

format: bytes

Misc bytes of MON


--

*`ceph.monitor_health.store_stats.sst.bytes`*::
+
--
type: long

format: bytes

SST bytes of MON


--

*`ceph.monitor_health.store_stats.total.bytes`*::
+
--
type: long

format: bytes

Total bytes of MON


--

*`ceph.monitor_health.store_stats.last_updated`*::
+
--
type: long

Last updated


--

[float]
== osd_df fields

ceph osd disk usage information



*`ceph.osd_df.id`*::
+
--
type: long

osd node id


--

*`ceph.osd_df.name`*::
+
--
type: text

osd node name


--

*`ceph.osd_df.device_class`*::
+
--
type: keyword

osd node type, illegal type include hdd, ssd etc.


--

*`ceph.osd_df.total.byte`*::
+
--
type: long

format: bytes

osd disk total volume


--

*`ceph.osd_df.used.byte`*::
+
--
type: long

format: bytes

osd disk usage volume


--

*`ceph.osd_df.available.bytes`*::
+
--
type: long

format: bytes

osd disk available volume


--

*`ceph.osd_df.pg_num`*::
+
--
type: long

shows how many pg located on this osd


--

*`ceph.osd_df.used.pct`*::
+
--
type: scaled_float

format: percent

osd disk usage percentage


--

[float]
== osd_tree fields

ceph osd tree info



*`ceph.osd_tree.id`*::
+
--
type: long

osd or bucket node id


--

*`ceph.osd_tree.name`*::
+
--
type: text

osd or bucket node name


--

*`ceph.osd_tree.type`*::
+
--
type: keyword

osd or bucket node type, illegal type include osd, host, root etc.


--

*`ceph.osd_tree.type_id`*::
+
--
type: long

osd or bucket node typeID


--

*`ceph.osd_tree.children`*::
+
--
type: text

bucket children list, separated by comma.


--

*`ceph.osd_tree.crush_weight`*::
+
--
type: float

osd node crush weight


--

*`ceph.osd_tree.depth`*::
+
--
type: long

node depth


--

*`ceph.osd_tree.exists`*::
+
--
type: boolean

is node still exist or not(1-yes, 0-no)


--

*`ceph.osd_tree.primary_affinity`*::
+
--
type: float

the weight of reading data from primary osd


--

*`ceph.osd_tree.reweight`*::
+
--
type: long

the reweight of osd


--

*`ceph.osd_tree.status`*::
+
--
type: keyword

status of osd, it should be up or down


--

*`ceph.osd_tree.device_class`*::
+
--
type: keyword

the device class of osd, like hdd, ssd etc.


--

*`ceph.osd_tree.father`*::
+
--
type: keyword

the parent node of this osd or bucket node


--

[float]
== pool_disk fields

pool_disk



*`ceph.pool_disk.id`*::
+
--
type: long

Id of the pool


--

*`ceph.pool_disk.name`*::
+
--
type: keyword

Name of the pool


--

*`ceph.pool_disk.stats.available.bytes`*::
+
--
type: long

format: bytes

Available bytes of the pool


--

*`ceph.pool_disk.stats.objects`*::
+
--
type: long

Number of objects of the pool


--

*`ceph.pool_disk.stats.used.bytes`*::
+
--
type: long

format: bytes

Used bytes of the pool


--

*`ceph.pool_disk.stats.used.kb`*::
+
--
type: long

Used kb of the pool


--

[[exported-fields-cloud]]
== Cloud provider metadata fields

Metadata from cloud providers added by the add_cloud_metadata processor.



*`meta.cloud.provider`*::
+
--
example: ec2

Name of the cloud provider. Possible values are ec2, gce, or digitalocean.


--

*`meta.cloud.instance_id`*::
+
--
Instance ID of the host machine.


--

*`meta.cloud.instance_name`*::
+
--
Instance name of the host machine.


--

*`meta.cloud.machine_type`*::
+
--
example: t2.medium

Machine type of the host machine.


--

*`meta.cloud.availability_zone`*::
+
--
example: us-east-1c

Availability zone in which this host is running.


--

*`meta.cloud.project_id`*::
+
--
example: project-x

Name of the project in Google Cloud.


--

*`meta.cloud.region`*::
+
--
Region in which this host is running.


--

[[exported-fields-common]]
== Common fields

Contains common fields available in all event types.



*`metricset.module`*::
+
--
The name of the module that generated the event.


--

*`metricset.name`*::
+
--
The name of the metricset that generated the event.


--

*`metricset.host`*::
+
--
Hostname of the machine from which the metricset was collected. This field may not be present when the data was collected locally.


--

*`metricset.rtt`*::
+
--

deprecated[True]

type: long

required: True

Event round trip time in microseconds.


--

*`metricset.namespace`*::
+
--
type: keyword

Namespace of dynamic metricsets.


--

*`type`*::
+
--
example: metricsets

required: True

The document type. Always set to "doc".


--

*`service.name`*::
+
--
example: elasticsearch

Name of the service metricbeat fetches the data from.


--

*`event.duration`*::
+
--
type: long

Duration of the event in nano seconds.


--

*`event.dataset`*::
+
--
type: keyword

Event dataset name.


--

*`event.module`*::
+
--
type: alias

alias to: metricset.module

--

[[exported-fields-couchbase]]
== Couchbase fields

Metrics collected from Couchbase servers.



[float]
== couchbase fields

`couchbase` contains the metrics that were scraped from Couchbase.



[float]
== bucket fields

Couchbase bucket metrics.



*`couchbase.bucket.name`*::
+
--
type: keyword

Name of the bucket.


--

*`couchbase.bucket.type`*::
+
--
type: keyword

Type of the bucket.


--

*`couchbase.bucket.data.used.bytes`*::
+
--
type: long

format: bytes

Size of user data within buckets of the specified state that are resident in RAM.


--

*`couchbase.bucket.disk.fetches`*::
+
--
type: long

Number of disk fetches.


--

*`couchbase.bucket.disk.used.bytes`*::
+
--
type: long

format: bytes

Amount of disk used (bytes).


--

*`couchbase.bucket.memory.used.bytes`*::
+
--
type: long

format: bytes

Amount of memory used by the bucket (bytes).


--

*`couchbase.bucket.quota.ram.bytes`*::
+
--
type: long

format: bytes

Amount of RAM used by the bucket (bytes).


--

*`couchbase.bucket.quota.use.pct`*::
+
--
type: scaled_float

format: percent

Percentage of RAM used (for active objects) against the configured bucket size (%).


--

*`couchbase.bucket.ops_per_sec`*::
+
--
type: long

Number of operations per second.


--

*`couchbase.bucket.item_count`*::
+
--
type: long

Number of items associated with the bucket.


--

[float]
== cluster fields

Couchbase cluster metrics.



*`couchbase.cluster.hdd.free.bytes`*::
+
--
type: long

format: bytes

Free hard drive space in the cluster (bytes).


--

*`couchbase.cluster.hdd.quota.total.bytes`*::
+
--
type: long

format: bytes

Hard drive quota total for the cluster (bytes).


--

*`couchbase.cluster.hdd.total.bytes`*::
+
--
type: long

format: bytes

Total hard drive space available to the cluster (bytes).


--

*`couchbase.cluster.hdd.used.value.bytes`*::
+
--
type: long

format: bytes

Hard drive space used by the cluster (bytes).


--

*`couchbase.cluster.hdd.used.by_data.bytes`*::
+
--
type: long

format: bytes

Hard drive space used by the data in the cluster (bytes).


--

*`couchbase.cluster.max_bucket_count`*::
+
--
type: long

Max bucket count setting.


--

*`couchbase.cluster.quota.index_memory.mb`*::
+
--
type: long

Memory quota setting for the Index service (Mbyte).


--

*`couchbase.cluster.quota.memory.mb`*::
+
--
type: long

Memory quota setting for the cluster (Mbyte).


--

*`couchbase.cluster.ram.quota.total.value.bytes`*::
+
--
type: long

format: bytes

RAM quota total for the cluster (bytes).


--

*`couchbase.cluster.ram.quota.total.per_node.bytes`*::
+
--
type: long

format: bytes

RAM quota used by the current node in the cluster (bytes).


--

*`couchbase.cluster.ram.quota.used.value.bytes`*::
+
--
type: long

format: bytes

RAM quota used by the cluster (bytes).


--

*`couchbase.cluster.ram.quota.used.per_node.bytes`*::
+
--
type: long

format: bytes

Ram quota used by the current node in the cluster (bytes)


--

*`couchbase.cluster.ram.total.bytes`*::
+
--
type: long

format: bytes

Total RAM available to cluster (bytes).


--

*`couchbase.cluster.ram.used.value.bytes`*::
+
--
type: long

format: bytes

RAM used by the cluster (bytes).


--

*`couchbase.cluster.ram.used.by_data.bytes`*::
+
--
type: long

format: bytes

RAM used by the data in the cluster (bytes).


--

[float]
== node fields

Couchbase node metrics.



*`couchbase.node.cmd_get`*::
+
--
type: long

Number of get commands


--

*`couchbase.node.couch.docs.disk_size.bytes`*::
+
--
type: long

format: bytes

Amount of disk space used by Couch docs (bytes).


--

*`couchbase.node.couch.docs.data_size.bytes`*::
+
--
type: long

format: bytes

Data size of Couch docs associated with a node (bytes).


--

*`couchbase.node.couch.spatial.data_size.bytes`*::
+
--
type: long

Size of object data for spatial views (bytes).


--

*`couchbase.node.couch.spatial.disk_size.bytes`*::
+
--
type: long

Amount of disk space used by spatial views (bytes).


--

*`couchbase.node.couch.views.disk_size.bytes`*::
+
--
type: long

Amount of disk space used by Couch views (bytes).


--

*`couchbase.node.couch.views.data_size.bytes`*::
+
--
type: long

Size of object data for Couch views (bytes).


--

*`couchbase.node.cpu_utilization_rate.pct`*::
+
--
type: scaled_float

The CPU utilization rate (%).


--

*`couchbase.node.current_items.value`*::
+
--
type: long

Number of current items.


--

*`couchbase.node.current_items.total`*::
+
--
type: long

Total number of items associated with the node.


--

*`couchbase.node.ep_bg_fetched`*::
+
--
type: long

Number of disk fetches performed since the server was started.


--

*`couchbase.node.get_hits`*::
+
--
type: long

Number of get hits.


--

*`couchbase.node.hostname`*::
+
--
type: keyword

The hostname of the node.


--

*`couchbase.node.mcd_memory.allocated.bytes`*::
+
--
type: long

format: bytes

Amount of memcached memory allocated (bytes).


--

*`couchbase.node.mcd_memory.reserved.bytes`*::
+
--
type: long

Amount of memcached memory reserved (bytes).


--

*`couchbase.node.memory.free.bytes`*::
+
--
type: long

Amount of memory free for the node (bytes).


--

*`couchbase.node.memory.total.bytes`*::
+
--
type: long

Total memory available to the node (bytes).


--

*`couchbase.node.memory.used.bytes`*::
+
--
type: long

Memory used by the node (bytes).


--

*`couchbase.node.ops`*::
+
--
type: long

Number of operations performed on Couchbase.


--

*`couchbase.node.swap.total.bytes`*::
+
--
type: long

Total swap size allocated (bytes).


--

*`couchbase.node.swap.used.bytes`*::
+
--
type: long

Amount of swap space used (bytes).


--

*`couchbase.node.uptime.sec`*::
+
--
type: long

Time during which the node was in operation (sec).


--

*`couchbase.node.vb_replica_curr_items`*::
+
--
type: long

Number of items/documents that are replicas.


--

[[exported-fields-docker-processor]]
== Docker fields

Docker stats collected from Docker.




*`docker.container.id`*::
+
--
type: keyword

Unique container id.


--

*`docker.container.image`*::
+
--
type: keyword

Name of the image the container was built on.


--

*`docker.container.name`*::
+
--
type: keyword

Container name.


--

*`docker.container.labels`*::
+
--
type: object

Image labels.


--

[[exported-fields-docker]]
== Docker fields

Docker stats collected from Docker.



[float]
== docker fields

Information and statistics about docker's running containers.



[float]
== container fields

Docker container metrics.



*`docker.container.command`*::
+
--
type: keyword

Command that was executed in the Docker container.


--

*`docker.container.created`*::
+
--
type: date

Date when the container was created.


--

*`docker.container.status`*::
+
--
type: keyword

Container status.


--

*`docker.container.ip_addresses`*::
+
--
type: keyword

Container IP addresses.


--

[float]
== size fields

Container size metrics.



*`docker.container.size.root_fs`*::
+
--
type: long

Total size of all the files in the container.


--

*`docker.container.size.rw`*::
+
--
type: long

Size of the files that have been created or changed since creation.


--

*`docker.container.tags`*::
+
--
type: array

Image tags.


--

[float]
== cpu fields

Runtime CPU metrics.



*`docker.cpu.kernel.pct`*::
+
--
type: scaled_float

format: percentage

Percentage of time in kernel space.


--

*`docker.cpu.kernel.ticks`*::
+
--
type: long

CPU ticks in kernel space.


--

*`docker.cpu.system.pct`*::
+
--
type: scaled_float

format: percentage

Percentage of total CPU time in the system.


--

*`docker.cpu.system.ticks`*::
+
--
type: long

CPU system ticks.


--

*`docker.cpu.user.pct`*::
+
--
type: scaled_float

format: percentage

Percentage of time in user space.


--

*`docker.cpu.user.ticks`*::
+
--
type: long

CPU ticks in user space.


--

*`docker.cpu.total.pct`*::
+
--
type: scaled_float

format: percentage

Total CPU usage.


--

*`docker.cpu.core.*.pct`*::
+
--
type: object

format: percentage

Percentage of CPU time in this core.


--

*`docker.cpu.core.*.ticks`*::
+
--
type: object

Number of CPU ticks in this core.


--

[float]
== diskio fields

Disk I/O metrics.



[float]
== read fields

Accumulated reads during the life of the container



*`docker.diskio.read.ops`*::
+
--
type: long

Number of reads during the life of the container


--

*`docker.diskio.read.bytes`*::
+
--
type: long

format: bytes

Bytes read during the life of the container


--

*`docker.diskio.read.rate`*::
+
--
type: long

Number of current reads per second


--

*`docker.diskio.reads`*::
+
--

deprecated[6.4]

type: scaled_float

Number of current reads per second


--

[float]
== write fields

Accumulated writes during the life of the container



*`docker.diskio.write.ops`*::
+
--
type: long

Number of writes during the life of the container


--

*`docker.diskio.write.bytes`*::
+
--
type: long

format: bytes

Bytes written during the life of the container


--

*`docker.diskio.write.rate`*::
+
--
type: long

Number of current writes per second


--

*`docker.diskio.writes`*::
+
--

deprecated[6.4]

type: scaled_float

Number of current writes per second


--

[float]
== summary fields

Accumulated reads and writes during the life of the container



*`docker.diskio.summary.ops`*::
+
--
type: long

Number of I/O operations during the life of the container


--

*`docker.diskio.summary.bytes`*::
+
--
type: long

format: bytes

Bytes read and written during the life of the container


--

*`docker.diskio.summary.rate`*::
+
--
type: long

Number of current operations per second


--

*`docker.diskio.total`*::
+
--

deprecated[6.4]

type: scaled_float

Number of reads and writes per second


--

[float]
== healthcheck fields

Docker container metrics.



*`docker.healthcheck.failingstreak`*::
+
--
type: integer

concurent failed check


--

*`docker.healthcheck.status`*::
+
--
type: keyword

Healthcheck status code


--

[float]
== event fields

event fields.



*`docker.healthcheck.event.end_date`*::
+
--
type: date

Healthcheck end date


--

*`docker.healthcheck.event.start_date`*::
+
--
type: date

Healthcheck start date


--

*`docker.healthcheck.event.output`*::
+
--
type: keyword

Healthcheck output


--

*`docker.healthcheck.event.exit_code`*::
+
--
type: integer

Healthcheck status code


--

[float]
== image fields

Docker image metrics.



[float]
== id fields

The image layers identifier.



*`docker.image.id.current`*::
+
--
type: keyword

Unique image identifier given upon its creation.


--

*`docker.image.id.parent`*::
+
--
type: keyword

Identifier of the image, if it exists, from which the current image directly descends.


--

*`docker.image.created`*::
+
--
type: date

Date and time when the image was created.


--

[float]
== size fields

Image size layers.



*`docker.image.size.virtual`*::
+
--
type: long

Size of the image.


--

*`docker.image.size.regular`*::
+
--
type: long

Total size of the all cached images associated to the current image.


--

*`docker.image.labels`*::
+
--
type: object

Image labels.


--

*`docker.image.tags`*::
+
--
type: array

Image tags.


--

[float]
== info fields

Info metrics based on https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/display-system-wide-information.



[float]
== containers fields

Overall container stats.



*`docker.info.containers.paused`*::
+
--
type: long

Total number of paused containers.


--

*`docker.info.containers.running`*::
+
--
type: long

Total number of running containers.


--

*`docker.info.containers.stopped`*::
+
--
type: long

Total number of stopped containers.


--

*`docker.info.containers.total`*::
+
--
type: long

Total number of existing containers.


--

*`docker.info.id`*::
+
--
type: keyword

Unique Docker host identifier.


--

*`docker.info.images`*::
+
--
type: long

Total number of existing images.


--

[float]
== memory fields

Memory metrics.



*`docker.memory.fail.count`*::
+
--
type: scaled_float

Fail counter.


--

*`docker.memory.limit`*::
+
--
type: long

format: bytes

Memory limit.


--

[float]
== rss fields

RSS memory stats.



*`docker.memory.rss.total`*::
+
--
type: long

format: bytes

Total memory resident set size.


--

*`docker.memory.rss.pct`*::
+
--
type: scaled_float

format: percentage

Memory resident set size percentage.


--

[float]
== usage fields

Usage memory stats.



*`docker.memory.usage.max`*::
+
--
type: long

format: bytes

Max memory usage.


--

*`docker.memory.usage.pct`*::
+
--
type: scaled_float

format: percentage

Memory usage percentage.


--

*`docker.memory.usage.total`*::
+
--
type: long

format: bytes

Total memory usage.


--

[float]
== network fields

Network metrics.



*`docker.network.interface`*::
+
--
type: keyword

Network interface name.


--

[float]
== in fields

Incoming network stats per second.



*`docker.network.in.bytes`*::
+
--
type: long

format: bytes

Total number of incoming bytes.


--

*`docker.network.in.dropped`*::
+
--
type: scaled_float

Total number of dropped incoming packets.


--

*`docker.network.in.errors`*::
+
--
type: long

Total errors on incoming packets.


--

*`docker.network.in.packets`*::
+
--
type: long

Total number of incoming packets.


--

[float]
== out fields

Outgoing network stats per second.



*`docker.network.out.bytes`*::
+
--
type: long

format: bytes

Total number of outgoing bytes.


--

*`docker.network.out.dropped`*::
+
--
type: scaled_float

Total number of dropped outgoing packets.


--

*`docker.network.out.errors`*::
+
--
type: long

Total errors on outgoing packets.


--

*`docker.network.out.packets`*::
+
--
type: long

Total number of outgoing packets.


--

[float]
== inbound fields

Incoming network stats since the container started.



*`docker.network.inbound.bytes`*::
+
--
type: long

format: bytes

Total number of incoming bytes.


--

*`docker.network.inbound.dropped`*::
+
--
type: long

Total number of dropped incoming packets.


--

*`docker.network.inbound.errors`*::
+
--
type: long

Total errors on incoming packets.


--

*`docker.network.inbound.packets`*::
+
--
type: long

Total number of incoming packets.


--

[float]
== outbound fields

Outgoing network stats since the container started.



*`docker.network.outbound.bytes`*::
+
--
type: long

format: bytes

Total number of outgoing bytes.


--

*`docker.network.outbound.dropped`*::
+
--
type: long

Total number of dropped outgoing packets.


--

*`docker.network.outbound.errors`*::
+
--
type: long

Total errors on outgoing packets.


--

*`docker.network.outbound.packets`*::
+
--
type: long

Total number of outgoing packets.


--

[[exported-fields-dropwizard]]
== Dropwizard fields

Stats collected from Dropwizard.



[float]
== dropwizard fields




[[exported-fields-elasticsearch]]
== Elasticsearch fields

Elasticsearch module



[float]
== elasticsearch fields




*`elasticsearch.cluster.name`*::
+
--
type: keyword

Elasticsearch cluster name.


--

*`elasticsearch.cluster.id`*::
+
--
type: keyword

Elasticsearch cluster id.


--

*`elasticsearch.cluster.state.id`*::
+
--
type: keyword

Elasticsearch state id.


--

*`elasticsearch.node.id`*::
+
--
type: keyword

Node ID


--

*`elasticsearch.node.name`*::
+
--
type: keyword

Node name.


--

[float]
== ccr fields

Cross-cluster replication stats




*`elasticsearch.ccr.leader.index`*::
+
--
type: keyword

Name of leader index


--

*`elasticsearch.ccr.leader.max_seq_no`*::
+
--
type: long

Maximum sequence number of operation on the leader shard


--


*`elasticsearch.ccr.follower.index`*::
+
--
type: keyword

Name of follower index


--

*`elasticsearch.ccr.follower.shard.number`*::
+
--
type: long

Number of the shard within the index


--

*`elasticsearch.ccr.follower.operations_written`*::
+
--
type: long

Number of operations indexed (replicated) into the follower shard from the leader shard


--

*`elasticsearch.ccr.follower.time_since_last_read.ms`*::
+
--
type: long

Time, in ms, since the follower last fetched from the leader


--

*`elasticsearch.ccr.follower.global_checkpoint`*::
+
--
type: long

Global checkpoint value on follower shard


--

[float]
== cluster.stats fields

Cluster stats



*`elasticsearch.cluster.stats.status`*::
+
--
type: keyword

Cluster status (green, yellow, red).


--

[float]
== nodes fields

Nodes statistics.



*`elasticsearch.cluster.stats.nodes.count`*::
+
--
type: long

Total number of nodes in cluster.


--

*`elasticsearch.cluster.stats.nodes.master`*::
+
--
type: long

Number of master-eligible nodes in cluster.


--

*`elasticsearch.cluster.stats.nodes.data`*::
+
--
type: long

Number of data nodes in cluster.


--

[float]
== indices fields

Indices statistics.



*`elasticsearch.cluster.stats.indices.count`*::
+
--
type: long

Total number of indices in cluster.


--

[float]
== shards fields

Shard statistics.



*`elasticsearch.cluster.stats.indices.shards.count`*::
+
--
type: long

Total number of shards in cluster.


--

*`elasticsearch.cluster.stats.indices.shards.primaries`*::
+
--
type: long

Total number of primary shards in cluster.


--

*`elasticsearch.cluster.stats.indices.fielddata.memory.bytes`*::
+
--
type: long

Memory used for fielddata.


--

[float]
== index fields

index



*`elasticsearch.index.name`*::
+
--
type: keyword

Index name.


--


*`elasticsearch.index.total.docs.count`*::
+
--
type: long

Total number of documents in the index.


--

*`elasticsearch.index.total.docs.deleted`*::
+
--
type: long

Total number of deleted documents in the index.


--

*`elasticsearch.index.total.store.size.bytes`*::
+
--
type: long

format: bytes

Total size of the index in bytes.


--

*`elasticsearch.index.total.segments.count`*::
+
--
type: long

Total number of index segments.


--

*`elasticsearch.index.total.segments.memory.bytes`*::
+
--
type: long

format: bytes

Total number of memory used by the segments in bytes.


--

[float]
== index.recovery fields

index



*`elasticsearch.index.recovery.id`*::
+
--
type: long

Shard recovery id.


--

*`elasticsearch.index.recovery.type`*::
+
--
type: keyword

Shard recovery type.


--

*`elasticsearch.index.recovery.primary`*::
+
--
type: boolean

True if primary shard.


--

*`elasticsearch.index.recovery.stage`*::
+
--
type: keyword

Recovery stage.


--

*`elasticsearch.index.recovery.target.id`*::
+
--
type: keyword

Target node id.


--

*`elasticsearch.index.recovery.target.host`*::
+
--
type: ip

Target node host address.


--

*`elasticsearch.index.recovery.target.name`*::
+
--
type: keyword

Target node name.


--

*`elasticsearch.index.recovery.source.id`*::
+
--
type: keyword

Source node id.


--

*`elasticsearch.index.recovery.source.host`*::
+
--
type: ip

Source node host address.


--

*`elasticsearch.index.recovery.source.name`*::
+
--
type: keyword

Source node name.


--

[float]
== index.summary fields

index




*`elasticsearch.index.summary.primaries.docs.count`*::
+
--
type: long

Total number of documents in the index.


--

*`elasticsearch.index.summary.primaries.docs.deleted`*::
+
--
type: long

Total number of deleted documents in the index.


--

*`elasticsearch.index.summary.primaries.store.size.bytes`*::
+
--
type: long

format: bytes

Total size of the index in bytes.


--

*`elasticsearch.index.summary.primaries.segments.count`*::
+
--
type: long

Total number of index segments.


--

*`elasticsearch.index.summary.primaries.segments.memory.bytes`*::
+
--
type: long

format: bytes

Total number of memory used by the segments in bytes.


--


*`elasticsearch.index.summary.total.docs.count`*::
+
--
type: long

Total number of documents in the index.


--

*`elasticsearch.index.summary.total.docs.deleted`*::
+
--
type: long

Total number of deleted documents in the index.


--

*`elasticsearch.index.summary.total.store.size.bytes`*::
+
--
type: long

format: bytes

Total size of the index in bytes.


--

*`elasticsearch.index.summary.total.segments.count`*::
+
--
type: long

Total number of index segments.


--

*`elasticsearch.index.summary.total.segments.memory.bytes`*::
+
--
type: long

format: bytes

Total number of memory used by the segments in bytes.


--

[float]
== ml.job fields

ml



*`elasticsearch.ml.job.id`*::
+
--
type: keyword

Unique ml job id.


--

*`elasticsearch.ml.job.state`*::
+
--
type: keyword

Job state.


--

*`elasticsearch.ml.job.data_counts.processed_record_count`*::
+
--
type: long

Processed data events.


--

*`elasticsearch.ml.job.data_counts.invalid_date_count`*::
+
--
type: long

The number of records with either a missing date field or a date that could not be parsed.


--

[float]
== node fields

node



*`elasticsearch.node.version`*::
+
--
type: keyword

Node version.


--

[float]
== jvm fields

JVM Info.



*`elasticsearch.node.jvm.version`*::
+
--
type: keyword

JVM version.


--

*`elasticsearch.node.jvm.memory.heap.init.bytes`*::
+
--
type: long

format: bytes

Heap init used by the JVM in bytes.


--

*`elasticsearch.node.jvm.memory.heap.max.bytes`*::
+
--
type: long

format: bytes

Heap max used by the JVM in bytes.


--

*`elasticsearch.node.jvm.memory.nonheap.init.bytes`*::
+
--
type: long

format: bytes

Non-Heap init used by the JVM in bytes.


--

*`elasticsearch.node.jvm.memory.nonheap.max.bytes`*::
+
--
type: long

format: bytes

Non-Heap max used by the JVM in bytes.


--

*`elasticsearch.node.process.mlockall`*::
+
--
type: boolean

If process locked in memory.


--

[float]
== node.stats fields

node_stats



[float]
== indices fields

Node indices stats



*`elasticsearch.node.stats.indices.docs.count`*::
+
--
type: long

Total number of existing documents.


--

*`elasticsearch.node.stats.indices.docs.deleted`*::
+
--
type: long

Total number of deleted documents.


--

*`elasticsearch.node.stats.indices.segments.count`*::
+
--
type: long

Total number of segments.


--

*`elasticsearch.node.stats.indices.segments.memory.bytes`*::
+
--
type: long

format: bytes

Total size of segments in bytes.


--

*`elasticsearch.node.stats.indices.store.size.bytes`*::
+
--
type: long

Total size of the store in bytes.


--

[float]
== jvm.mem.pools fields

JVM memory pool stats



[float]
== old fields

Old memory pool stats.



*`elasticsearch.node.stats.jvm.mem.pools.old.max.bytes`*::
+
--
type: long

format: bytes

Max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.old.peak.bytes`*::
+
--
type: long

format: bytes

Peak bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.old.peak_max.bytes`*::
+
--
type: long

format: bytes

Peak max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.old.used.bytes`*::
+
--
type: long

format: bytes

Used bytes.

--

[float]
== young fields

Young memory pool stats.



*`elasticsearch.node.stats.jvm.mem.pools.young.max.bytes`*::
+
--
type: long

format: bytes

Max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.young.peak.bytes`*::
+
--
type: long

format: bytes

Peak bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.young.peak_max.bytes`*::
+
--
type: long

format: bytes

Peak max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.young.used.bytes`*::
+
--
type: long

format: bytes

Used bytes.

--

[float]
== survivor fields

Survivor memory pool stats.



*`elasticsearch.node.stats.jvm.mem.pools.survivor.max.bytes`*::
+
--
type: long

format: bytes

Max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.survivor.peak.bytes`*::
+
--
type: long

format: bytes

Peak bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.survivor.peak_max.bytes`*::
+
--
type: long

format: bytes

Peak max bytes.

--

*`elasticsearch.node.stats.jvm.mem.pools.survivor.used.bytes`*::
+
--
type: long

format: bytes

Used bytes.

--

[float]
== jvm.gc.collectors fields

GC collector stats.



[float]
== old.collection fields

Old collection gc.



*`elasticsearch.node.stats.jvm.gc.collectors.old.collection.count`*::
+
--
type: long



--

*`elasticsearch.node.stats.jvm.gc.collectors.old.collection.ms`*::
+
--
type: long



--

[float]
== young.collection fields

Young collection gc.



*`elasticsearch.node.stats.jvm.gc.collectors.young.collection.count`*::
+
--
type: long



--

*`elasticsearch.node.stats.jvm.gc.collectors.young.collection.ms`*::
+
--
type: long



--

[float]
== fs.summary fields

File system summary



*`elasticsearch.node.stats.fs.summary.total.bytes`*::
+
--
type: long

format: bytes



--

*`elasticsearch.node.stats.fs.summary.free.bytes`*::
+
--
type: long

format: bytes



--

*`elasticsearch.node.stats.fs.summary.available.bytes`*::
+
--
type: long

format: bytes



--

[float]
== cluster.pending_task fields

`cluster.pending_task` contains a pending task description.



*`elasticsearch.cluster.pending_task.insert_order`*::
+
--
type: long

Insert order


--

*`elasticsearch.cluster.pending_task.priority`*::
+
--
type: long

Priority


--

*`elasticsearch.cluster.pending_task.source`*::
+
--
type: keyword

Source. For example: put-mapping


--

*`elasticsearch.cluster.pending_task.time_in_queue.ms`*::
+
--
type: long

Time in queue


--

[float]
== shard fields

shard fields



*`elasticsearch.shard.primary`*::
+
--
type: boolean

True if this is the primary shard.


--

*`elasticsearch.shard.number`*::
+
--
type: long

The number of this shard.


--

*`elasticsearch.shard.state`*::
+
--
type: keyword

The state of this shard.


--

*`elasticsearch.shard.relocating_node.name`*::
+
--
type: keyword

The node the shard was relocated from.


--

[[exported-fields-envoyproxy]]
== envoyproxy fields

experimental[]
envoyproxy module



[float]
== envoyproxy fields




[float]
== server fields

Contains envoy proxy server stats




*`envoyproxy.server.cluster_manager.active_clusters`*::
+
--
type: integer

Number of currently active (warmed) clusters


--

*`envoyproxy.server.cluster_manager.cluster_added`*::
+
--
type: integer

Total clusters added (either via static config or CDS)


--

*`envoyproxy.server.cluster_manager.cluster_modified`*::
+
--
type: integer

Total clusters modified (via CDS)


--

*`envoyproxy.server.cluster_manager.cluster_removed`*::
+
--
type: integer

Total clusters removed (via CDS)


--

*`envoyproxy.server.cluster_manager.warming_clusters`*::
+
--
type: integer

Number of currently warming (not active) clusters


--


*`envoyproxy.server.filesystem.flushed_by_timer`*::
+
--
type: integer

Total number of times internal flush buffers are written to a file due to flush timeout


--

*`envoyproxy.server.filesystem.reopen_failed`*::
+
--
type: integer

Total number of times a file was failed to be opened


--

*`envoyproxy.server.filesystem.write_buffered`*::
+
--
type: integer

Total number of times file data is moved to Envoys internal flush buffer


--

*`envoyproxy.server.filesystem.write_completed`*::
+
--
type: integer

Total number of times a file was written


--

*`envoyproxy.server.filesystem.write_total_buffered`*::
+
--
type: integer

Current total size of internal flush buffer in bytes


--


*`envoyproxy.server.runtime.load_error`*::
+
--
type: integer

Total number of load attempts that resulted in an error


--

*`envoyproxy.server.runtime.load_success`*::
+
--
type: integer

Total number of load attempts that were successful


--

*`envoyproxy.server.runtime.num_keys`*::
+
--
type: integer

Number of keys currently loaded


--

*`envoyproxy.server.runtime.override_dir_exists`*::
+
--
type: integer

Total number of loads that did use an override directory


--

*`envoyproxy.server.runtime.override_dir_not_exists`*::
+
--
type: integer

Total number of loads that did not use an override directory


--

*`envoyproxy.server.runtime.admin_overrides_active`*::
+
--
type: integer

--


*`envoyproxy.server.listener_manager.listener_added`*::
+
--
type: integer

Total listeners added (either via static config or LDS)


--

*`envoyproxy.server.listener_manager.listener_create_failure`*::
+
--
type: integer

Total failed listener object additions to workers


--

*`envoyproxy.server.listener_manager.listener_create_success`*::
+
--
type: integer

Total listener objects successfully added to workers


--

*`envoyproxy.server.listener_manager.listener_modified`*::
+
--
type: integer

Total listeners modified (via LDS)


--

*`envoyproxy.server.listener_manager.listener_removed`*::
+
--
type: integer

Total listeners removed (via LDS)


--

*`envoyproxy.server.listener_manager.total_listeners_active`*::
+
--
type: integer

Number of currently active listeners


--

*`envoyproxy.server.listener_manager.total_listeners_draining`*::
+
--
type: integer

Number of currently draining listeners


--

*`envoyproxy.server.listener_manager.total_listeners_warming`*::
+
--
type: integer

Number of currently warming listeners


--


*`envoyproxy.server.stats.overflow`*::
+
--
type: integer

Total number of times Envoy cannot allocate a statistic due to a shortage of shared memory


--


*`envoyproxy.server.server.days_until_first_cert_expiring`*::
+
--
type: integer

Number of days until the next certificate being managed will expire


--

*`envoyproxy.server.server.live`*::
+
--
type: integer

1 if the server is not currently draining, 0 otherwise


--

*`envoyproxy.server.server.memory_allocated`*::
+
--
type: integer

Current amount of allocated memory in bytes


--

*`envoyproxy.server.server.memory_heap_size`*::
+
--
type: integer

Current reserved heap size in bytes


--

*`envoyproxy.server.server.parent_connections`*::
+
--
type: integer

Total connections of the old Envoy process on hot restart


--

*`envoyproxy.server.server.total_connections`*::
+
--
type: integer

Total connections of both new and old Envoy processes


--

*`envoyproxy.server.server.uptime`*::
+
--
type: integer

Current server uptime in seconds


--

*`envoyproxy.server.server.version`*::
+
--
type: integer

Integer represented version number based on SCM revision


--

*`envoyproxy.server.server.watchdog_mega_miss`*::
+
--
type: integer

--

*`envoyproxy.server.server.watchdog_miss`*::
+
--
type: integer

--

*`envoyproxy.server.server.hot_restart_epoch`*::
+
--
type: integer

Current hot restart epoch


--


*`envoyproxy.server.http2.header_overflow`*::
+
--
type: integer

Total number of connections reset due to the headers being larger than Envoy::Http::Http2::ConnectionImpl::StreamImpl::MAX_HEADER_SIZE (63k)


--

*`envoyproxy.server.http2.headers_cb_no_stream`*::
+
--
type: integer

Total number of errors where a header callback is called without an associated stream. This tracks an unexpected occurrence due to an as yet undiagnosed bug


--

*`envoyproxy.server.http2.rx_messaging_error`*::
+
--
type: integer

Total number of invalid received frames that violated section 8 of the HTTP/2 spec. This will result in a tx_reset


--

*`envoyproxy.server.http2.rx_reset`*::
+
--
type: integer

Total number of reset stream frames received by Envoy


--

*`envoyproxy.server.http2.too_many_header_frames`*::
+
--
type: integer

Total number of times an HTTP2 connection is reset due to receiving too many headers frames. Envoy currently supports proxying at most one header frame for 100-Continue one non-100 response code header frame and one frame with trailers


--

*`envoyproxy.server.http2.trailers`*::
+
--
type: integer

Total number of trailers seen on requests coming from downstream


--

*`envoyproxy.server.http2.tx_reset`*::
+
--
type: integer

Total number of reset stream frames transmitted by Envoy


--

[[exported-fields-etcd]]
== Etcd fields

etcd Module



[float]
== etcd fields

`etcd` contains statistics that were read from Etcd



[float]
== leader fields

Contains etcd leader statistics.



[float]
== followers.counts fields

The number of failed and successful Raft RPC requests.



*`etcd.leader.followers.counts.followers.counts.success`*::
+
--
type: integer

--

*`etcd.leader.followers.counts.followers.counts.fail`*::
+
--
type: integer

--

[float]
== followers.latency fields

latency to each peer in the cluster



*`etcd.leader.followers.latency.followers.latency.average`*::
+
--
type: scaled_float

--

*`etcd.leader.followers.latency.followers.latency.current`*::
+
--
type: scaled_float

--

*`etcd.leader.followers.latency.followers.latency.maximum`*::
+
--
type: scaled_float

--

*`etcd.leader.followers.latency.followers.latency.minimum`*::
+
--
type: integer

--

*`etcd.leader.followers.latency.follower.latency.standardDeviation`*::
+
--
type: scaled_float

--

*`etcd.leader.leader`*::
+
--
type: keyword

--

[float]
== self fields

Contains etcd self statistics.



*`etcd.self.id`*::
+
--
type: keyword

the unique identifier for the member


--

*`etcd.self.leaderinfo.leader`*::
+
--
type: keyword

id of the current leader member


--

*`etcd.self.leaderinfo.starttime`*::
+
--
type: keyword

--

*`etcd.self.leaderinfo.uptime`*::
+
--
type: keyword

id of the current leader member


--

*`etcd.self.name`*::
+
--
type: keyword

this member's name


--

*`etcd.self.recv.appendrequest.count`*::
+
--
type: integer

number of append requests this node has processed


--

*`etcd.self.recv.bandwidthrate`*::
+
--
type: scaled_float

number of bytes per second this node is receiving (follower only)


--

*`etcd.self.recv.pkgrate`*::
+
--
type: scaled_float

number of requests per second this node is receiving (follower only)


--

*`etcd.self.send.appendrequest.count`*::
+
--
type: integer

number of requests that this node has sent


--

*`etcd.self.send.bandwidthrate`*::
+
--
type: scaled_float

number of bytes per second this node is sending (leader only). This value is undefined on single member clusters.


--

*`etcd.self.send.pkgrate`*::
+
--
type: scaled_float

number of requests per second this node is sending (leader only). This value is undefined on single member clusters.


--

*`etcd.self.starttime`*::
+
--
type: keyword

the time when this node was started


--

*`etcd.self.state`*::
+
--
type: keyword

either leader or follower


--

[float]
== store fields

The store statistics include information about the operations that this node has handled.



*`etcd.store.gets.success`*::
+
--
type: integer

--

*`etcd.store.gets.fail`*::
+
--
type: integer

--

*`etcd.store.sets.success`*::
+
--
type: integer

--

*`etcd.store.sets.fail`*::
+
--
type: integer

--

*`etcd.store.delete.success`*::
+
--
type: integer

--

*`etcd.store.delete.fail`*::
+
--
type: integer

--

*`etcd.store.update.success`*::
+
--
type: integer

--

*`etcd.store.update.fail`*::
+
--
type: integer

--

*`etcd.store.create.success`*::
+
--
type: integer

--

*`etcd.store.create.fail`*::
+
--
type: integer

--

*`etcd.store.compareandswap.success`*::
+
--
type: integer

--

*`etcd.store.compareandswap.fail`*::
+
--
type: integer

--

*`etcd.store.compareanddelete.success`*::
+
--
type: integer

--

*`etcd.store.compareanddelete.fail`*::
+
--
type: integer

--

*`etcd.store.expire.count`*::
+
--
type: integer

--

*`etcd.store.watchers`*::
+
--
type: integer

--

[[exported-fields-golang]]
== Golang fields

Golang module



[float]
== golang fields




[float]
== expvar fields

expvar



*`golang.expvar.cmdline`*::
+
--
type: keyword

The cmdline of this Go program start with.


--

[float]
== heap fields

The Go program heap information exposed by expvar.



*`golang.heap.cmdline`*::
+
--
type: keyword

The cmdline of this Go program start with.


--

[float]
== gc fields

Garbage collector summary.



[float]
== total_pause fields

Total GC pause duration over lifetime of process.



*`golang.heap.gc.total_pause.ns`*::
+
--
type: long

Duration in Ns.


--

*`golang.heap.gc.total_count`*::
+
--
type: long

Total number of GC was happened.


--

*`golang.heap.gc.next_gc_limit`*::
+
--
type: long

format: bytes

Next collection will happen when HeapAlloc > this amount.


--

*`golang.heap.gc.cpu_fraction`*::
+
--
type: float

Fraction of CPU time used by GC.


--

[float]
== pause fields

Last GC pause durations during the monitoring period.



*`golang.heap.gc.pause.count`*::
+
--
type: long

Count of GC pause duration during this collect period.


--

[float]
== sum fields

Total GC pause duration during this collect period.



*`golang.heap.gc.pause.sum.ns`*::
+
--
type: long

Duration in Ns.


--

[float]
== max fields

Max GC pause duration during this collect period.



*`golang.heap.gc.pause.max.ns`*::
+
--
type: long

Duration in Ns.


--

[float]
== avg fields

Average GC pause duration during this collect period.



*`golang.heap.gc.pause.avg.ns`*::
+
--
type: long

Duration in Ns.


--

[float]
== system fields

Heap summary,which bytes was obtained from system.



*`golang.heap.system.total`*::
+
--
type: long

format: bytes

Total bytes obtained from system (sum of XxxSys below).


--

*`golang.heap.system.obtained`*::
+
--
type: long

format: bytes

Via HeapSys, bytes obtained from system. heap_sys = heap_idle + heap_inuse.


--

*`golang.heap.system.stack`*::
+
--
type: long

format: bytes

Bytes used by stack allocator, and these bytes was obtained from system.


--

*`golang.heap.system.released`*::
+
--
type: long

format: bytes

Bytes released to the OS.


--

[float]
== allocations fields

Heap allocations summary.



*`golang.heap.allocations.mallocs`*::
+
--
type: long

Number of mallocs.


--

*`golang.heap.allocations.frees`*::
+
--
type: long

Number of frees.


--

*`golang.heap.allocations.objects`*::
+
--
type: long

Total number of allocated objects.


--

*`golang.heap.allocations.total`*::
+
--
type: long

format: bytes

Bytes allocated (even if freed) throughout the lifetime.


--

*`golang.heap.allocations.allocated`*::
+
--
type: long

format: bytes

Bytes allocated and not yet freed (same as Alloc above).


--

*`golang.heap.allocations.idle`*::
+
--
type: long

format: bytes

Bytes in idle spans.


--

*`golang.heap.allocations.active`*::
+
--
type: long

format: bytes

Bytes in non-idle span.


--

[[exported-fields-graphite]]
== Graphite fields

graphite Module



[float]
== graphite fields




[float]
== server fields

server



*`graphite.server.example`*::
+
--
type: keyword

Example field


--

[[exported-fields-haproxy]]
== HAProxy fields

HAProxy Module



[float]
== haproxy fields

HAProxy metrics.



[float]
== info fields

General information about HAProxy processes.



*`haproxy.info.processes`*::
+
--
type: long

Number of processes.


--

*`haproxy.info.process_num`*::
+
--
type: long

Process number.


--

*`haproxy.info.pid`*::
+
--
type: long

Process ID.


--

*`haproxy.info.run_queue`*::
+
--
type: long



--

*`haproxy.info.tasks`*::
+
--
type: long



--

*`haproxy.info.uptime.sec`*::
+
--
type: long

Current uptime in seconds.


--

*`haproxy.info.memory.max.bytes`*::
+
--
type: long

format: bytes

Maximum amount of memory usage in bytes (the 'Memmax_MB' value converted to bytes).


--

*`haproxy.info.ulimit_n`*::
+
--
type: long

Maximum number of open files for the process.


--

[float]
== compress fields




[float]
== bps fields




*`haproxy.info.compress.bps.in`*::
+
--
type: long



--

*`haproxy.info.compress.bps.out`*::
+
--
type: long



--

*`haproxy.info.compress.bps.rate_limit`*::
+
--
type: long



--

[float]
== connection fields




[float]
== rate fields




*`haproxy.info.connection.rate.value`*::
+
--
type: long



--

*`haproxy.info.connection.rate.limit`*::
+
--
type: long



--

*`haproxy.info.connection.rate.max`*::
+
--
type: long



--

*`haproxy.info.connection.current`*::
+
--
type: long

Current connections.


--

*`haproxy.info.connection.total`*::
+
--
type: long

Total connections.


--

*`haproxy.info.connection.ssl.current`*::
+
--
type: long

Current SSL connections.


--

*`haproxy.info.connection.ssl.total`*::
+
--
type: long

Total SSL connections.


--

*`haproxy.info.connection.ssl.max`*::
+
--
type: long

Maximum SSL connections.


--

*`haproxy.info.connection.max`*::
+
--
type: long

Maximum connections.


--

*`haproxy.info.connection.hard_max`*::
+
--
type: long



--

*`haproxy.info.requests.total`*::
+
--
type: long



--

*`haproxy.info.sockets.max`*::
+
--
type: long



--

*`haproxy.info.requests.max`*::
+
--
type: long



--

[float]
== pipes fields




*`haproxy.info.pipes.used`*::
+
--
type: integer



--

*`haproxy.info.pipes.free`*::
+
--
type: integer



--

*`haproxy.info.pipes.max`*::
+
--
type: integer



--

[float]
== session fields

None


*`haproxy.info.session.rate.value`*::
+
--
type: integer



--

*`haproxy.info.session.rate.limit`*::
+
--
type: integer



--

*`haproxy.info.session.rate.max`*::
+
--
type: integer



--

[float]
== ssl fields

None


*`haproxy.info.ssl.rate.value`*::
+
--
type: integer

None

--

*`haproxy.info.ssl.rate.limit`*::
+
--
type: integer

None

--

*`haproxy.info.ssl.rate.max`*::
+
--
type: integer

None

--

[float]
== frontend fields

None


*`haproxy.info.ssl.frontend.key_rate.value`*::
+
--
type: integer

None

--

*`haproxy.info.ssl.frontend.key_rate.max`*::
+
--
type: integer

None

--

*`haproxy.info.ssl.frontend.session_reuse.pct`*::
+
--
type: scaled_float

format: percent

None

--

[float]
== backend fields

None


*`haproxy.info.ssl.backend.key_rate.value`*::
+
--
type: integer

None

--

*`haproxy.info.ssl.backend.key_rate.max`*::
+
--
type: integer

MaxConnRate

--

*`haproxy.info.ssl.cached_lookups`*::
+
--
type: long

None

--

*`haproxy.info.ssl.cache_misses`*::
+
--
type: long

None

--

[float]
== zlib_mem_usage fields




*`haproxy.info.zlib_mem_usage.value`*::
+
--
type: integer



--

*`haproxy.info.zlib_mem_usage.max`*::
+
--
type: integer



--

*`haproxy.info.idle.pct`*::
+
--
type: scaled_float

format: percent



--

[float]
== stat fields

Stats collected from HAProxy processes.



*`haproxy.stat.status`*::
+
--
type: keyword

Status (UP, DOWN, NOLB, MAINT, or MAINT(via)...).


--

*`haproxy.stat.weight`*::
+
--
type: long

Total weight (for backends), or server weight (for servers).


--

*`haproxy.stat.downtime`*::
+
--
type: long

Total downtime (in seconds). For backends, this value is the downtime for the whole backend, not the sum of the downtime for the servers.


--

*`haproxy.stat.component_type`*::
+
--
type: integer

Component type (0=frontend, 1=backend, 2=server, or 3=socket/listener).


--

*`haproxy.stat.process_id`*::
+
--
type: integer

Process ID (0 for first instance, 1 for second, and so on).


--

*`haproxy.stat.service_name`*::
+
--
type: keyword

Service name (FRONTEND for frontend, BACKEND for backend, or any name for server/listener).


--

*`haproxy.stat.in.bytes`*::
+
--
type: long

format: bytes

Bytes in.


--

*`haproxy.stat.out.bytes`*::
+
--
type: long

format: bytes

Bytes out.


--

*`haproxy.stat.last_change`*::
+
--
type: integer

Number of seconds since the last UP->DOWN or DOWN->UP transition.


--

*`haproxy.stat.throttle.pct`*::
+
--
type: scaled_float

format: percentage

Current throttle percentage for the server when slowstart is active, or no value if slowstart is inactive.


--

*`haproxy.stat.selected.total`*::
+
--
type: long

Total number of times a server was selected, either for new sessions, or when re-dispatching. For servers, this field reports the the number of times the server was selected.


--

*`haproxy.stat.tracked.id`*::
+
--
type: long

ID of the proxy/server if tracking is enabled.


--


*`haproxy.stat.connection.total`*::
+
--
type: long

Cumulative number of connections.


--

*`haproxy.stat.connection.retried`*::
+
--
type: long

Number of times a connection to a server was retried.


--

*`haproxy.stat.connection.time.avg`*::
+
--
type: long

Average connect time in ms over the last 1024 requests.


--


*`haproxy.stat.request.denied`*::
+
--
type: long

Requests denied because of security concerns.

  * For TCP this is because of a matched tcp-request content rule.
  * For HTTP this is because of a matched http-request or tarpit rule.


--

*`haproxy.stat.request.queued.current`*::
+
--
type: long

Current queued requests. For backends, this field reports the number of requests queued without a server assigned.


--

*`haproxy.stat.request.queued.max`*::
+
--
type: long

Maximum value of queued.current.


--

*`haproxy.stat.request.errors`*::
+
--
type: long

Request errors. Some of the possible causes are:

  * early termination from the client, before the request has been sent
  * read error from the client
  * client timeout
  * client closed connection
  * various bad requests from the client.
  * request was tarpitted.


--

*`haproxy.stat.request.redispatched`*::
+
--
type: long

Number of times a request was redispatched to another server. For servers, this field reports the number of times the server was switched away from.


--

*`haproxy.stat.request.connection.errors`*::
+
--
type: long

Number of requests that encountered an error trying to connect to a server. For backends, this field reports the sum of the stat for all backend servers, plus any connection errors not associated with a particular server (such as the backend having no active servers).


--

[float]
== rate fields




*`haproxy.stat.request.rate.value`*::
+
--
type: long

Number of HTTP requests per second over the last elapsed second.


--

*`haproxy.stat.request.rate.max`*::
+
--
type: long

Maximum number of HTTP requests per second.


--

*`haproxy.stat.request.total`*::
+
--
type: long

Total number of HTTP requests received.


--


*`haproxy.stat.response.errors`*::
+
--
type: long

Number of response errors. This value includes the number of data transfers aborted by the server (haproxy.stat.server.aborted). Some other errors are:
* write errors on the client socket (won't be counted for the server stat) * failure applying filters to the response


--

*`haproxy.stat.response.time.avg`*::
+
--
type: long

Average response time in ms over the last 1024 requests (0 for TCP).


--

*`haproxy.stat.response.denied`*::
+
--
type: integer

Responses denied because of security concerns. For HTTP this is because of a matched http-request rule, or "option checkcache".


--

[float]
== http fields




*`haproxy.stat.response.http.1xx`*::
+
--
type: long

HTTP responses with 1xx code.


--

*`haproxy.stat.response.http.2xx`*::
+
--
type: long

HTTP responses with 2xx code.


--

*`haproxy.stat.response.http.3xx`*::
+
--
type: long

HTTP responses with 3xx code.


--

*`haproxy.stat.response.http.4xx`*::
+
--
type: long

HTTP responses with 4xx code.


--

*`haproxy.stat.response.http.5xx`*::
+
--
type: long

HTTP responses with 5xx code.


--

*`haproxy.stat.response.http.other`*::
+
--
type: long

HTTP responses with other codes (protocol error).


--


*`haproxy.stat.session.current`*::
+
--
type: long

Number of current sessions.


--

*`haproxy.stat.session.max`*::
+
--
type: long

Maximum number of sessions.


--

*`haproxy.stat.session.limit`*::
+
--
type: long

Configured session limit.


--


*`haproxy.stat.session.rate.value`*::
+
--
type: integer

Number of sessions per second over the last elapsed second.


--

*`haproxy.stat.session.rate.limit`*::
+
--
type: integer

Configured limit on new sessions per second.


--

*`haproxy.stat.session.rate.max`*::
+
--
type: integer

Maximum number of new sessions per second.


--

[float]
== check fields




*`haproxy.stat.check.status`*::
+
--
type: keyword

Status of the last health check. One of:

  UNK     -> unknown
  INI     -> initializing
  SOCKERR -> socket error
  L4OK    -> check passed on layer 4, no upper layers testing enabled
  L4TOUT  -> layer 1-4 timeout
  L4CON   -> layer 1-4 connection problem, for example
            "Connection refused" (tcp rst) or "No route to host" (icmp)
  L6OK    -> check passed on layer 6
  L6TOUT  -> layer 6 (SSL) timeout
  L6RSP   -> layer 6 invalid response - protocol error
  L7OK    -> check passed on layer 7
  L7OKC   -> check conditionally passed on layer 7, for example 404 with
            disable-on-404
  L7TOUT  -> layer 7 (HTTP/SMTP) timeout
  L7RSP   -> layer 7 invalid response - protocol error
  L7STS   -> layer 7 response error, for example HTTP 5xx


--

*`haproxy.stat.check.code`*::
+
--
type: long

Layer 5-7 code, if available.


--

*`haproxy.stat.check.duration`*::
+
--
type: long

Time in ms that it took to finish the last health check.


--

*`haproxy.stat.check.health.last`*::
+
--
type: keyword

The result of the last health check.


--

*`haproxy.stat.check.health.fail`*::
+
--
type: long

Number of failed checks.


--

*`haproxy.stat.check.agent.last`*::
+
--
type: integer



--

*`haproxy.stat.check.failed`*::
+
--
type: long

Number of checks that failed while the server was up.


--

*`haproxy.stat.check.down`*::
+
--
type: long

Number of UP->DOWN transitions. For backends, this value is the number of transitions to the whole backend being down, rather than the sum of the transitions for each server.


--

*`haproxy.stat.client.aborted`*::
+
--
type: integer

Number of data transfers aborted by the client.


--

[float]
== server fields




*`haproxy.stat.server.id`*::
+
--
type: integer

Server ID (unique inside a proxy).


--

*`haproxy.stat.server.aborted`*::
+
--
type: integer

Number of data transfers aborted by the server. This value is included in haproxy.stat.response.errors.


--

*`haproxy.stat.server.active`*::
+
--
type: integer

Number of backend servers that are active, meaning that they are healthy and can receive requests from the load balancer.


--

*`haproxy.stat.server.backup`*::
+
--
type: integer

Number of backend servers that are backup servers.


--

[float]
== compressor fields




*`haproxy.stat.compressor.in.bytes`*::
+
--
type: long

format: bytes

Number of HTTP response bytes fed to the compressor.


--

*`haproxy.stat.compressor.out.bytes`*::
+
--
type: integer

format: bytes

Number of HTTP response bytes emitted by the compressor.


--

*`haproxy.stat.compressor.bypassed.bytes`*::
+
--
type: long

format: bytes

Number of bytes that bypassed the HTTP compressor (CPU/BW limit).


--

*`haproxy.stat.compressor.response.bytes`*::
+
--
type: long

format: bytes

Number of HTTP responses that were compressed.


--

[float]
== proxy fields




*`haproxy.stat.proxy.id`*::
+
--
type: integer

Unique proxy ID.


--

*`haproxy.stat.proxy.name`*::
+
--
type: keyword

Proxy name.


--

[float]
== queue fields




*`haproxy.stat.queue.limit`*::
+
--
type: integer

Configured queue limit (maxqueue) for the server, or nothing if the value of maxqueue is 0 (meaning no limit).


--

*`haproxy.stat.queue.time.avg`*::
+
--
type: integer

The average queue time in ms over the last 1024 requests.


--

[[exported-fields-host-processor]]
== Host fields

Info collected for the host machine.




*`host.name`*::
+
--
type: keyword

Hostname.


--

*`host.id`*::
+
--
type: keyword

Unique host id.


--

*`host.architecture`*::
+
--
type: keyword

Host architecture (e.g. x86_64, arm, ppc, mips).


--

*`host.os.platform`*::
+
--
type: keyword

OS platform (e.g. centos, ubuntu, windows).


--

*`host.os.version`*::
+
--
type: keyword

OS version.


--

*`host.os.family`*::
+
--
type: keyword

OS family (e.g. redhat, debian, freebsd, windows).


--

*`host.ip`*::
+
--
type: ip

List of IP-addresses.


--

*`host.mac`*::
+
--
type: keyword

List of hardware-addresses, usually MAC-addresses.


--

[[exported-fields-http]]
== HTTP fields

HTTP module



[float]
== http fields




[float]
== request fields

HTTP request information



*`http.request.headers`*::
+
--
type: object

The HTTP headers sent


--

*`http.request.method`*::
+
--
type: keyword

The HTTP method used


--

*`http.request.body`*::
+
--
type: keyword

The HTTP payload sent


--

[float]
== response fields

HTTP response information



*`http.response.headers`*::
+
--
type: object

The HTTP headers received


--

*`http.response.code`*::
+
--
type: keyword

example: 404

The HTTP status code


--

*`http.response.phrase`*::
+
--
type: keyword

example: Not found

The HTTP status phrase


--

*`http.response.body`*::
+
--
type: keyword

The HTTP payload received


--

[float]
== json fields

json metricset


[float]
== server fields

server


[[exported-fields-jolokia]]
== Jolokia fields

Jolokia module



[float]
== jolokia fields

jolokia contains metrics exposed via jolokia agent



[[exported-fields-kafka]]
== Kafka fields

Kafka module



[float]
== kafka fields




[float]
== broker fields

Broker Consumer Group Information have been read from (Broker handling the consumer group).



*`kafka.broker.id`*::
+
--
type: long

Broker id


--

*`kafka.broker.address`*::
+
--
type: keyword

Broker advertised address


--

*`kafka.topic.name`*::
+
--
type: keyword

Topic name


--

*`kafka.topic.error.code`*::
+
--
type: long

Topic error code.


--

*`kafka.partition.id`*::
+
--
type: long

Partition id.


--

*`kafka.partition.topic_id`*::
+
--
type: keyword

Unique id of the partition in the topic.

--

*`kafka.partition.topic_broker_id`*::
+
--
type: keyword

Unique id of the partition in the topic and the broker.

--

[float]
== consumergroup fields

consumergroup



[float]
== broker fields

Broker Consumer Group Information have been read from (Broker handling the consumer group).



*`kafka.consumergroup.broker.id`*::
+
--
type: long

Broker id


--

*`kafka.consumergroup.broker.address`*::
+
--
type: keyword

Broker address


--

*`kafka.consumergroup.id`*::
+
--
type: keyword

Consumer Group ID

--

*`kafka.consumergroup.topic`*::
+
--

deprecated[6.5]

type: keyword

Topic name

--

*`kafka.consumergroup.partition`*::
+
--

deprecated[6.5]

type: long

Partition ID

--

*`kafka.consumergroup.offset`*::
+
--
type: long

consumer offset into partition being read

--

*`kafka.consumergroup.meta`*::
+
--
type: text

custom consumer meta data string

--

*`kafka.consumergroup.error.code`*::
+
--
type: long

kafka consumer/partition error code.


--

[float]
== client fields

Assigned client reading events from partition



*`kafka.consumergroup.client.id`*::
+
--
type: keyword

Client ID (kafka setting client.id)

--

*`kafka.consumergroup.client.host`*::
+
--
type: keyword

Client host

--

*`kafka.consumergroup.client.member_id`*::
+
--
type: keyword

internal consumer group member ID

--

[float]
== partition fields

partition



[float]
== offset fields

Available offsets of the given partition.



*`kafka.partition.offset.newest`*::
+
--
type: long

Newest offset of the partition.


--

*`kafka.partition.offset.oldest`*::
+
--
type: long

Oldest offset of the partition.


--

[float]
== partition fields

Partition data.



*`kafka.partition.partition.id`*::
+
--

deprecated[6.5]

type: long

Partition id.


--

*`kafka.partition.partition.leader`*::
+
--
type: long

Leader id (broker).


--

*`kafka.partition.partition.isr`*::
+
--
type: array

List of isr ids.


--

*`kafka.partition.partition.replica`*::
+
--
type: long

Replica id (broker).


--

*`kafka.partition.partition.insync_replica`*::
+
--
type: boolean

Indicates if replica is included in the in-sync replicate set (ISR).


--

*`kafka.partition.partition.is_leader`*::
+
--
type: boolean

Indicates if replica is the leader


--

*`kafka.partition.partition.error.code`*::
+
--
type: long

Error code from fetching partition.


--

*`kafka.partition.topic.error.code`*::
+
--

deprecated[6.5]

type: long

topic error code.


--

*`kafka.partition.topic.name`*::
+
--

deprecated[6.5]

type: keyword

Topic name


--

*`kafka.partition.broker.id`*::
+
--

deprecated[6.5]

type: long

Broker id


--

*`kafka.partition.broker.address`*::
+
--

deprecated[6.5]

type: keyword

Broker address


--

[[exported-fields-kibana]]
== Kibana fields

Kibana module



[float]
== kibana fields




[float]
== stats fields

Kibana stats and run-time metrics.



*`kibana.stats.uuid`*::
+
--
type: keyword

Kibana instance UUID


--

*`kibana.stats.name`*::
+
--
type: text

Kibana instance name


--

*`kibana.stats.index`*::
+
--
type: keyword

Name of Kibana's internal index


--

*`kibana.stats.host.name`*::
+
--
type: keyword

Kibana instance hostname


--

*`kibana.stats.transport_address`*::
+
--
type: keyword

Kibana server's hostname and port


--

*`kibana.stats.version`*::
+
--
type: keyword

Kibana version


--

*`kibana.stats.snapshot`*::
+
--
type: boolean

Whether the Kibana build is a snapshot build


--

*`kibana.stats.status`*::
+
--
type: keyword

Kibana instance's health status


--

*`kibana.stats.concurrent_connections`*::
+
--
type: long

Number of client connections made to the server. Note that browsers can send multiple simultaneous connections to request multiple server assets at once, and they can re-use established connections.


--

[float]
== process fields

Process metrics



*`kibana.stats.process.event_loop_delay.ms`*::
+
--
type: scaled_float

Event loop delay in milliseconds


--

[float]
== memory.heap fields

Process heap metrics



*`kibana.stats.process.memory.heap.total.bytes`*::
+
--
type: long

format: bytes

Total heap allocated to process in bytes


--

*`kibana.stats.process.memory.heap.used.bytes`*::
+
--
type: long

format: bytes

Heap used by process in bytes


--

*`kibana.stats.process.memory.heap.size_limit.bytes`*::
+
--
type: long

format: bytes

Max. old space size allocated to Node.js process, in bytes


--

*`kibana.stats.process.memory.heap.uptime.ms`*::
+
--
type: long

Uptime of process in milliseconds


--

[float]
== request fields

Request count metrics



*`kibana.stats.request.disconnects`*::
+
--
type: long

Number of requests that were disconnected


--

*`kibana.stats.request.total`*::
+
--
type: long

Total number of requests


--

[float]
== response_time fields

Response times metrics



*`kibana.stats.response_time.avg.ms`*::
+
--
type: long

Average response time in milliseconds


--

*`kibana.stats.response_time.max.ms`*::
+
--
type: long

Maximum response time in milliseconds


--

[float]
== status fields

Status fields



*`kibana.status.name`*::
+
--
type: keyword

Kibana instance name.


--

*`kibana.status.uuid`*::
+
--
type: keyword

Kibana instance uuid.


--

*`kibana.status.version.number`*::
+
--
type: keyword

Kibana version number.


--

*`kibana.status.status.overall.state`*::
+
--
type: keyword

Kibana overall state.


--

[float]
== metrics fields

Metrics fields



*`kibana.status.metrics.concurrent_connections`*::
+
--
type: long

Current concurrent connections.


--

[float]
== requests fields

Request statistics.



*`kibana.status.metrics.requests.disconnects`*::
+
--
type: long

Total number of disconnected connections.


--

*`kibana.status.metrics.requests.total`*::
+
--
type: long

Total number of connections.


--

[[exported-fields-kubernetes-processor]]
== Kubernetes fields

Kubernetes metadata added by the kubernetes processor




*`kubernetes.pod.name`*::
+
--
type: keyword

Kubernetes pod name


--

*`kubernetes.pod.uid`*::
+
--
type: keyword

Kubernetes Pod UID


--

*`kubernetes.namespace`*::
+
--
type: keyword

Kubernetes namespace


--

*`kubernetes.node.name`*::
+
--
type: keyword

Kubernetes node name


--

*`kubernetes.labels`*::
+
--
type: object

Kubernetes labels map


--

*`kubernetes.annotations`*::
+
--
type: object

Kubernetes annotations map


--

*`kubernetes.container.name`*::
+
--
type: keyword

Kubernetes container name


--

*`kubernetes.container.image`*::
+
--
type: keyword

Kubernetes container image


--

[[exported-fields-kubernetes]]
== Kubernetes fields

Kubernetes metrics



[float]
== kubernetes fields

Information and statistics of pods managed by kubernetes.



[float]
== apiserver fields

Kubernetes API server metrics



*`kubernetes.apiserver.request.client`*::
+
--
type: keyword

Client doing the requests


--

*`kubernetes.apiserver.request.resource`*::
+
--
type: keyword

Requested resource


--

*`kubernetes.apiserver.request.subresource`*::
+
--
type: keyword

Requested subresource


--

*`kubernetes.apiserver.request.scope`*::
+
--
type: keyword

Request scope (cluster, namespace, resource)


--

*`kubernetes.apiserver.request.verb`*::
+
--
type: keyword

Request HTTP verb


--

*`kubernetes.apiserver.request.count`*::
+
--
type: long

Total number of requests


--

*`kubernetes.apiserver.request.latency.sum`*::
+
--
type: long

Requests latency, sum of latencies in microseconds


--

*`kubernetes.apiserver.request.latency.count`*::
+
--
type: long

Request latency, number of requests


--

*`kubernetes.apiserver.request.latency.bucket`*::
+
--
type: object

Request latency histogram buckets


--

[float]
== container fields

kubernetes container metrics



*`kubernetes.container.start_time`*::
+
--
type: date

Start time


--

[float]
== cpu fields

CPU usage metrics





*`kubernetes.container.cpu.usage.core.ns`*::
+
--
type: long

Container CPU Core usage nanoseconds


--

*`kubernetes.container.cpu.usage.nanocores`*::
+
--
type: long

CPU used nanocores


--

*`kubernetes.container.cpu.usage.node.pct`*::
+
--
type: scaled_float

format: percentage

CPU usage as a percentage of the total node allocatable CPU


--

*`kubernetes.container.cpu.usage.limit.pct`*::
+
--
type: scaled_float

format: percentage

CPU usage as a percentage of the defined limit for the container (or total node allocatable CPU if unlimited)


--

[float]
== logs fields

Logs info




*`kubernetes.container.logs.available.bytes`*::
+
--
type: long

format: bytes

Logs available capacity in bytes


--


*`kubernetes.container.logs.capacity.bytes`*::
+
--
type: long

format: bytes

Logs total capacity in bytes


--


*`kubernetes.container.logs.used.bytes`*::
+
--
type: long

format: bytes

Logs used capacity in bytes


--


*`kubernetes.container.logs.inodes.count`*::
+
--
type: long

Total available inodes


--

*`kubernetes.container.logs.inodes.free`*::
+
--
type: long

Total free inodes


--

*`kubernetes.container.logs.inodes.used`*::
+
--
type: long

Total used inodes


--



*`kubernetes.container.memory.available.bytes`*::
+
--
type: long

format: bytes

Total available memory


--


*`kubernetes.container.memory.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage


--

*`kubernetes.container.memory.usage.node.pct`*::
+
--
type: scaled_float

format: percentage

Memory usage as a percentage of the total node allocatable memory


--

*`kubernetes.container.memory.usage.limit.pct`*::
+
--
type: scaled_float

format: percentage

Memory usage as a percentage of the defined limit for the container (or total node allocatable memory if unlimited)


--


*`kubernetes.container.memory.rss.bytes`*::
+
--
type: long

format: bytes

RSS memory usage


--


*`kubernetes.container.memory.workingset.bytes`*::
+
--
type: long

format: bytes

Working set memory usage


--

*`kubernetes.container.memory.pagefaults`*::
+
--
type: long

Number of page faults


--

*`kubernetes.container.memory.majorpagefaults`*::
+
--
type: long

Number of major page faults


--



*`kubernetes.container.rootfs.capacity.bytes`*::
+
--
type: long

format: bytes

Root filesystem total capacity in bytes


--


*`kubernetes.container.rootfs.available.bytes`*::
+
--
type: long

format: bytes

Root filesystem total available in bytes


--


*`kubernetes.container.rootfs.used.bytes`*::
+
--
type: long

format: bytes

Root filesystem total used in bytes


--


*`kubernetes.container.rootfs.inodes.used`*::
+
--
type: long

Used inodes


--

[float]
== event fields

The Kubernetes events metricset collects events that are generated by objects running inside of Kubernetes



*`kubernetes.event.count`*::
+
--
type: long

Count field records the number of times the particular event has occurred


--


*`kubernetes.event.timestamp.first_occurrence`*::
+
--
type: date

Timestamp of first occurrence of event


--

*`kubernetes.event.timestamp.last_occurrence`*::
+
--
type: date

Timestamp of last occurrence of event


--

*`kubernetes.event.message`*::
+
--
type: keyword

Message recorded for the given event


--

*`kubernetes.event.reason`*::
+
--
type: keyword

Reason recorded for the given event


--

*`kubernetes.event.type`*::
+
--
type: keyword

Type of the given event


--

[float]
== metadata fields

Metadata associated with the given event




*`kubernetes.event.metadata.timestamp.created`*::
+
--
type: date

Timestamp of creation of the given event


--

*`kubernetes.event.metadata.name`*::
+
--
type: keyword

Name of the event


--

*`kubernetes.event.metadata.namespace`*::
+
--
type: keyword

Namespace in which event was generated


--

*`kubernetes.event.metadata.resource_version`*::
+
--
type: keyword

Version of the event resource


--

*`kubernetes.event.metadata.uid`*::
+
--
type: keyword

Unique identifier to the event object


--

*`kubernetes.event.metadata.self_link`*::
+
--
type: keyword

URL representing the event


--

[float]
== involved_object fields

Metadata associated with the given involved object



*`kubernetes.event.involved_object.api_version`*::
+
--
type: keyword

API version of the object


--

*`kubernetes.event.involved_object.kind`*::
+
--
type: keyword

API kind of the object


--

*`kubernetes.event.involved_object.name`*::
+
--
type: keyword

name of the object


--

*`kubernetes.event.involved_object.resource_version`*::
+
--
type: keyword

resource version of the object


--

*`kubernetes.event.involved_object.uid`*::
+
--
type: keyword

UUID version of the object


--

[float]
== node fields

kubernetes node metrics



*`kubernetes.node.start_time`*::
+
--
type: date

Start time


--

[float]
== cpu fields

CPU usage metrics





*`kubernetes.node.cpu.usage.core.ns`*::
+
--
type: long

Node CPU Core usage nanoseconds


--

*`kubernetes.node.cpu.usage.nanocores`*::
+
--
type: long

CPU used nanocores


--



*`kubernetes.node.memory.available.bytes`*::
+
--
type: long

format: bytes

Total available memory


--


*`kubernetes.node.memory.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage


--


*`kubernetes.node.memory.rss.bytes`*::
+
--
type: long

format: bytes

RSS memory usage


--


*`kubernetes.node.memory.workingset.bytes`*::
+
--
type: long

format: bytes

Working set memory usage


--

*`kubernetes.node.memory.pagefaults`*::
+
--
type: long

Number of page faults


--

*`kubernetes.node.memory.majorpagefaults`*::
+
--
type: long

Number of major page faults


--



*`kubernetes.node.network.rx.bytes`*::
+
--
type: long

format: bytes

Received bytes


--

*`kubernetes.node.network.rx.errors`*::
+
--
type: long

Rx errors


--


*`kubernetes.node.network.tx.bytes`*::
+
--
type: long

format: bytes

Transmitted bytes


--

*`kubernetes.node.network.tx.errors`*::
+
--
type: long

Tx errors


--



*`kubernetes.node.fs.capacity.bytes`*::
+
--
type: long

format: bytes

Filesystem total capacity in bytes


--


*`kubernetes.node.fs.available.bytes`*::
+
--
type: long

format: bytes

Filesystem total available in bytes


--


*`kubernetes.node.fs.used.bytes`*::
+
--
type: long

format: bytes

Filesystem total used in bytes


--


*`kubernetes.node.fs.inodes.used`*::
+
--
type: long

Number of used inodes


--

*`kubernetes.node.fs.inodes.count`*::
+
--
type: long

Number of inodes


--

*`kubernetes.node.fs.inodes.free`*::
+
--
type: long

Number of free inodes


--




*`kubernetes.node.runtime.imagefs.capacity.bytes`*::
+
--
type: long

format: bytes

Image filesystem total capacity in bytes


--


*`kubernetes.node.runtime.imagefs.available.bytes`*::
+
--
type: long

format: bytes

Image filesystem total available in bytes


--


*`kubernetes.node.runtime.imagefs.used.bytes`*::
+
--
type: long

format: bytes

Image filesystem total used in bytes


--

[float]
== pod fields

kubernetes pod metrics



*`kubernetes.pod.start_time`*::
+
--
type: date

Start time


--



*`kubernetes.pod.network.rx.bytes`*::
+
--
type: long

format: bytes

Received bytes


--

*`kubernetes.pod.network.rx.errors`*::
+
--
type: long

Rx errors


--


*`kubernetes.pod.network.tx.bytes`*::
+
--
type: long

format: bytes

Transmitted bytes


--

*`kubernetes.pod.network.tx.errors`*::
+
--
type: long

Tx errors


--

[float]
== cpu fields

CPU usage metrics




*`kubernetes.pod.cpu.usage.nanocores`*::
+
--
type: long

CPU used nanocores


--

*`kubernetes.pod.cpu.usage.node.pct`*::
+
--
type: scaled_float

format: percentage

CPU usage as a percentage of the total node CPU


--

*`kubernetes.pod.cpu.usage.limit.pct`*::
+
--
type: scaled_float

format: percentage

CPU usage as a percentage of the defined limit for the pod containers (or total node CPU if unlimited)


--



*`kubernetes.pod.memory.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage


--

*`kubernetes.pod.memory.usage.node.pct`*::
+
--
type: scaled_float

format: percentage

Memory usage as a percentage of the total node allocatable memory


--

*`kubernetes.pod.memory.usage.limit.pct`*::
+
--
type: scaled_float

format: percentage

Memory usage as a percentage of the defined limit for the pod containers (or total node allocatable memory if unlimited)


--

[float]
== container fields

kubernetes container metrics



*`kubernetes.container.id`*::
+
--
type: keyword

Container id

--


*`kubernetes.container.status.phase`*::
+
--
type: keyword

Container phase (running, waiting, terminated)


--

*`kubernetes.container.status.ready`*::
+
--
type: boolean

Container ready status


--

*`kubernetes.container.status.restarts`*::
+
--
type: integer

Container restarts count


--

*`kubernetes.container.status.reason`*::
+
--
type: keyword

Waiting (ContainerCreating, CrashLoopBackoff, ErrImagePull, ImagePullBackoff) or termination (Completed, ContainerCannotRun, Error, OOMKilled) reason.


--


*`kubernetes.container.cpu.limit.cores`*::
+
--
type: long

Container CPU cores limit


--

*`kubernetes.container.cpu.request.cores`*::
+
--
type: long

Container CPU requested cores


--

*`kubernetes.container.cpu.limit.nanocores`*::
+
--

deprecated[6.4]

type: long

Container CPU nanocores limit


--

*`kubernetes.container.cpu.request.nanocores`*::
+
--

deprecated[6.4]

type: long

Container CPU requested nanocores


--


*`kubernetes.container.memory.limit.bytes`*::
+
--
type: long

format: bytes

Container memory limit in bytes


--

*`kubernetes.container.memory.request.bytes`*::
+
--
type: long

format: bytes

Container requested memory in bytes


--

[float]
== deployment fields

kubernetes deployment metrics



*`kubernetes.deployment.name`*::
+
--
type: keyword

Kubernetes deployment name


--

*`kubernetes.deployment.paused`*::
+
--
type: boolean

Kubernetes deployment paused status


--

[float]
== replicas fields

Kubernetes deployment replicas info



*`kubernetes.deployment.replicas.desired`*::
+
--
type: integer

Deployment number of desired replicas (spec)


--

*`kubernetes.deployment.replicas.available`*::
+
--
type: integer

Deployment available replicas


--

*`kubernetes.deployment.replicas.unavailable`*::
+
--
type: integer

Deployment unavailable replicas


--

*`kubernetes.deployment.replicas.updated`*::
+
--
type: integer

Deployment updated replicas


--

[float]
== node fields

kubernetes node metrics




*`kubernetes.node.status.ready`*::
+
--
type: keyword

Node ready status (true, false or unknown)


--

*`kubernetes.node.status.unschedulable`*::
+
--
type: boolean

Node unschedulable status


--


*`kubernetes.node.cpu.allocatable.cores`*::
+
--
type: float

Node CPU allocatable cores


--

*`kubernetes.node.cpu.capacity.cores`*::
+
--
type: long

Node CPU capacity cores


--


*`kubernetes.node.memory.allocatable.bytes`*::
+
--
type: long

format: bytes

Node allocatable memory in bytes


--

*`kubernetes.node.memory.capacity.bytes`*::
+
--
type: long

format: bytes

Node memory capacity in bytes


--


*`kubernetes.node.pod.allocatable.total`*::
+
--
type: long

Node allocatable pods


--

*`kubernetes.node.pod.capacity.total`*::
+
--
type: long

Node pod capacity


--

[float]
== pod fields

kubernetes pod metrics



*`kubernetes.pod.ip`*::
+
--
type: ip

Kubernetes pod IP


--

*`kubernetes.pod.host_ip`*::
+
--
type: ip

Kubernetes pod host IP


--

[float]
== status fields

Kubernetes pod status metrics



*`kubernetes.pod.status.phase`*::
+
--
type: keyword

Kubernetes pod phase (Running, Pending...)


--

*`kubernetes.pod.status.ready`*::
+
--
type: keyword

Kubernetes pod ready status (true, false or unknown)


--

*`kubernetes.pod.status.scheduled`*::
+
--
type: keyword

Kubernetes pod scheduled status (true, false, unknown)


--

[float]
== replicaset fields

kubernetes replica set metrics



*`kubernetes.replicaset.name`*::
+
--
type: keyword

Kubernetes replica set name


--

[float]
== replicas fields

Kubernetes replica set paused status



*`kubernetes.replicaset.replicas.available`*::
+
--
type: long

The number of replicas per ReplicaSet


--

*`kubernetes.replicaset.replicas.desired`*::
+
--
type: long

The number of replicas per ReplicaSet


--

*`kubernetes.replicaset.replicas.ready`*::
+
--
type: long

The number of ready replicas per ReplicaSet


--

*`kubernetes.replicaset.replicas.observed`*::
+
--
type: long

The generation observed by the ReplicaSet controller


--

*`kubernetes.replicaset.replicas.labeled`*::
+
--
type: long

The number of fully labeled replicas per ReplicaSet


--

[float]
== statefulset fields

kubernetes stateful set metrics



*`kubernetes.statefulset.name`*::
+
--
type: keyword

Kubernetes stateful set name


--

*`kubernetes.statefulset.created`*::
+
--
type: long

The creation timestamp (epoch) for StatefulSet


--

[float]
== replicas fields

Kubernetes stateful set replicas status



*`kubernetes.statefulset.replicas.observed`*::
+
--
type: long

The number of observed replicas per StatefulSet


--

*`kubernetes.statefulset.replicas.desired`*::
+
--
type: long

The number of desired replicas per StatefulSet


--

[float]
== generation fields

Kubernetes stateful set generation information



*`kubernetes.statefulset.generation.observed`*::
+
--
type: long

The observed generation per StatefulSet


--

*`kubernetes.statefulset.generation.desired`*::
+
--
type: long

The desired generation per StatefulSet


--

[float]
== system fields

kubernetes system containers metrics



*`kubernetes.system.container`*::
+
--
type: keyword

Container name


--

*`kubernetes.system.start_time`*::
+
--
type: date

Start time


--

[float]
== cpu fields

CPU usage metrics





*`kubernetes.system.cpu.usage.core.ns`*::
+
--
type: long

CPU Core usage nanoseconds


--

*`kubernetes.system.cpu.usage.nanocores`*::
+
--
type: long

CPU used nanocores


--



*`kubernetes.system.memory.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage


--


*`kubernetes.system.memory.rss.bytes`*::
+
--
type: long

format: bytes

RSS memory usage


--


*`kubernetes.system.memory.workingset.bytes`*::
+
--
type: long

format: bytes

Working set memory usage


--

*`kubernetes.system.memory.pagefaults`*::
+
--
type: long

Number of page faults


--

*`kubernetes.system.memory.majorpagefaults`*::
+
--
type: long

Number of major page faults


--

[float]
== volume fields

kubernetes volume metrics



*`kubernetes.volume.name`*::
+
--
type: keyword

Volume name


--



*`kubernetes.volume.fs.capacity.bytes`*::
+
--
type: long

format: bytes

Filesystem total capacity in bytes


--


*`kubernetes.volume.fs.available.bytes`*::
+
--
type: long

format: bytes

Filesystem total available in bytes


--


*`kubernetes.volume.fs.used.bytes`*::
+
--
type: long

format: bytes

Filesystem total used in bytes


--


*`kubernetes.volume.fs.inodes.used`*::
+
--
type: long

Used inodes


--

*`kubernetes.volume.fs.inodes.free`*::
+
--
type: long

Free inodes


--

*`kubernetes.volume.fs.inodes.count`*::
+
--
type: long

Total inodes


--

[[exported-fields-kvm]]
== kvm fields

experimental[]
kvm module



[float]
== kvm fields




[float]
== dommemstat fields

dommemstat



[float]
== stat fields

Memory stat



*`kvm.dommemstat.stat.name`*::
+
--
type: keyword

Memory stat name


--

*`kvm.dommemstat.stat.value`*::
+
--
type: long

Memory stat value


--

*`kvm.dommemstat.id`*::
+
--
type: long

Domain id


--

*`kvm.dommemstat.name`*::
+
--
type: keyword

Domain name


--

[[exported-fields-logstash]]
== Logstash fields

Logstash module



[float]
== logstash fields




[float]
== node fields

node



*`logstash.node.host`*::
+
--
type: keyword

Host name


--

*`logstash.node.version`*::
+
--
type: keyword

Logstash Version


--

[float]
== jvm fields

JVM Info



*`logstash.node.jvm.version`*::
+
--
type: keyword

Version


--

*`logstash.node.jvm.pid`*::
+
--
type: long

Pid


--

[float]
== node.stats fields

node_stats metrics.



[float]
== events fields

Events stats



*`logstash.node.stats.events.in`*::
+
--
type: long

Incoming events counter.


--

*`logstash.node.stats.events.out`*::
+
--
type: long

Outgoing events counter.


--

*`logstash.node.stats.events.filtered`*::
+
--
type: long

Filtered events counter.


--

[[exported-fields-memcached]]
== Memcached fields

Memcached module



[float]
== memcached fields




[float]
== stats fields

stats



*`memcached.stats.pid`*::
+
--
type: long

Current process ID of the Memcached task.


--

*`memcached.stats.uptime.sec`*::
+
--
type: long

Memcached server uptime.


--

*`memcached.stats.threads`*::
+
--
type: long

Number of threads used by the current Memcached server process.


--

*`memcached.stats.connections.current`*::
+
--
type: long

Number of open connections to this Memcached server, should be the same value on all servers during normal operation.


--

*`memcached.stats.connections.total`*::
+
--
type: long

Numer of successful connect attempts to this server since it has been started.


--

*`memcached.stats.get.hits`*::
+
--
type: long

Number of successful "get" commands (cache hits) since startup, divide them by the "cmd_get" value to get the cache hitrate.


--

*`memcached.stats.get.misses`*::
+
--
type: long

Number of failed "get" requests because nothing was cached for this key or the cached value was too old.


--

*`memcached.stats.cmd.get`*::
+
--
type: long

Number of "get" commands received since server startup not counting if they were successful or not.


--

*`memcached.stats.cmd.set`*::
+
--
type: long

Number of "set" commands serviced since startup.


--

*`memcached.stats.read.bytes`*::
+
--
type: long

Total number of bytes received from the network by this server.


--

*`memcached.stats.written.bytes`*::
+
--
type: long

Total number of bytes send to the network by this server.


--

*`memcached.stats.items.current`*::
+
--
type: long

Number of items currently in this server's cache.


--

*`memcached.stats.items.total`*::
+
--
type: long

Number of items stored ever stored on this server. This is no "maximum item count" value but a counted increased by every new item stored in the cache.


--

*`memcached.stats.evictions`*::
+
--
type: long

Number of objects removed from the cache to free up memory for new items because Memcached reached it's maximum memory setting (limit_maxbytes).


--

*`memcached.stats.bytes.current`*::
+
--
type: long

Number of bytes currently used for caching items.


--

*`memcached.stats.bytes.limit`*::
+
--
type: long

Number of bytes this server is allowed to use for storage.


--

[[exported-fields-mongodb]]
== MongoDB fields

Metrics collected from MongoDB servers.



[float]
== mongodb fields

MongoDB metrics.



[float]
== collstats fields

MongoDB collection statistics metrics.



*`mongodb.collstats.db`*::
+
--
type: keyword

Database name.


--

*`mongodb.collstats.collection`*::
+
--
type: keyword

Collection name.


--

*`mongodb.collstats.name`*::
+
--
type: keyword

Combination of database and collection name.


--

*`mongodb.collstats.total.time.us`*::
+
--
type: long

Total waiting time for locks in microseconds.


--

*`mongodb.collstats.total.count`*::
+
--
type: long

Total number of lock wait events.


--


*`mongodb.collstats.lock.read.time.us`*::
+
--
type: long

Time waiting for read locks in microseconds.


--

*`mongodb.collstats.lock.read.count`*::
+
--
type: long

Number of read lock wait events.


--

*`mongodb.collstats.lock.write.time.us`*::
+
--
type: long

Time waiting for write locks in microseconds.


--

*`mongodb.collstats.lock.write.count`*::
+
--
type: long

Number of write lock wait events.


--

*`mongodb.collstats.queries.time.us`*::
+
--
type: long

Time running queries in microseconds.


--

*`mongodb.collstats.queries.count`*::
+
--
type: long

Number of queries executed.


--

*`mongodb.collstats.getmore.time.us`*::
+
--
type: long

Time asking for more cursor rows in microseconds.


--

*`mongodb.collstats.getmore.count`*::
+
--
type: long

Number of times a cursor asked for more data.


--

*`mongodb.collstats.insert.time.us`*::
+
--
type: long

Time inserting new documents in microseconds.


--

*`mongodb.collstats.insert.count`*::
+
--
type: long

Number of document insert events.


--

*`mongodb.collstats.update.time.us`*::
+
--
type: long

Time updating documents in microseconds.


--

*`mongodb.collstats.update.count`*::
+
--
type: long

Number of document update events.


--

*`mongodb.collstats.remove.time.us`*::
+
--
type: long

Time deleting documents in microseconds.


--

*`mongodb.collstats.remove.count`*::
+
--
type: long

Number of document delete events.


--

*`mongodb.collstats.commands.time.us`*::
+
--
type: long

Time executing database commands in microseconds.


--

*`mongodb.collstats.commands.count`*::
+
--
type: long

Number of database commands executed.


--

[float]
== dbstats fields

dbstats provides an overview of a particular mongo database. This document is most concerned with data volumes of a database.



*`mongodb.dbstats.avg_obj_size.bytes`*::
+
--
type: long

format: bytes

--

*`mongodb.dbstats.collections`*::
+
--
type: integer

--

*`mongodb.dbstats.data_size.bytes`*::
+
--
type: long

format: bytes

--

*`mongodb.dbstats.db`*::
+
--
type: keyword

--

*`mongodb.dbstats.file_size.bytes`*::
+
--
type: long

format: bytes

--

*`mongodb.dbstats.index_size.bytes`*::
+
--
type: long

format: bytes

--

*`mongodb.dbstats.indexes`*::
+
--
type: long

--

*`mongodb.dbstats.num_extents`*::
+
--
type: long

--

*`mongodb.dbstats.objects`*::
+
--
type: long

--

*`mongodb.dbstats.storage_size.bytes`*::
+
--
type: long

format: bytes

--

*`mongodb.dbstats.ns_size_mb.mb`*::
+
--
type: long

--


*`mongodb.dbstats.data_file_version.major`*::
+
--
type: long

--

*`mongodb.dbstats.data_file_version.minor`*::
+
--
type: long

--


*`mongodb.dbstats.extent_free_list.num`*::
+
--
type: long

--

*`mongodb.dbstats.extent_free_list.size.bytes`*::
+
--
type: long

format: bytes

--

[float]
== metrics fields

Statistics that reflect the current use and state of a running `mongod` instance for more information, take a look at https://docs.mongodb.com/manual/reference/command/serverStatus/#serverstatus.metrics



[float]
== commands fields

Reports on the use of database commands. The fields in metrics.commands are the names of database commands and each value is a document that reports the total number of commands executed as well as the number of failed executions.
metrics.commands.<command>.failed shows the number of times <command> failed on this mongod. metrics.commands.<command>.total shows the number of times <command> executed on this mongod.




*`mongodb.metrics.commands.is_self.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.is_self.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.aggregate.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.aggregate.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.build_info.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.build_info.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.coll_stats.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.coll_stats.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.connection_pool_stats.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.connection_pool_stats.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.count.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.count.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.db_stats.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.db_stats.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.distinct.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.distinct.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.find.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.find.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.get_cmd_line_opts.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.get_cmd_line_opts.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.get_last_error.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.get_last_error.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.get_log.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.get_log.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.get_more.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.get_more.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.get_parameter.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.get_parameter.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.host_info.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.host_info.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.insert.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.insert.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.is_master.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.is_master.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.last_collections.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.last_collections.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.last_commands.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.last_commands.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.list_databased.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.list_databased.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.list_indexes.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.list_indexes.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.ping.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.ping.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.profile.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.profile.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.replset_get_rbid.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.replset_get_rbid.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.replset_get_status.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.replset_get_status.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.replset_heartbeat.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.replset_heartbeat.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.replset_update_position.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.replset_update_position.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.server_status.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.server_status.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.update.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.update.total`*::
+
--
type: long

--


*`mongodb.metrics.commands.whatsmyuri.failed`*::
+
--
type: long

--

*`mongodb.metrics.commands.whatsmyuri.total`*::
+
--
type: long

--

[float]
== cursor fields

Contains data regarding cursor state and use.



*`mongodb.metrics.cursor.timed_out`*::
+
--
type: long

The total number of cursors that have timed out since the server process started.


--

[float]
== open fields

Contains data regarding open cursors.



*`mongodb.metrics.cursor.open.no_timeout`*::
+
--
type: long

The number of open cursors with the option DBQuery.Option.noTimeout set to prevent timeout.


--

*`mongodb.metrics.cursor.open.pinned`*::
+
--
type: long

The number of `pinned` open cursors.


--

*`mongodb.metrics.cursor.open.total`*::
+
--
type: long

The number of cursors that MongoDB is maintaining for clients.


--

[float]
== document fields

Reflects document access and modification patterns.



*`mongodb.metrics.document.deleted`*::
+
--
type: long

The total number of documents deleted.


--

*`mongodb.metrics.document.inserted`*::
+
--
type: long

The total number of documents inserted.


--

*`mongodb.metrics.document.returned`*::
+
--
type: long

The total number of documents returned by queries.


--

*`mongodb.metrics.document.updated`*::
+
--
type: long

The total number of documents updated.


--

[float]
== get_last_error fields

Returns the error status of the preceding write operation on the current connection.



*`mongodb.metrics.get_last_error.write_wait.ms`*::
+
--
type: long

The total amount of time in milliseconds that the mongod has spent performing getLastError operations with write concern (i.e. w) greater than 1.


--

*`mongodb.metrics.get_last_error.write_wait.count`*::
+
--
type: long

The total number of getLastError operations with a specified write concern (i.e. w) greater than 1.


--

*`mongodb.metrics.get_last_error.write_timeouts`*::
+
--
type: long

The number of times that write concern operations have timed out as a result of the wtimeout threshold to getLastError.


--

[float]
== operation fields

Holds counters for several types of update and query operations that MongoDB handles using special operation types.



*`mongodb.metrics.operation.scan_and_order`*::
+
--
type: long

The total number of queries that return sorted numbers that cannot perform the sort operation using an index.


--

*`mongodb.metrics.operation.write_conflicts`*::
+
--
type: long

The total number of queries that encountered write conflicts.


--

[float]
== query_executor fields

Reports data from the query execution system.



*`mongodb.metrics.query_executor.scanned_indexes`*::
+
--
type: long

The total number of index items scanned during queries and query-plan evaluation.


--

*`mongodb.metrics.query_executor.scanned_documents`*::
+
--
type: long

The total number of documents scanned during queries and query-plan evaluation.


--

[float]
== replication fields

Reports metrics related to the replication process. metrics.replication appears on all mongod instances, even those that aren't members of replica sets.



[float]
== executor fields

Reports on various statistics for the replication executor.




*`mongodb.metrics.replication.executor.counters.event_created`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.event_wait`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.cancels`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.waits`*::
+
--
type: long

--


*`mongodb.metrics.replication.executor.counters.scheduled.netcmd`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.scheduled.dbwork`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.scheduled.exclusive`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.scheduled.work_at`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.scheduled.work`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.counters.scheduled.failures`*::
+
--
type: long

--



*`mongodb.metrics.replication.executor.queues.in_progress.network`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.queues.in_progress.dbwork`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.queues.in_progress.exclusive`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.queues.sleepers`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.queues.ready`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.queues.free`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.unsignaled_events`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.event_waiters`*::
+
--
type: long

--

*`mongodb.metrics.replication.executor.shutting_down`*::
+
--
type: boolean

--

*`mongodb.metrics.replication.executor.network_interface`*::
+
--
type: text

--

[float]
== apply fields

Reports on the application of operations from the replication oplog.



*`mongodb.metrics.replication.apply.attempts_to_become_secondary`*::
+
--
type: long

--

[float]
== batches fields

Reports on the oplog application process on secondaries members of replica sets.



*`mongodb.metrics.replication.apply.batches.count`*::
+
--
type: long

The total number of batches applied across all databases.


--

*`mongodb.metrics.replication.apply.batches.time.ms`*::
+
--
type: long

The total amount of time in milliseconds the mongod has spent applying operations from the oplog.


--

*`mongodb.metrics.replication.apply.ops`*::
+
--
type: long

The total number of oplog operations applied.


--

[float]
== buffer fields

MongoDB buffers oplog operations from the replication sync source buffer before applying oplog entries in a batch. metrics.replication.buffer provides a way to track the oplog buffer.



*`mongodb.metrics.replication.buffer.count`*::
+
--
type: long

The current number of operations in the oplog buffer.


--

*`mongodb.metrics.replication.buffer.max_size.bytes`*::
+
--
type: long

The maximum size of the buffer. This value is a constant setting in the mongod, and is not configurable.


--

*`mongodb.metrics.replication.buffer.size.bytes`*::
+
--
type: long

The current size of the contents of the oplog buffer.


--

[float]
== initial_sync fields

Report initial sync status



*`mongodb.metrics.replication.initial_sync.completed`*::
+
--
type: long

--

*`mongodb.metrics.replication.initial_sync.failed_attempts`*::
+
--
type: long

--

*`mongodb.metrics.replication.initial_sync.failures`*::
+
--
type: long

--

[float]
== network fields

Reports network use by the replication process.



*`mongodb.metrics.replication.network.bytes`*::
+
--
type: long

The total amount of data read from the replication sync source.


--

[float]
== getmores fields

Reports on the getmore operations, which are requests for additional results from the oplog cursor as part of the oplog replication process.



*`mongodb.metrics.replication.network.getmores.count`*::
+
--
type: long

The total number of getmore operations


--

*`mongodb.metrics.replication.network.getmores.time.ms`*::
+
--
type: long

The total amount of time required to collect data from getmore operations.


--

*`mongodb.metrics.replication.network.ops`*::
+
--
type: long

The total number of operations read from the replication source.


--

*`mongodb.metrics.replication.network.reders_created`*::
+
--
type: long

The total number of oplog query processes created.


--

[float]
== preload fields

Reports on the `pre-fetch` stage, where MongoDB loads documents and indexes into RAM to improve replication throughput.



[float]
== docs fields

Reports on the documents loaded into memory during the pre-fetch stage.



*`mongodb.metrics.replication.preload.docs.count`*::
+
--
type: long

The total number of documents loaded during the pre-fetch stage of replication.


--

*`mongodb.metrics.replication.preload.docs.time.ms`*::
+
--
type: long

--

[float]
== indexes fields

Reports on the index items loaded into memory during the pre-fetch stage of replication.



*`mongodb.metrics.replication.preload.indexes.count`*::
+
--
type: long

The total number of index entries loaded by members before updating documents as part of the pre-fetch stage of replication.


--

*`mongodb.metrics.replication.preload.indexes.time.ms`*::
+
--
type: long

The total amount of time, in milliseconds, spent loading index entries as part of the pre-fetch stage of replication.


--


*`mongodb.metrics.storage.free_list.search.bucket_exhausted`*::
+
--
type: long

The number of times that mongod has checked the free list without finding a suitably large record allocation.


--

*`mongodb.metrics.storage.free_list.search.requests`*::
+
--
type: long

The number of times mongod has searched for available record allocations.


--

*`mongodb.metrics.storage.free_list.search.scanned`*::
+
--
type: long

The number of available record allocations mongod has searched.


--

[float]
== ttl fields

Reports on the operation of the resource use of the ttl index process.



*`mongodb.metrics.ttl.deleted_documents`*::
+
--
type: long

The total number of documents deleted from collections with a ttl index.


--

*`mongodb.metrics.ttl.passes`*::
+
--
type: long

The number of times the background process removes documents from collections with a ttl index.


--

[float]
== replstatus fields

replstatus provides an overview of replica set status.



[float]
== oplog fields

oplog provides an overview of replication oplog status, which is retrieved from db.getReplicationInfo().



*`mongodb.replstatus.oplog.size.allocated`*::
+
--
type: long

format: bytes

The total amount of space used by the replstatus in bytes.


--

*`mongodb.replstatus.oplog.size.used`*::
+
--
type: long

format: bytes

total amount of space allocated to the replstatus in bytes.


--

*`mongodb.replstatus.oplog.first.timestamp`*::
+
--
type: long

Timestamp of the first (i.e. earliest) operation in the replstatus


--

*`mongodb.replstatus.oplog.last.timestamp`*::
+
--
type: long

Timestamp of the last (i.e. latest) operation in the replstatus


--

*`mongodb.replstatus.oplog.window`*::
+
--
type: long

The difference between the first and last operation in the replstatus.


--

*`mongodb.replstatus.set_name`*::
+
--
type: keyword

The name of the replica set.


--

*`mongodb.replstatus.server_date`*::
+
--
type: date

Reflects the current time according to the server that processed the replSetGetStatus command.


--


*`mongodb.replstatus.optimes.last_committed`*::
+
--
type: long

Information, from the viewpoint of this member, regarding the most recent operation that has been written to a majority of replica set members.


--

*`mongodb.replstatus.optimes.applied`*::
+
--
type: long

Information, from the viewpoint of this member, regarding the most recent operation that has been applied to this member of the replica set.


--

*`mongodb.replstatus.optimes.durable`*::
+
--
type: long

Information, from the viewpoint of this member, regarding the most recent operation that has been written to the journal of this member of the replica set.


--

[float]
== lag fields

Delay between a write operation on the primary and its copy to a secondary



*`mongodb.replstatus.lag.max`*::
+
--
type: long

format: duration

Difference between optime of primary and slowest secondary


--

*`mongodb.replstatus.lag.min`*::
+
--
type: long

format: duration

Difference between optime of primary and fastest secondary


--

[float]
== headroom fields

Difference between the primary's oplog window and the replication lag of the secondary



*`mongodb.replstatus.headroom.max`*::
+
--
type: long

format: duration

Difference between primary's oplog window and the replication lag of the fastest secondary


--

*`mongodb.replstatus.headroom.min`*::
+
--
type: long

format: duration

Difference between primary's oplog window and the replication lag of the slowest secondary


--

[float]
== members fields

Provides information about members of replica set grouped by their state



*`mongodb.replstatus.members.primary.host`*::
+
--
type: keyword

Host address of the primary


--

*`mongodb.replstatus.members.primary.optime`*::
+
--
type: keyword

Optime of primary


--

*`mongodb.replstatus.members.secondary.hosts`*::
+
--
type: array

List of secondary hosts


--

*`mongodb.replstatus.members.secondary.optimes`*::
+
--
type: keyword

Optimes of secondaries


--

*`mongodb.replstatus.members.secondary.count`*::
+
--
type: long

--

*`mongodb.replstatus.members.recovering.hosts`*::
+
--
type: array

List of recovering members hosts


--

*`mongodb.replstatus.members.recovering.count`*::
+
--
type: long

Count of members in the `recovering` state


--

*`mongodb.replstatus.members.unknown.hosts`*::
+
--
type: array

List of members' hosts in the `unknown` state


--

*`mongodb.replstatus.members.unknown.count`*::
+
--
type: long

Count of members with `unknown` state


--

*`mongodb.replstatus.members.startup2.hosts`*::
+
--
type: array

List of initializing members hosts


--

*`mongodb.replstatus.members.startup2.count`*::
+
--
type: long

Count of members in the `startup2` state


--

*`mongodb.replstatus.members.arbiter.hosts`*::
+
--
type: array

List of arbiters hosts


--

*`mongodb.replstatus.members.arbiter.count`*::
+
--
type: long

Count of arbiters


--

*`mongodb.replstatus.members.down.hosts`*::
+
--
type: array

List of `down` members hosts


--

*`mongodb.replstatus.members.down.count`*::
+
--
type: long

Count of `down` members


--

*`mongodb.replstatus.members.rollback.hosts`*::
+
--
type: array

List of members in the `rollback` state


--

*`mongodb.replstatus.members.rollback.count`*::
+
--
type: long

Count of members in the `rollback` state


--

*`mongodb.replstatus.members.unhealthy.hosts`*::
+
--
type: array

List of members' hosts with healthy = false


--

*`mongodb.replstatus.members.unhealthy.count`*::
+
--
type: long

Count of unhealthy members


--

[float]
== status fields

MongoDB server status metrics.



*`mongodb.status.version`*::
+
--
type: keyword

Instance version.


--

*`mongodb.status.process`*::
+
--
type: keyword

The current MongoDB process. Possible values are mongos or mongod.


--

*`mongodb.status.uptime.ms`*::
+
--
type: long

Instance uptime in milliseconds.


--

*`mongodb.status.local_time`*::
+
--
type: date

Local time as reported by the MongoDB instance.


--

*`mongodb.status.asserts.regular`*::
+
--
type: long

Number of regular assertions produced by the server.


--

*`mongodb.status.asserts.warning`*::
+
--
type: long

Number of warning assertions produced by the server.


--

*`mongodb.status.asserts.msg`*::
+
--
type: long

Number of msg assertions produced by the server.


--

*`mongodb.status.asserts.user`*::
+
--
type: long

Number of user assertions produced by the server.


--

*`mongodb.status.asserts.rollovers`*::
+
--
type: long

Number of rollovers assertions produced by the server.


--

[float]
== connections fields

Data regarding the current status of incoming connections and availability of the database server.



*`mongodb.status.connections.current`*::
+
--
type: long

The number of connections to the database server from clients. This number includes the current shell session. Consider the value of `available` to add more context to this datum.


--

*`mongodb.status.connections.available`*::
+
--
type: long

The number of unused available incoming connections the database can provide.


--

*`mongodb.status.connections.total_created`*::
+
--
type: long

A count of all incoming connections created to the server. This number includes connections that have since closed.


--

[float]
== extra_info fields

Platform specific data.



*`mongodb.status.extra_info.heap_usage.bytes`*::
+
--
type: long

format: bytes

The total size in bytes of heap space used by the database process. Only available on Unix/Linux.


--

*`mongodb.status.extra_info.page_faults`*::
+
--
type: long

The total number of page faults that require disk operations. Page faults refer to operations that require the database server to access data that isn't available in active memory.


--

[float]
== global_lock fields

Reports on lock state of the database.



*`mongodb.status.global_lock.total_time.us`*::
+
--
type: long

The time, in microseconds, since the database last started and created the globalLock. This is roughly equivalent to total server uptime.


--

[float]
== current_queue fields

The number of operations queued because of a lock.



*`mongodb.status.global_lock.current_queue.total`*::
+
--
type: long

The total number of operations queued waiting for the lock (i.e., the sum of current_queue.readers and current_queue.writers).


--

*`mongodb.status.global_lock.current_queue.readers`*::
+
--
type: long

The number of operations that are currently queued and waiting for the read lock.


--

*`mongodb.status.global_lock.current_queue.writers`*::
+
--
type: long

The number of operations that are currently queued and waiting for the write lock.


--

[float]
== active_clients fields

The number of connected clients and the read and write operations performed by these clients.



*`mongodb.status.global_lock.active_clients.total`*::
+
--
type: long

Total number of the active client connections performing read or write operations.


--

*`mongodb.status.global_lock.active_clients.readers`*::
+
--
type: long

The number of the active client connections performing read operations.


--

*`mongodb.status.global_lock.active_clients.writers`*::
+
--
type: long

The number of the active client connections performing write operations.


--

[float]
== locks fields

A document that reports for each lock <type>, data on lock <mode>s. The possible lock <type>s are global, database, collection, metadata and oplog. The possible <mode>s are r, w, R and W which respresent shared, exclusive, intent shared and intent exclusive.
locks.<type>.acquire.count.<mode> shows the number of times the lock was acquired in the specified mode. locks.<type>.wait.count.<mode> shows the number of times the locks.acquireCount lock acquisitions encountered waits because the locks were held in a conflicting mode. locks.<type>.wait.us.<mode> shows the cumulative wait time in microseconds for the lock acquisitions. locks.<type>.deadlock.count.<mode> shows the number of times the lock acquisitions encountered deadlocks.




*`mongodb.status.locks.global.acquire.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.global.acquire.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.global.acquire.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.global.acquire.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.us.r`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.us.w`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.us.R`*::
+
--
type: long

--

*`mongodb.status.locks.global.wait.us.W`*::
+
--
type: long

--

*`mongodb.status.locks.global.deadlock.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.global.deadlock.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.global.deadlock.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.global.deadlock.count.W`*::
+
--
type: long

--


*`mongodb.status.locks.database.acquire.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.database.acquire.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.database.acquire.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.database.acquire.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.us.r`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.us.w`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.us.R`*::
+
--
type: long

--

*`mongodb.status.locks.database.wait.us.W`*::
+
--
type: long

--

*`mongodb.status.locks.database.deadlock.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.database.deadlock.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.database.deadlock.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.database.deadlock.count.W`*::
+
--
type: long

--


*`mongodb.status.locks.collection.acquire.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.collection.acquire.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.collection.acquire.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.collection.acquire.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.us.r`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.us.w`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.us.R`*::
+
--
type: long

--

*`mongodb.status.locks.collection.wait.us.W`*::
+
--
type: long

--

*`mongodb.status.locks.collection.deadlock.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.collection.deadlock.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.collection.deadlock.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.collection.deadlock.count.W`*::
+
--
type: long

--


*`mongodb.status.locks.meta_data.acquire.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.acquire.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.acquire.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.acquire.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.us.r`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.us.w`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.us.R`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.wait.us.W`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.deadlock.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.deadlock.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.deadlock.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.meta_data.deadlock.count.W`*::
+
--
type: long

--


*`mongodb.status.locks.oplog.acquire.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.acquire.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.acquire.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.acquire.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.count.W`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.us.r`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.us.w`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.us.R`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.wait.us.W`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.deadlock.count.r`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.deadlock.count.w`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.deadlock.count.R`*::
+
--
type: long

--

*`mongodb.status.locks.oplog.deadlock.count.W`*::
+
--
type: long

--

[float]
== network fields

Platform specific data.



*`mongodb.status.network.in.bytes`*::
+
--
type: long

format: bytes

The amount of network traffic, in bytes, received by this database.


--

*`mongodb.status.network.out.bytes`*::
+
--
type: long

format: bytes

The amount of network traffic, in bytes, sent from this database.


--

*`mongodb.status.network.requests`*::
+
--
type: long

The total number of requests received by the server.


--

[float]
== ops.latencies fields

Operation latencies for the database as a whole. Only mongod instances report this metric.



*`mongodb.status.ops.latencies.reads.latency`*::
+
--
type: long

Total combined latency in microseconds.


--

*`mongodb.status.ops.latencies.reads.count`*::
+
--
type: long

Total number of read operations performed on the collection since startup.


--

*`mongodb.status.ops.latencies.writes.latency`*::
+
--
type: long

Total combined latency in microseconds.


--

*`mongodb.status.ops.latencies.writes.count`*::
+
--
type: long

Total number of write operations performed on the collection since startup.


--

*`mongodb.status.ops.latencies.commands.latency`*::
+
--
type: long

Total combined latency in microseconds.


--

*`mongodb.status.ops.latencies.commands.count`*::
+
--
type: long

Total number of commands performed on the collection since startup.


--

[float]
== ops.counters fields

An overview of database operations by type.



*`mongodb.status.ops.counters.insert`*::
+
--
type: long

The total number of insert operations received since the mongod instance last started.


--

*`mongodb.status.ops.counters.query`*::
+
--
type: long

The total number of queries received since the mongod instance last started.


--

*`mongodb.status.ops.counters.update`*::
+
--
type: long

The total number of update operations received since the mongod instance last started.


--

*`mongodb.status.ops.counters.delete`*::
+
--
type: long

The total number of delete operations received since the mongod instance last started.


--

*`mongodb.status.ops.counters.getmore`*::
+
--
type: long

The total number of getmore operations received since the mongod instance last started.


--

*`mongodb.status.ops.counters.command`*::
+
--
type: long

The total number of commands issued to the database since the mongod instance last started.


--

[float]
== ops.replicated fields

An overview of database replication operations by type.



*`mongodb.status.ops.replicated.insert`*::
+
--
type: long

The total number of replicated insert operations received since the mongod instance last started.


--

*`mongodb.status.ops.replicated.query`*::
+
--
type: long

The total number of replicated queries received since the mongod instance last started.


--

*`mongodb.status.ops.replicated.update`*::
+
--
type: long

The total number of replicated update operations received since the mongod instance last started.


--

*`mongodb.status.ops.replicated.delete`*::
+
--
type: long

The total number of replicated delete operations received since the mongod instance last started.


--

*`mongodb.status.ops.replicated.getmore`*::
+
--
type: long

The total number of replicated getmore operations received since the mongod instance last started.


--

*`mongodb.status.ops.replicated.command`*::
+
--
type: long

The total number of replicated commands issued to the database since the mongod instance last started.


--

[float]
== memory fields

Data about the current memory usage of the mongod server.



*`mongodb.status.memory.bits`*::
+
--
type: long

Either 64 or 32, depending on which target architecture was specified during the mongod compilation process.


--

*`mongodb.status.memory.resident.mb`*::
+
--
type: long

The amount of RAM, in megabytes (MB), currently used by the database process.


--

*`mongodb.status.memory.virtual.mb`*::
+
--
type: long

The amount, in megabytes (MB), of virtual memory used by the mongod process.


--

*`mongodb.status.memory.mapped.mb`*::
+
--
type: long

The amount of mapped memory, in megabytes (MB), used by the database. Because MongoDB uses memory-mapped files, this value is likely to be to be roughly equivalent to the total size of your database or databases.


--

*`mongodb.status.memory.mapped_with_journal.mb`*::
+
--
type: long

The amount of mapped memory, in megabytes (MB), including the memory used for journaling.


--

*`mongodb.status.write_backs_queued`*::
+
--
type: boolean

True when there are operations from a mongos instance queued for retrying.


--

*`mongodb.status.storage_engine.name`*::
+
--
type: keyword

A string that represents the name of the current storage engine.


--

[float]
== wired_tiger fields

Statistics about the WiredTiger storage engine.



[float]
== concurrent_transactions fields

Statistics about the transactions currently in progress.



*`mongodb.status.wired_tiger.concurrent_transactions.write.out`*::
+
--
type: long

Number of concurrent write transaction in progress.


--

*`mongodb.status.wired_tiger.concurrent_transactions.write.available`*::
+
--
type: long

Number of concurrent write tickets available.


--

*`mongodb.status.wired_tiger.concurrent_transactions.write.total_tickets`*::
+
--
type: long

Number of total write tickets.


--

*`mongodb.status.wired_tiger.concurrent_transactions.read.out`*::
+
--
type: long

Number of concurrent read transaction in progress.


--

*`mongodb.status.wired_tiger.concurrent_transactions.read.available`*::
+
--
type: long

Number of concurrent read tickets available.


--

*`mongodb.status.wired_tiger.concurrent_transactions.read.total_tickets`*::
+
--
type: long

Number of total read tickets.


--

[float]
== cache fields

Statistics about the cache and page evictions from the cache.



*`mongodb.status.wired_tiger.cache.maximum.bytes`*::
+
--
type: long

format: bytes

Maximum cache size.


--

*`mongodb.status.wired_tiger.cache.used.bytes`*::
+
--
type: long

format: bytes

Size in byte of the data currently in cache.


--

*`mongodb.status.wired_tiger.cache.dirty.bytes`*::
+
--
type: long

format: bytes

Size in bytes of the dirty data in the cache.


--

*`mongodb.status.wired_tiger.cache.pages.read`*::
+
--
type: long

Number of pages read into the cache.


--

*`mongodb.status.wired_tiger.cache.pages.write`*::
+
--
type: long

Number of pages written from the cache.


--

*`mongodb.status.wired_tiger.cache.pages.evicted`*::
+
--
type: long

Number of pages evicted from the cache.


--

[float]
== log fields

Statistics about the write ahead log used by WiredTiger.



*`mongodb.status.wired_tiger.log.size.bytes`*::
+
--
type: long

format: bytes

Total log size in bytes.


--

*`mongodb.status.wired_tiger.log.write.bytes`*::
+
--
type: long

format: bytes

Number of bytes written into the log.


--

*`mongodb.status.wired_tiger.log.max_file_size.bytes`*::
+
--
type: long

format: bytes

Maximum file size.


--

*`mongodb.status.wired_tiger.log.flushes`*::
+
--
type: long

Number of flush operations.


--

*`mongodb.status.wired_tiger.log.writes`*::
+
--
type: long

Number of write operations.


--

*`mongodb.status.wired_tiger.log.scans`*::
+
--
type: long

Number of scan operations.


--

*`mongodb.status.wired_tiger.log.syncs`*::
+
--
type: long

Number of sync operations.


--

[float]
== background_flushing fields

Data about the process MongoDB uses to write data to disk. This data is only available for instances that use the MMAPv1 storage engine.



*`mongodb.status.background_flushing.flushes`*::
+
--
type: long

A counter that collects the number of times the database has flushed all writes to disk.


--

*`mongodb.status.background_flushing.total.ms`*::
+
--
type: long

The total number of milliseconds (ms) that the mongod processes have spent writing (i.e. flushing) data to disk. Because this is an absolute value, consider the value of `flushes` and `average_ms` to provide better context for this datum.


--

*`mongodb.status.background_flushing.average.ms`*::
+
--
type: long

The average time spent flushing to disk per flush event.


--

*`mongodb.status.background_flushing.last.ms`*::
+
--
type: long

The amount of time, in milliseconds, that the last flush operation took to complete.


--

*`mongodb.status.background_flushing.last_finished`*::
+
--
type: date

A timestamp of the last completed flush operation.


--

[float]
== journaling fields

Data about the journaling-related operations and performance. Journaling information only appears for mongod instances that use the MMAPv1 storage engine and have journaling enabled.



*`mongodb.status.journaling.commits`*::
+
--
type: long

The number of transactions written to the journal during the last journal group commit interval.


--

*`mongodb.status.journaling.journaled.mb`*::
+
--
type: long

The amount of data in megabytes (MB) written to journal during the last journal group commit interval.


--

*`mongodb.status.journaling.write_to_data_files.mb`*::
+
--
type: long

The amount of data in megabytes (MB) written from journal to the data files during the last journal group commit interval.


--

*`mongodb.status.journaling.compression`*::
+
--
type: long

The compression ratio of the data written to the journal.


--

*`mongodb.status.journaling.commits_in_write_lock`*::
+
--
type: long

Count of the commits that occurred while a write lock was held. Commits in a write lock indicate a MongoDB node under a heavy write load and call for further diagnosis.


--

*`mongodb.status.journaling.early_commits`*::
+
--
type: long

The number of times MongoDB requested a commit before the scheduled journal group commit interval.


--

[float]
== times fields

Information about the performance of the mongod instance during the various phases of journaling in the last journal group commit interval.



*`mongodb.status.journaling.times.dt.ms`*::
+
--
type: long

The amount of time over which MongoDB collected the times data. Use this field to provide context to the other times field values.


--

*`mongodb.status.journaling.times.prep_log_buffer.ms`*::
+
--
type: long

The amount of time spent preparing to write to the journal. Smaller values indicate better journal performance.


--

*`mongodb.status.journaling.times.write_to_journal.ms`*::
+
--
type: long

The amount of time spent actually writing to the journal. File system speeds and device interfaces can affect performance.


--

*`mongodb.status.journaling.times.write_to_data_files.ms`*::
+
--
type: long

The amount of time spent writing to data files after journaling. File system speeds and device interfaces can affect performance.


--

*`mongodb.status.journaling.times.remap_private_view.ms`*::
+
--
type: long

The amount of time spent remapping copy-on-write memory mapped views. Smaller values indicate better journal performance.


--

*`mongodb.status.journaling.times.commits.ms`*::
+
--
type: long

The amount of time spent for commits.


--

*`mongodb.status.journaling.times.commits_in_write_lock.ms`*::
+
--
type: long

The amount of time spent for commits that occurred while a write lock was held.


--

[[exported-fields-munin]]
== Munin fields

Munin node metrics exporter



[float]
== munin fields

munin contains metrics exposed by a munin node agent



[[exported-fields-mysql]]
== MySQL fields

MySQL server status metrics collected from MySQL.



[float]
== mysql fields

`mysql` contains the metrics that were obtained from MySQL query.



[float]
== galera_status fields

`galera_status` contains the metrics that were obtained by the status SQL query on Galera.



[float]
== apply fields

Apply status fields.



*`mysql.galera_status.apply.oooe`*::
+
--
type: double

How often applier started write-set applying out-of-order (parallelization efficiency).


--

*`mysql.galera_status.apply.oool`*::
+
--
type: double

How often write-set was so slow to apply that write-set with higher seqno's were applied earlier. Values closer to 0 refer to a greater gap between slow and fast write-sets.


--

*`mysql.galera_status.apply.window`*::
+
--
type: double

Average distance between highest and lowest concurrently applied seqno.


--

[float]
== cert fields

Certification status fields.



*`mysql.galera_status.cert.deps_distance`*::
+
--
type: double

Average distance between highest and lowest seqno value that can be possibly applied in parallel (potential degree of parallelization).


--

*`mysql.galera_status.cert.index_size`*::
+
--
type: long

The number of entries in the certification index.


--

*`mysql.galera_status.cert.interval`*::
+
--
type: double

Average number of transactions received while a transaction replicates.


--

[float]
== cluster fields

Cluster status fields.



*`mysql.galera_status.cluster.conf_id`*::
+
--
type: long

Total number of cluster membership changes happened.


--

*`mysql.galera_status.cluster.size`*::
+
--
type: long

Current number of members in the cluster.


--

*`mysql.galera_status.cluster.status`*::
+
--
type: keyword

Status of this cluster component. That is, whether the node is part of a PRIMARY or NON_PRIMARY component.


--

[float]
== commit fields

Commit status fields.



*`mysql.galera_status.commit.oooe`*::
+
--
type: double

How often a transaction was committed out of order.


--

*`mysql.galera_status.commit.window`*::
+
--
type: long

Average distance between highest and lowest concurrently committed seqno.


--

*`mysql.galera_status.connected`*::
+
--
type: keyword

If the value is OFF, the node has not yet connected to any of the cluster components. This may be due to misconfiguration. Check the error log for proper diagnostics.


--

[float]
== evs fields

Evs Fields.



*`mysql.galera_status.evs.evict`*::
+
--
type: keyword

Lists the UUID's of all nodes evicted from the cluster. Evicted nodes cannot rejoin the cluster until you restart their mysqld processes.


--

*`mysql.galera_status.evs.state`*::
+
--
type: keyword

Shows the internal state of the EVS Protocol.


--

[float]
== flow_ctl fields

Flow Control fields.



*`mysql.galera_status.flow_ctl.paused`*::
+
--
type: double

The fraction of time since the last FLUSH STATUS command that replication was paused due to flow control. In other words, how much the slave lag is slowing down the cluster.


--

*`mysql.galera_status.flow_ctl.paused_ns`*::
+
--
type: long

The total time spent in a paused state measured in nanoseconds.


--

*`mysql.galera_status.flow_ctl.recv`*::
+
--
type: long

Returns the number of FC_PAUSE events the node has received, including those the node has sent. Unlike most status variables, the counter for this one does not reset every time you run the query.


--

*`mysql.galera_status.flow_ctl.sent`*::
+
--
type: long

Returns the number of FC_PAUSE events the node has sent. Unlike most status variables, the counter for this one does not reset every time you run the query.


--

*`mysql.galera_status.last_committed`*::
+
--
type: long

The sequence number, or seqno, of the last committed transaction.


--

[float]
== local fields

Node specific Cluster status fields.



*`mysql.galera_status.local.bf_aborts`*::
+
--
type: long

Total number of local transactions that were aborted by slave transactions while in execution.


--

*`mysql.galera_status.local.cert_failures`*::
+
--
type: long

Total number of local transactions that failed certification test.


--

*`mysql.galera_status.local.commits`*::
+
--
type: long

Total number of local transactions committed.


--

[float]
== recv fields

Node specific recv fields.



*`mysql.galera_status.local.recv.queue`*::
+
--
type: long

Current (instantaneous) length of the recv queue.


--

*`mysql.galera_status.local.recv.queue_avg`*::
+
--
type: double

Recv queue length averaged over interval since the last FLUSH STATUS command. Values considerably larger than 0.0 mean that the node cannot apply write-sets as fast as they are received and will generate a lot of replication throttling.


--

*`mysql.galera_status.local.recv.queue_max`*::
+
--
type: long

The maximum length of the recv queue since the last FLUSH STATUS command.


--

*`mysql.galera_status.local.recv.queue_min`*::
+
--
type: long

The minimum length of the recv queue since the last FLUSH STATUS command.


--

*`mysql.galera_status.local.replays`*::
+
--
type: long

Total number of transaction replays due to asymmetric lock granularity.


--

[float]
== send fields

Node specific sent fields.



*`mysql.galera_status.local.send.queue`*::
+
--
type: long

Current (instantaneous) length of the send queue.


--

*`mysql.galera_status.local.send.queue_avg`*::
+
--
type: double

Send queue length averaged over time since the last FLUSH STATUS command. Values considerably larger than 0.0 indicate replication throttling or network throughput issue.


--

*`mysql.galera_status.local.send.queue_max`*::
+
--
type: long

The maximum length of the send queue since the last FLUSH STATUS command.


--

*`mysql.galera_status.local.send.queue_min`*::
+
--
type: long

The minimum length of the send queue since the last FLUSH STATUS command.


--

*`mysql.galera_status.local.state`*::
+
--
type: keyword

Internal Galera Cluster FSM state number.


--

*`mysql.galera_status.ready`*::
+
--
type: keyword

Whether the server is ready to accept queries.


--

[float]
== received fields

Write-Set receive status fields.



*`mysql.galera_status.received.count`*::
+
--
type: long

Total number of write-sets received from other nodes.


--

*`mysql.galera_status.received.bytes`*::
+
--
type: long

Total size of write-sets received from other nodes.


--

[float]
== repl fields

Replication status fields.



*`mysql.galera_status.repl.data_bytes`*::
+
--
type: long

Total size of data replicated.


--

*`mysql.galera_status.repl.keys`*::
+
--
type: long

Total number of keys replicated.


--

*`mysql.galera_status.repl.keys_bytes`*::
+
--
type: long

Total size of keys replicated.


--

*`mysql.galera_status.repl.other_bytes`*::
+
--
type: long

Total size of other bits replicated.


--

*`mysql.galera_status.repl.count`*::
+
--
type: long

Total number of write-sets replicated (sent to other nodes).


--

*`mysql.galera_status.repl.bytes`*::
+
--
type: long

Total size of write-sets replicated.


--

[float]
== status fields

`status` contains the metrics that were obtained by the status SQL query.



[float]
== aborted fields

Aborted status fields.



*`mysql.status.aborted.clients`*::
+
--
type: long

The number of connections that were aborted because the client died without closing the connection properly.


--

*`mysql.status.aborted.connects`*::
+
--
type: long

The number of failed attempts to connect to the MySQL server.


--

[float]
== binlog fields




*`mysql.status.binlog.cache.disk_use`*::
+
--
type: long



--

*`mysql.status.binlog.cache.use`*::
+
--
type: long



--

[float]
== bytes fields

Bytes stats.



*`mysql.status.bytes.received`*::
+
--
type: long

format: bytes

The number of bytes received from all clients.


--

*`mysql.status.bytes.sent`*::
+
--
type: long

format: bytes

The number of bytes sent to all clients.


--

[float]
== threads fields

Threads stats.



*`mysql.status.threads.cached`*::
+
--
type: long

The number of cached threads.


--

*`mysql.status.threads.created`*::
+
--
type: long

The number of created threads.


--

*`mysql.status.threads.connected`*::
+
--
type: long

The number of connected threads.


--

*`mysql.status.threads.running`*::
+
--
type: long

The number of running threads.


--

*`mysql.status.connections`*::
+
--
type: long



--

[float]
== created fields




*`mysql.status.created.tmp.disk_tables`*::
+
--
type: long



--

*`mysql.status.created.tmp.files`*::
+
--
type: long



--

*`mysql.status.created.tmp.tables`*::
+
--
type: long



--

[float]
== delayed fields




*`mysql.status.delayed.errors`*::
+
--
type: long



--

*`mysql.status.delayed.insert_threads`*::
+
--
type: long



--

*`mysql.status.delayed.writes`*::
+
--
type: long



--

*`mysql.status.flush_commands`*::
+
--
type: long



--

*`mysql.status.max_used_connections`*::
+
--
type: long



--

[float]
== open fields




*`mysql.status.open.files`*::
+
--
type: long



--

*`mysql.status.open.streams`*::
+
--
type: long



--

*`mysql.status.open.tables`*::
+
--
type: long



--

*`mysql.status.opened_tables`*::
+
--
type: long



--

[float]
== command fields




*`mysql.status.command.delete`*::
+
--
type: long

The number of DELETE queries since startup.


--

*`mysql.status.command.insert`*::
+
--
type: long

The number of INSERT queries since startup.


--

*`mysql.status.command.select`*::
+
--
type: long

The number of SELECT queries since startup.


--

*`mysql.status.command.update`*::
+
--
type: long

The number of UPDATE queries since startup.


--

[[exported-fields-nginx]]
== Nginx fields

Nginx server status metrics collected from various modules.



[float]
== nginx fields

`nginx` contains the metrics that were scraped from nginx.



[float]
== stubstatus fields

`stubstatus` contains the metrics that were scraped from the ngx_http_stub_status_module status page.



*`nginx.stubstatus.hostname`*::
+
--
type: keyword

Nginx hostname.


--

*`nginx.stubstatus.active`*::
+
--
type: long

The current number of active client connections including Waiting connections.


--

*`nginx.stubstatus.accepts`*::
+
--
type: long

The total number of accepted client connections.


--

*`nginx.stubstatus.handled`*::
+
--
type: long

The total number of handled client connections.


--

*`nginx.stubstatus.dropped`*::
+
--
type: long

The total number of dropped client connections.


--

*`nginx.stubstatus.requests`*::
+
--
type: long

The total number of client requests.


--

*`nginx.stubstatus.current`*::
+
--
type: long

The current number of client requests.


--

*`nginx.stubstatus.reading`*::
+
--
type: long

The current number of connections where Nginx is reading the request header.


--

*`nginx.stubstatus.writing`*::
+
--
type: long

The current number of connections where Nginx is writing the response back to the client.


--

*`nginx.stubstatus.waiting`*::
+
--
type: long

The current number of idle client connections waiting for a request.


--

[[exported-fields-php_fpm]]
== PHP_FPM fields

beta[]
PHP-FPM server status metrics collected from PHP-FPM.



[float]
== php_fpm fields

`php_fpm` contains the metrics that were obtained from PHP-FPM status page call.



[float]
== pool fields

`pool` contains the metrics that were obtained from the PHP-FPM process pool.



*`php_fpm.pool.name`*::
+
--
type: keyword

The name of the pool.


--

[float]
== pool fields

`pool` contains the metrics that were obtained from the PHP-FPM process pool.



*`php_fpm.pool.process_manager`*::
+
--
type: keyword

Static, dynamic or ondemand.


--

[float]
== connections fields

Connection state specific statistics.



*`php_fpm.pool.connections.accepted`*::
+
--
type: long

The number of incoming requests that the PHP-FPM server has accepted; when a connection is accepted it is removed from the listen queue.


--

*`php_fpm.pool.connections.queued`*::
+
--
type: long

The current number of connections that have been initiated, but not yet accepted. If this value is non-zero it typically means that all the available server processes are currently busy, and there are no processes available to serve the next request. Raising `pm.max_children` (provided the server can handle it) should help keep this number low. This property follows from the fact that PHP-FPM listens via a socket (TCP or file based), and thus inherits some of the characteristics of sockets.


--

*`php_fpm.pool.connections.max_listen_queue`*::
+
--
type: long

The maximum number of requests in the queue of pending connections since FPM has started.


--

*`php_fpm.pool.connections.listen_queue_len`*::
+
--
type: long

The size of the socket queue of pending connections.


--

[float]
== processes fields

Process state specific statistics.



*`php_fpm.pool.processes.idle`*::
+
--
type: long

The number of servers in the `waiting to process` state (i.e. not currently serving a page). This value should fall between the `pm.min_spare_servers` and `pm.max_spare_servers` values when the process manager is `dynamic`.


--

*`php_fpm.pool.processes.active`*::
+
--
type: long

The number of servers current processing a page - the minimum is `1` (so even on a fully idle server, the result will be not read `0`).


--

*`php_fpm.pool.processes.total`*::
+
--
type: long

The number of idle + active processes.


--

*`php_fpm.pool.processes.max_active`*::
+
--
type: long

The maximum number of active processes since FPM has started.


--

*`php_fpm.pool.processes.max_children_reached`*::
+
--
type: long

Number of times, the process limit has been reached, when pm tries to start more children (works only for pm 'dynamic' and 'ondemand').


--

*`php_fpm.pool.slow_requests`*::
+
--
type: long

The number of times a request execution time has exceeded `request_slowlog_timeout`.


--

*`php_fpm.pool.start_since`*::
+
--
type: long

Number of seconds since FPM has started.


--

*`php_fpm.pool.start_time`*::
+
--
type: date

format: epoch_second

The date and time FPM has started.


--

[float]
== process fields

process contains the metrics that were obtained from the PHP-FPM process.



*`php_fpm.process.pid`*::
+
--
type: integer

The PID of the process


--

*`php_fpm.process.state`*::
+
--
type: keyword

The state of the process (Idle, Running, etc)


--

*`php_fpm.process.start_time`*::
+
--
type: date

format: epoch_second

The date and time the process has started


--

*`php_fpm.process.start_since`*::
+
--
type: integer

The number of seconds since the process has started


--

*`php_fpm.process.requests`*::
+
--
type: integer

The number of requests the process has served


--

*`php_fpm.process.request_duration`*::
+
--
type: integer

The duration in microseconds (1 million in a second) of the current request (my own definition)


--

*`php_fpm.process.request_method`*::
+
--
type: keyword

The request method (GET, POST, etc) (of the current request)


--

*`php_fpm.process.request_uri`*::
+
--
type: text

The request URI with the query string (of the current request)


--

*`php_fpm.process.content_length`*::
+
--
type: integer

The content length of the request (only with POST) (of the current request)


--

*`php_fpm.process.user`*::
+
--
type: keyword

The user (PHP_AUTH_USER) (or - if not set) (for the current request)


--

*`php_fpm.process.script`*::
+
--
type: text

The main script called (or - if not set) (for the current request)


--

*`php_fpm.process.last_request_cpu`*::
+
--
type: long

The max amount of memory the last request consumed (it is always 0 if the process is not in Idle state because memory calculation is done when the request processing has terminated)


--

*`php_fpm.process.last_request_memory`*::
+
--
type: integer

The content length of the request (only with POST) (of the current request)


--

[[exported-fields-postgresql]]
== PostgreSQL fields

Metrics collected from PostgreSQL servers.



[float]
== postgresql fields

PostgreSQL metrics.



[float]
== activity fields

One document per server process, showing information related to the current activity of that process, such as state and current query. Collected by querying pg_stat_activity.



*`postgresql.activity.database.oid`*::
+
--
type: long

OID of the database this backend is connected to.


--

*`postgresql.activity.database.name`*::
+
--
type: keyword

Name of the database this backend is connected to.


--

*`postgresql.activity.pid`*::
+
--
type: long

Process ID of this backend.


--

*`postgresql.activity.user.id`*::
+
--
type: long

OID of the user logged into this backend.


--

*`postgresql.activity.user.name`*::
+
--
Name of the user logged into this backend.


--

*`postgresql.activity.application_name`*::
+
--
Name of the application that is connected to this backend.


--

*`postgresql.activity.client.address`*::
+
--
IP address of the client connected to this backend.


--

*`postgresql.activity.client.hostname`*::
+
--
Host name of the connected client, as reported by a reverse DNS lookup of client_addr.


--

*`postgresql.activity.client.port`*::
+
--
type: long

TCP port number that the client is using for communication with this backend, or -1 if a Unix socket is used.


--

*`postgresql.activity.backend_start`*::
+
--
type: date

Time when this process was started, i.e., when the client connected to the server.


--

*`postgresql.activity.transaction_start`*::
+
--
type: date

Time when this process' current transaction was started.


--

*`postgresql.activity.query_start`*::
+
--
type: date

Time when the currently active query was started, or if state is not active, when the last query was started.


--

*`postgresql.activity.state_change`*::
+
--
type: date

Time when the state was last changed.


--

*`postgresql.activity.waiting`*::
+
--
type: boolean

True if this backend is currently waiting on a lock.


--

*`postgresql.activity.state`*::
+
--
Current overall state of this backend. Possible values are:

  * active: The backend is executing a query.
  * idle: The backend is waiting for a new client command.
  * idle in transaction: The backend is in a transaction, but is not
    currently executing a query.
  * idle in transaction (aborted): This state is similar to idle in
    transaction, except one of the statements in the transaction caused
    an error.
  * fastpath function call: The backend is executing a fast-path function.
  * disabled: This state is reported if track_activities is disabled in this backend.


--

*`postgresql.activity.query`*::
+
--
Text of this backend's most recent query. If state is active this field shows the currently executing query. In all other states, it shows the last query that was executed.


--

[float]
== bgwriter fields

Statistics about the background writer process's activity. Collected using the pg_stat_bgwriter query.



*`postgresql.bgwriter.checkpoints.scheduled`*::
+
--
type: long

Number of scheduled checkpoints that have been performed.


--

*`postgresql.bgwriter.checkpoints.requested`*::
+
--
type: long

Number of requested checkpoints that have been performed.


--

*`postgresql.bgwriter.checkpoints.times.write.ms`*::
+
--
type: float

Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds.


--

*`postgresql.bgwriter.checkpoints.times.sync.ms`*::
+
--
type: float

Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds.


--

*`postgresql.bgwriter.buffers.checkpoints`*::
+
--
type: long

Number of buffers written during checkpoints.


--

*`postgresql.bgwriter.buffers.clean`*::
+
--
type: long

Number of buffers written by the background writer.


--

*`postgresql.bgwriter.buffers.clean_full`*::
+
--
type: long

Number of times the background writer stopped a cleaning scan because it had written too many buffers.


--

*`postgresql.bgwriter.buffers.backend`*::
+
--
type: long

Number of buffers written directly by a backend.


--

*`postgresql.bgwriter.buffers.backend_fsync`*::
+
--
type: long

Number of times a backend had to execute its own fsync call (normally the background writer handles those even when the backend does its own write)


--

*`postgresql.bgwriter.buffers.allocated`*::
+
--
type: long

Number of buffers allocated.


--

*`postgresql.bgwriter.stats_reset`*::
+
--
type: date

Time at which these statistics were last reset.


--

[float]
== database fields

One row per database, showing database-wide statistics. Collected by querying pg_stat_database



*`postgresql.database.oid`*::
+
--
type: long

OID of the database this backend is connected to.


--

*`postgresql.database.name`*::
+
--
type: keyword

Name of the database this backend is connected to.


--

*`postgresql.database.number_of_backends`*::
+
--
type: long

Number of backends currently connected to this database.


--

*`postgresql.database.transactions.commit`*::
+
--
type: long

Number of transactions in this database that have been committed.


--

*`postgresql.database.transactions.rollback`*::
+
--
type: long

Number of transactions in this database that have been rolled back.


--

*`postgresql.database.blocks.read`*::
+
--
type: long

Number of disk blocks read in this database.


--

*`postgresql.database.blocks.hit`*::
+
--
type: long

Number of times disk blocks were found already in the buffer cache, so that a read was not necessary (this only includes hits in the PostgreSQL buffer cache, not the operating system's file system cache).


--

*`postgresql.database.blocks.time.read.ms`*::
+
--
type: long

Time spent reading data file blocks by backends in this database, in milliseconds.


--

*`postgresql.database.blocks.time.write.ms`*::
+
--
type: long

Time spent writing data file blocks by backends in this database, in milliseconds.


--

*`postgresql.database.rows.returned`*::
+
--
type: long

Number of rows returned by queries in this database.


--

*`postgresql.database.rows.fetched`*::
+
--
type: long

Number of rows fetched by queries in this database.


--

*`postgresql.database.rows.inserted`*::
+
--
type: long

Number of rows inserted by queries in this database.


--

*`postgresql.database.rows.updated`*::
+
--
type: long

Number of rows updated by queries in this database.


--

*`postgresql.database.rows.deleted`*::
+
--
type: long

Number of rows deleted by queries in this database.


--

*`postgresql.database.conflicts`*::
+
--
type: long

Number of queries canceled due to conflicts with recovery in this database.


--

*`postgresql.database.temporary.files`*::
+
--
type: long

Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (e.g., sorting or hashing), and regardless of the log_temp_files setting.


--

*`postgresql.database.temporary.bytes`*::
+
--
type: long

Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting.


--

*`postgresql.database.deadlocks`*::
+
--
type: long

Number of deadlocks detected in this database.


--

*`postgresql.database.stats_reset`*::
+
--
type: date

Time at which these statistics were last reset.


--

[float]
== statement fields

One document per query per user per database, showing information related invocation of that query, such as cpu usage and total time. Collected by querying pg_stat_statements.



*`postgresql.statement.user.id`*::
+
--
type: long

OID of the user logged into the backend that ran the query.


--

*`postgresql.statement.database.oid`*::
+
--
type: long

OID of the database the query was run on.


--

*`postgresql.statement.query.id`*::
+
--
type: long

ID of the statement.


--

*`postgresql.statement.query.text`*::
+
--
Query text


--

*`postgresql.statement.query.calls`*::
+
--
type: long

Number of times the query has been run.


--

*`postgresql.statement.query.rows`*::
+
--
type: long

Total number of rows returned by query.


--

*`postgresql.statement.time.total`*::
+
--
type: long

Total number of milliseconds spent running query.


--

*`postgresql.statement.time.min`*::
+
--
type: long

Minimum number of milliseconds spent running query.


--

*`postgresql.statement.time.max`*::
+
--
type: long

Maximum number of milliseconds spent running query.


--

*`postgresql.statement.time.mean`*::
+
--
type: long

Mean number of milliseconds spent running query.


--

*`postgresql.statement.time.stddev`*::
+
--
type: long

Population standard deviation of time spent running query, in milliseconds.


--

*`postgresql.statement.memory.shared.hit`*::
+
--
type: long

Total number of shared block cache hits by the query.


--

*`postgresql.statement.memory.shared.read`*::
+
--
type: long

Total number of shared block cache read by the query.


--

*`postgresql.statement.memory.shared.dirtied`*::
+
--
type: long

Total number of shared block cache dirtied by the query.


--

*`postgresql.statement.memory.shared.written`*::
+
--
type: long

Total number of shared block cache written by the query.


--

*`postgresql.statement.memory.local.hit`*::
+
--
type: long

Total number of local block cache hits by the query.


--

*`postgresql.statement.memory.local.read`*::
+
--
type: long

Total number of local block cache read by the query.


--

*`postgresql.statement.memory.local.dirtied`*::
+
--
type: long

Total number of local block cache dirtied by the query.


--

*`postgresql.statement.memory.local.written`*::
+
--
type: long

Total number of local block cache written by the query.


--

*`postgresql.statement.memory.temp.read`*::
+
--
type: long

Total number of temp block cache read by the query.


--

*`postgresql.statement.memory.temp.written`*::
+
--
type: long

Total number of temp block cache written by the query.


--

[[exported-fields-prometheus]]
== Prometheus fields

Stats collected from Prometheus.



[float]
== prometheus fields




[float]
== stats fields

Stats about the Prometheus server.



[float]
== notifications fields

Notification stats.



*`prometheus.stats.notifications.queue_length`*::
+
--
type: long

Current queue length.


--

*`prometheus.stats.notifications.dropped`*::
+
--
type: long

Number of dropped queue events.


--

*`prometheus.stats.processes.open_fds`*::
+
--
type: long

Number of open file descriptors.


--

*`prometheus.stats.storage.chunks_to_persist`*::
+
--
type: long

Number of memory chunks that are not yet persisted to disk.


--

[[exported-fields-rabbitmq]]
== RabbitMQ fields

RabbitMQ module



[float]
== rabbitmq fields




[float]
== connection fields

connection



*`rabbitmq.connection.name`*::
+
--
type: keyword

The name of the connection with non-ASCII characters escaped as in C.


--

*`rabbitmq.connection.vhost`*::
+
--
type: keyword

Virtual host name with non-ASCII characters escaped as in C.


--

*`rabbitmq.connection.user`*::
+
--
type: keyword

User name.


--

*`rabbitmq.connection.node`*::
+
--
type: keyword

Node name.


--

*`rabbitmq.connection.channels`*::
+
--
type: long

The number of channels on the connection.


--

*`rabbitmq.connection.channel_max`*::
+
--
type: long

The maximum number of channels allowed on the connection.


--

*`rabbitmq.connection.frame_max`*::
+
--
type: long

format: bytes

Maximum permissible size of a frame (in bytes) to negotiate with clients.


--

*`rabbitmq.connection.type`*::
+
--
type: keyword

Type of the connection.


--

*`rabbitmq.connection.host`*::
+
--
type: keyword

Server hostname obtained via reverse DNS, or its IP address if reverse DNS failed or was disabled.


--

*`rabbitmq.connection.peer.host`*::
+
--
type: keyword

Peer hostname obtained via reverse DNS, or its IP address if reverse DNS failed or was not enabled.


--

*`rabbitmq.connection.port`*::
+
--
type: long

Server port.


--

*`rabbitmq.connection.peer.port`*::
+
--
type: long

Peer port.


--

*`rabbitmq.connection.packet_count.sent`*::
+
--
type: long

Number of packets sent on the connection.


--

*`rabbitmq.connection.packet_count.received`*::
+
--
type: long

Number of packets received on the connection.


--

*`rabbitmq.connection.packet_count.pending`*::
+
--
type: long

Number of packets pending on the connection.


--

*`rabbitmq.connection.octet_count.sent`*::
+
--
type: long

Number of octets sent on the connection.


--

*`rabbitmq.connection.octet_count.received`*::
+
--
type: long

Number of octets received on the connection.


--

[float]
== exchange fields

exchange



*`rabbitmq.exchange.name`*::
+
--
type: keyword

The name of the queue with non-ASCII characters escaped as in C.


--

*`rabbitmq.exchange.vhost`*::
+
--
type: keyword

Virtual host name with non-ASCII characters escaped as in C.


--

*`rabbitmq.exchange.durable`*::
+
--
type: boolean

Whether or not the queue survives server restarts.


--

*`rabbitmq.exchange.auto_delete`*::
+
--
type: boolean

Whether the queue will be deleted automatically when no longer used.


--

*`rabbitmq.exchange.internal`*::
+
--
type: boolean

Whether the exchange is internal, i.e. cannot be directly published to by a client.


--

*`rabbitmq.exchange.user`*::
+
--
type: keyword

User who created the exchange.


--

*`rabbitmq.exchange.messages.publish_in.count`*::
+
--
type: long

Count of messages published "in" to an exchange, i.e. not taking account of routing.


--

*`rabbitmq.exchange.messages.publish_in.details.rate`*::
+
--
type: float

How much the exchange publish-in count has changed per second in the most recent sampling interval.


--

*`rabbitmq.exchange.messages.publish_out.count`*::
+
--
type: long

Count of messages published "out" of an exchange, i.e. taking account of routing.


--

*`rabbitmq.exchange.messages.publish_out.details.rate`*::
+
--
type: float

How much the exchange publish-out count has changed per second in the most recent sampling interval.


--

[float]
== node fields

node



*`rabbitmq.node.disk.free.bytes`*::
+
--
type: long

format: bytes

Disk free space in bytes.


--

*`rabbitmq.node.disk.free.limit.bytes`*::
+
--
type: long

format: bytes

Point at which the disk alarm will go off.


--

*`rabbitmq.node.fd.total`*::
+
--
type: long

File descriptors available.


--

*`rabbitmq.node.fd.used`*::
+
--
type: long

Used file descriptors.


--

*`rabbitmq.node.gc.num.count`*::
+
--
type: long

Number of GC operations.


--

*`rabbitmq.node.gc.reclaimed.bytes`*::
+
--
type: long

format: bytes

GC bytes reclaimed.


--

*`rabbitmq.node.io.file_handle.open_attempt.avg.ms`*::
+
--
type: long

File handle open avg time


--

*`rabbitmq.node.io.file_handle.open_attempt.count`*::
+
--
type: long

File handle open attempts


--

*`rabbitmq.node.io.read.avg.ms`*::
+
--
type: long

File handle read avg time


--

*`rabbitmq.node.io.read.bytes`*::
+
--
type: long

format: bytes

Data read in bytes


--

*`rabbitmq.node.io.read.count`*::
+
--
type: long

Data read operations


--

*`rabbitmq.node.io.reopen.count`*::
+
--
type: long

Data reopen operations


--

*`rabbitmq.node.io.seek.avg.ms`*::
+
--
type: long

Data seek avg time


--

*`rabbitmq.node.io.seek.count`*::
+
--
type: long

Data seek operations


--

*`rabbitmq.node.io.sync.avg.ms`*::
+
--
type: long

Data sync avg time


--

*`rabbitmq.node.io.sync.count`*::
+
--
type: long

Data sync operations


--

*`rabbitmq.node.io.write.avg.ms`*::
+
--
type: long

Data write avg time


--

*`rabbitmq.node.io.write.bytes`*::
+
--
type: long

format: bytes

Data write in bytes


--

*`rabbitmq.node.io.write.count`*::
+
--
type: long

Data write operations


--

*`rabbitmq.node.mem.limit.bytes`*::
+
--
type: long

format: bytes

Point at which the memory alarm will go off.


--

*`rabbitmq.node.mem.used.bytes`*::
+
--
type: long

Memory used in bytes.


--

*`rabbitmq.node.mnesia.disk.tx.count`*::
+
--
type: long

Number of Mnesia transactions which have been performed that required writes to disk.


--

*`rabbitmq.node.mnesia.ram.tx.count`*::
+
--
type: long

Number of Mnesia transactions which have been performed that did not require writes to disk.


--

*`rabbitmq.node.msg.store_read.count`*::
+
--
type: long

Number of messages which have been read from the message store.


--

*`rabbitmq.node.msg.store_write.count`*::
+
--
type: long

Number of messages which have been written to the message store.


--

*`rabbitmq.node.name`*::
+
--
type: keyword

Node name


--

*`rabbitmq.node.proc.total`*::
+
--
type: long

Maximum number of Erlang processes.


--

*`rabbitmq.node.proc.used`*::
+
--
type: long

Number of Erlang processes in use.


--

*`rabbitmq.node.processors`*::
+
--
type: long

Number of cores detected and usable by Erlang.


--

*`rabbitmq.node.queue.index.journal_write.count`*::
+
--
type: long

Number of records written to the queue index journal.


--

*`rabbitmq.node.queue.index.read.count`*::
+
--
type: long

Number of records read from the queue index.


--

*`rabbitmq.node.queue.index.write.count`*::
+
--
type: long

Number of records written to the queue index.


--

*`rabbitmq.node.run.queue`*::
+
--
type: long

Average number of Erlang processes waiting to run.


--

*`rabbitmq.node.socket.total`*::
+
--
type: long

File descriptors available for use as sockets.


--

*`rabbitmq.node.socket.used`*::
+
--
type: long

File descriptors used as sockets.


--

*`rabbitmq.node.type`*::
+
--
type: keyword

Node type.


--

*`rabbitmq.node.uptime`*::
+
--
type: long

Node uptime.


--

[float]
== queue fields

queue



*`rabbitmq.queue.name`*::
+
--
type: keyword

The name of the queue with non-ASCII characters escaped as in C.


--

*`rabbitmq.queue.vhost`*::
+
--
type: keyword

Virtual host name with non-ASCII characters escaped as in C.


--

*`rabbitmq.queue.durable`*::
+
--
type: boolean

Whether or not the queue survives server restarts.


--

*`rabbitmq.queue.auto_delete`*::
+
--
type: boolean

Whether the queue will be deleted automatically when no longer used.


--

*`rabbitmq.queue.exclusive`*::
+
--
type: boolean

Whether the queue is exclusive (i.e. has owner_pid).


--

*`rabbitmq.queue.node`*::
+
--
type: keyword

Node name.


--

*`rabbitmq.queue.state`*::
+
--
type: keyword

The state of the queue. Normally 'running', but may be "{syncing, MsgCount}" if the queue is synchronising. Queues which are located on cluster nodes that are currently down will be shown with a status of 'down'.


--

*`rabbitmq.queue.arguments.max_priority`*::
+
--
type: long

Maximum number of priority levels for the queue to support.


--

*`rabbitmq.queue.consumers.count`*::
+
--
type: long

Number of consumers.


--

*`rabbitmq.queue.consumers.utilisation.pct`*::
+
--
type: long

format: percentage

Fraction of the time (between 0.0 and 1.0) that the queue is able to immediately deliver messages to consumers. This can be less than 1.0 if consumers are limited by network congestion or prefetch count.


--

*`rabbitmq.queue.messages.total.count`*::
+
--
type: long

Sum of ready and unacknowledged messages (queue depth).


--

*`rabbitmq.queue.messages.total.details.rate`*::
+
--
type: float

How much the queue depth has changed per second in the most recent sampling interval.


--

*`rabbitmq.queue.messages.ready.count`*::
+
--
type: long

Number of messages ready to be delivered to clients.


--

*`rabbitmq.queue.messages.ready.details.rate`*::
+
--
type: float

How much the count of messages ready has changed per second in the most recent sampling interval.


--

*`rabbitmq.queue.messages.unacknowledged.count`*::
+
--
type: long

Number of messages delivered to clients but not yet acknowledged.


--

*`rabbitmq.queue.messages.unacknowledged.details.rate`*::
+
--
type: float

How much the count of unacknowledged messages has changed per second in the most recent sampling interval.


--

*`rabbitmq.queue.messages.persistent.count`*::
+
--
type: long

Total number of persistent messages in the queue (will always be 0 for transient queues).


--

*`rabbitmq.queue.memory.bytes`*::
+
--
type: long

format: bytes

Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures.


--

*`rabbitmq.queue.disk.reads.count`*::
+
--
type: long

Total number of times messages have been read from disk by this queue since it started.


--

*`rabbitmq.queue.disk.writes.count`*::
+
--
type: long

Total number of times messages have been written to disk by this queue since it started.


--

[[exported-fields-redis]]
== Redis fields

Redis metrics collected from Redis.



[float]
== redis fields

`redis` contains the information and statistics from Redis.



[float]
== info fields

`info` contains the information and statistics returned by the `INFO` command.



[float]
== clients fields

Redis client stats.



*`redis.info.clients.connected`*::
+
--
type: long

Number of client connections (excluding connections from slaves).


--

*`redis.info.clients.longest_output_list`*::
+
--

deprecated[6.5.0]

type: long

Longest output list among current client connections (replaced by max_output_buffer).


--

*`redis.info.clients.max_output_buffer`*::
+
--
type: long

Longest output list among current client connections.


--

*`redis.info.clients.biggest_input_buf`*::
+
--

deprecated[6.5.0]

type: long

Biggest input buffer among current client connections (replaced by max_input_buffer).


--

*`redis.info.clients.max_input_buffer`*::
+
--
type: long

Biggest input buffer among current client connections (on redis 5.0).


--

*`redis.info.clients.blocked`*::
+
--
type: long

Number of clients pending on a blocking call (BLPOP, BRPOP, BRPOPLPUSH).


--

[float]
== cluster fields

Redis cluster information.



*`redis.info.cluster.enabled`*::
+
--
type: boolean

Indicates that the Redis cluster is enabled.


--

[float]
== cpu fields

Redis CPU stats



*`redis.info.cpu.used.sys`*::
+
--
type: scaled_float

System CPU consumed by the Redis server.


--

*`redis.info.cpu.used.sys_children`*::
+
--
type: scaled_float

User CPU consumed by the Redis server.


--

*`redis.info.cpu.used.user`*::
+
--
type: scaled_float

System CPU consumed by the background processes.


--

*`redis.info.cpu.used.user_children`*::
+
--
type: scaled_float

User CPU consumed by the background processes.


--

[float]
== memory fields

Redis memory stats.



*`redis.info.memory.used.value`*::
+
--
type: long

format: bytes Total number of bytes allocated by Redis.



--

*`redis.info.memory.used.rss`*::
+
--
type: long

format: bytes

Number of bytes that Redis allocated as seen by the operating system (a.k.a resident set size).


--

*`redis.info.memory.used.peak`*::
+
--
type: long

format: bytes

Peak memory consumed by Redis.


--

*`redis.info.memory.used.lua`*::
+
--
type: long

format: bytes

Used memory by the Lua engine.        


--

*`redis.info.memory.used.dataset`*::
+
--
type: long

format: bytes

The size in bytes of the dataset 


--

*`redis.info.memory.max.value`*::
+
--
type: long

format: bytes

Memory limit.


--

*`redis.info.memory.max.policy`*::
+
--
type: keyword

Eviction policy to use when memory limit is reached.


--

*`redis.info.memory.fragmentation.ratio`*::
+
--
type: float

Ratio between used_memory_rss and used_memory


--

*`redis.info.memory.fragmentation.bytes`*::
+
--
type: long

format: bytes

Bytes between used_memory_rss and used_memory


--

*`redis.info.memory.active_defrag.is_running`*::
+
--
type: boolean

Flag indicating if active defragmentation is active


--

*`redis.info.memory.allocator`*::
+
--
type: keyword

Memory allocator.


--


*`redis.info.memory.allocator_stats.allocated`*::
+
--
type: long

format: bytes

Allocated memory


--

*`redis.info.memory.allocator_stats.active`*::
+
--
type: long

format: bytes

Active memeory


--

*`redis.info.memory.allocator_stats.resident`*::
+
--
type: long

format: bytes

Resident memory


--

*`redis.info.memory.allocator_stats.fragmentation.ratio`*::
+
--
type: float

Fragmentation ratio


--

*`redis.info.memory.allocator_stats.fragmentation.bytes`*::
+
--
type: long

format: bytes

Fragmented bytes


--

*`redis.info.memory.allocator_stats.rss.ratio`*::
+
--
type: float

Resident ratio


--

*`redis.info.memory.allocator_stats.rss.bytes`*::
+
--
type: long

format: bytes

Resident bytes


--

[float]
== persistence fields

Redis CPU stats.



*`redis.info.persistence.loading`*::
+
--
type: boolean

Flag indicating if the load of a dump file is on-going


--

[float]
== rdb fields

Provides information about RDB persistence



*`redis.info.persistence.rdb.last_save.changes_since`*::
+
--
type: long

Number of changes since the last dump


--

*`redis.info.persistence.rdb.last_save.time`*::
+
--
type: long

Epoch-based timestamp of last successful RDB save


--

*`redis.info.persistence.rdb.bgsave.in_progress`*::
+
--
type: boolean

Flag indicating a RDB save is on-going


--

*`redis.info.persistence.rdb.bgsave.last_status`*::
+
--
type: keyword

Status of the last RDB save operation


--

*`redis.info.persistence.rdb.bgsave.last_time.sec`*::
+
--
type: long

format: duration

Duration of the last RDB save operation in seconds


--

*`redis.info.persistence.rdb.bgsave.current_time.sec`*::
+
--
type: long

format: duration

Duration of the on-going RDB save operation if any


--

*`redis.info.persistence.rdb.copy_on_write.last_size`*::
+
--
type: long

format: bytes

The size in bytes of copy-on-write allocations during the last RBD save operation                


--

[float]
== aof fields

Provides information about AOF persitence



*`redis.info.persistence.aof.enabled`*::
+
--
type: boolean

Flag indicating AOF logging is activated


--

*`redis.info.persistence.aof.rewrite.in_progress`*::
+
--
type: boolean

Flag indicating a AOF rewrite operation is on-going


--

*`redis.info.persistence.aof.rewrite.scheduled`*::
+
--
type: boolean

Flag indicating an AOF rewrite operation will be scheduled once the on-going RDB save is complete.


--

*`redis.info.persistence.aof.rewrite.last_time.sec`*::
+
--
type: long

format: duration

Duration of the last AOF rewrite operation in seconds


--

*`redis.info.persistence.aof.rewrite.current_time.sec`*::
+
--
type: long

format: duration

Duration of the on-going AOF rewrite operation if any


--

*`redis.info.persistence.aof.rewrite.buffer.size`*::
+
--
type: long

format: bytes

Size of the AOF rewrite buffer


--

*`redis.info.persistence.aof.bgrewrite.last_status`*::
+
--
type: keyword

Status of the last AOF rewrite operatio


--

*`redis.info.persistence.aof.write.last_status`*::
+
--
type: keyword

Status of the last write operation to the AOF


--

*`redis.info.persistence.aof.copy_on_write.last_size`*::
+
--
type: long

format: bytes

The size in bytes of copy-on-write allocations during the last RBD save operation


--

*`redis.info.persistence.aof.buffer.size`*::
+
--
type: long

format: bytes

Size of the AOF buffer


--

*`redis.info.persistence.aof.size.current`*::
+
--
type: long

format: bytes

AOF current file size             


--

*`redis.info.persistence.aof.size.base`*::
+
--
type: long

format: bytes

AOF file size on latest startup or rewrite


--

*`redis.info.persistence.aof.fsync.pending`*::
+
--
type: long

Number of fsync pending jobs in background I/O queue


--

*`redis.info.persistence.aof.fsync.delayed`*::
+
--
type: long

Delayed fsync counter


--

[float]
== replication fields

Replication



*`redis.info.replication.role`*::
+
--
type: keyword

Role of the instance (can be "master", or "slave").


--

*`redis.info.replication.connected_slaves`*::
+
--
type: long

Number of connected slaves


--

*`redis.info.replication.master_offset`*::
+
--

deprecated[6.5]

type: long

The server's current replication offset


--

*`redis.info.replication.backlog.active`*::
+
--
type: long

Flag indicating replication backlog is active


--

*`redis.info.replication.backlog.size`*::
+
--
type: long

format: bytes

Total size in bytes of the replication backlog buffer


--

*`redis.info.replication.backlog.first_byte_offset`*::
+
--
type: long

The master offset of the replication backlog buffer          


--

*`redis.info.replication.backlog.histlen`*::
+
--
type: long

Size in bytes of the data in the replication backlog buffer


--

*`redis.info.replication.master.offset`*::
+
--
type: long

The server's current replication offset


--

*`redis.info.replication.master.second_offset`*::
+
--
type: long

The offset up to which replication IDs are accepted


--

*`redis.info.replication.master.link_status`*::
+
--
type: keyword

Status of the link (up/down)


--

*`redis.info.replication.master.last_io_seconds_ago`*::
+
--
type: long

format: duration

Number of seconds since the last interaction with master


--

*`redis.info.replication.master.sync.in_progress`*::
+
--
type: boolean

Indicate the master is syncing to the slave


--

*`redis.info.replication.master.sync.left_bytes`*::
+
--
type: long

format: bytes

Number of bytes left before syncing is complete


--

*`redis.info.replication.master.sync.last_io_seconds_ago`*::
+
--
type: long

format: duration

Number of seconds since last transfer I/O during a SYNC operation


--

*`redis.info.replication.slave.offset`*::
+
--
type: long

The replication offset of the slave instance


--

*`redis.info.replication.slave.priority`*::
+
--
type: long

The priority of the instance as a candidate for failover


--

*`redis.info.replication.slave.is_readonly`*::
+
--
type: boolean

Flag indicating if the slave is read-only


--

[float]
== server fields

Server info



*`redis.info.server.version`*::
+
--
type: keyword

None

--

*`redis.info.server.git_sha1`*::
+
--
type: keyword

None

--

*`redis.info.server.git_dirty`*::
+
--
type: keyword

None

--

*`redis.info.server.build_id`*::
+
--
type: keyword

None

--

*`redis.info.server.mode`*::
+
--
type: keyword

None

--

*`redis.info.server.os`*::
+
--
type: keyword

None

--

*`redis.info.server.arch_bits`*::
+
--
type: keyword

None

--

*`redis.info.server.multiplexing_api`*::
+
--
type: keyword

None

--

*`redis.info.server.gcc_version`*::
+
--
type: keyword

None

--

*`redis.info.server.process_id`*::
+
--
type: long

None

--

*`redis.info.server.run_id`*::
+
--
type: keyword

None

--

*`redis.info.server.tcp_port`*::
+
--
type: long

None

--

*`redis.info.server.uptime`*::
+
--
type: long

None

--

*`redis.info.server.hz`*::
+
--
type: long

None

--

*`redis.info.server.lru_clock`*::
+
--
type: long

None

--

*`redis.info.server.config_file`*::
+
--
type: keyword

None

--

[float]
== stats fields

Redis stats.



*`redis.info.stats.connections.received`*::
+
--
type: long

Total number of connections received.

--

*`redis.info.stats.connections.rejected`*::
+
--
type: long

Total number of connections rejected.

--

*`redis.info.stats.commands_processed`*::
+
--
type: long

Total number of commands processed.

--

*`redis.info.stats.net.input.bytes`*::
+
--
type: long

Total network input in bytes.

--

*`redis.info.stats.net.output.bytes`*::
+
--
type: long

Total network output in bytes.

--

*`redis.info.stats.instantaneous.ops_per_sec`*::
+
--
type: long

Number of commands processed per second


--

*`redis.info.stats.instantaneous.input_kbps`*::
+
--
type: scaled_float

The network's read rate per second in KB/sec


--

*`redis.info.stats.instantaneous.output_kbps`*::
+
--
type: scaled_float

The network's write rate per second in KB/sec


--

*`redis.info.stats.sync.full`*::
+
--
type: long

The number of full resyncs with slaves


--

*`redis.info.stats.sync.partial.ok`*::
+
--
type: long

The number of accepted partial resync requests


--

*`redis.info.stats.sync.partial.err`*::
+
--
type: long

The number of denied partial resync requests


--

*`redis.info.stats.keys.expired`*::
+
--
type: long

Total number of key expiration events


--

*`redis.info.stats.keys.evicted`*::
+
--
type: long

Number of evicted keys due to maxmemory limit


--

*`redis.info.stats.keyspace.hits`*::
+
--
type: long

Number of successful lookup of keys in the main dictionary


--

*`redis.info.stats.keyspace.misses`*::
+
--
type: long

Number of failed lookup of keys in the main dictionary


--

*`redis.info.stats.pubsub.channels`*::
+
--
type: long

Global number of pub/sub channels with client subscriptions


--

*`redis.info.stats.pubsub.patterns`*::
+
--
type: long

Global number of pub/sub pattern with client subscriptions


--

*`redis.info.stats.latest_fork_usec`*::
+
--
type: long

Duration of the latest fork operation in microseconds


--

*`redis.info.stats.migrate_cached_sockets`*::
+
--
type: long

The number of sockets open for MIGRATE purposes


--

*`redis.info.stats.slave_expires_tracked_keys`*::
+
--
type: long

The number of keys tracked for expiry purposes (applicable only to writable slaves)


--

*`redis.info.stats.active_defrag.hits`*::
+
--
type: long

Number of value reallocations performed by active the defragmentation process


--

*`redis.info.stats.active_defrag.misses`*::
+
--
type: long

Number of aborted value reallocations started by the active defragmentation process


--

*`redis.info.stats.active_defrag.key_hits`*::
+
--
type: long

Number of keys that were actively defragmented


--

*`redis.info.stats.active_defrag.key_misses`*::
+
--
type: long

Number of keys that were skipped by the active defragmentation process


--

*`redis.info.slowlog.count`*::
+
--
type: long

Count of slow operations


--

[float]
== keyspace fields

`keyspace` contains the information about the keyspaces returned by the `INFO` command.



*`redis.keyspace.id`*::
+
--
type: keyword

Keyspace identifier.


--

*`redis.keyspace.avg_ttl`*::
+
--
type: long

Average ttl.


--

*`redis.keyspace.keys`*::
+
--
type: long

Number of keys in the keyspace.


--

*`redis.keyspace.expires`*::
+
--
type: long



--

[[exported-fields-system]]
== System fields

System status metrics, like CPU and memory usage, that are collected from the operating system.



[float]
== system fields

`system` contains local system metrics.



[float]
== core fields

`system-core` contains CPU metrics for a single core of a multi-core system.



*`system.core.id`*::
+
--
type: long

CPU Core number.


--

*`system.core.user.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in user space.


--

*`system.core.user.ticks`*::
+
--
type: long

The amount of CPU time spent in user space.


--

*`system.core.system.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in kernel space.


--

*`system.core.system.ticks`*::
+
--
type: long

The amount of CPU time spent in kernel space.


--

*`system.core.nice.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent on low-priority processes.


--

*`system.core.nice.ticks`*::
+
--
type: long

The amount of CPU time spent on low-priority processes.


--

*`system.core.idle.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent idle.


--

*`system.core.idle.ticks`*::
+
--
type: long

The amount of CPU time spent idle.


--

*`system.core.iowait.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in wait (on disk).


--

*`system.core.iowait.ticks`*::
+
--
type: long

The amount of CPU time spent in wait (on disk).


--

*`system.core.irq.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling hardware interrupts.


--

*`system.core.irq.ticks`*::
+
--
type: long

The amount of CPU time spent servicing and handling hardware interrupts.


--

*`system.core.softirq.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling software interrupts.


--

*`system.core.softirq.ticks`*::
+
--
type: long

The amount of CPU time spent servicing and handling software interrupts.


--

*`system.core.steal.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


--

*`system.core.steal.ticks`*::
+
--
type: long

The amount of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


--

[float]
== cpu fields

`cpu` contains local CPU stats.



*`system.cpu.cores`*::
+
--
type: long

The number of CPU cores present on the host. The non-normalized percentages will have a maximum value of `100% * cores`. The normalized percentages already take this value into account and have a maximum value of 100%.


--

*`system.cpu.user.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in user space. On multi-core systems, you can have percentages that are greater than 100%. For example, if 3 cores are at 60% use, then the `system.cpu.user.pct` will be 180%.


--

*`system.cpu.system.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in kernel space.


--

*`system.cpu.nice.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent on low-priority processes.


--

*`system.cpu.idle.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent idle.


--

*`system.cpu.iowait.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in wait (on disk).


--

*`system.cpu.irq.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling hardware interrupts.


--

*`system.cpu.softirq.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling software interrupts.


--

*`system.cpu.steal.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


--

*`system.cpu.total.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in states other than Idle and IOWait.


--

*`system.cpu.user.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in user space.


--

*`system.cpu.system.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in kernel space.


--

*`system.cpu.nice.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent on low-priority processes.


--

*`system.cpu.idle.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent idle.


--

*`system.cpu.iowait.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in wait (on disk).


--

*`system.cpu.irq.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling hardware interrupts.


--

*`system.cpu.softirq.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent servicing and handling software interrupts.


--

*`system.cpu.steal.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


--

*`system.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time in states other than Idle and IOWait, normalised by the number of cores.


--

*`system.cpu.user.ticks`*::
+
--
type: long

The amount of CPU time spent in user space.


--

*`system.cpu.system.ticks`*::
+
--
type: long

The amount of CPU time spent in kernel space.


--

*`system.cpu.nice.ticks`*::
+
--
type: long

The amount of CPU time spent on low-priority processes.


--

*`system.cpu.idle.ticks`*::
+
--
type: long

The amount of CPU time spent idle.


--

*`system.cpu.iowait.ticks`*::
+
--
type: long

The amount of CPU time spent in wait (on disk).


--

*`system.cpu.irq.ticks`*::
+
--
type: long

The amount of CPU time spent servicing and handling hardware interrupts.


--

*`system.cpu.softirq.ticks`*::
+
--
type: long

The amount of CPU time spent servicing and handling software interrupts.


--

*`system.cpu.steal.ticks`*::
+
--
type: long

The amount of CPU time spent in involuntary wait by the virtual CPU while the hypervisor was servicing another processor. Available only on Unix.


--

[float]
== diskio fields

`disk` contains disk IO metrics collected from the operating system.



*`system.diskio.name`*::
+
--
type: keyword

example: sda1

The disk name.


--

*`system.diskio.serial_number`*::
+
--
type: keyword

The disk's serial number. This may not be provided by all operating systems.


--

*`system.diskio.read.count`*::
+
--
type: long

The total number of reads completed successfully.


--

*`system.diskio.write.count`*::
+
--
type: long

The total number of writes completed successfully.


--

*`system.diskio.read.bytes`*::
+
--
type: long

format: bytes

The total number of bytes read successfully. On Linux this is the number of sectors read multiplied by an assumed sector size of 512.


--

*`system.diskio.write.bytes`*::
+
--
type: long

format: bytes

The total number of bytes written successfully. On Linux this is the number of sectors written multiplied by an assumed sector size of 512.


--

*`system.diskio.read.time`*::
+
--
type: long

The total number of milliseconds spent by all reads.


--

*`system.diskio.write.time`*::
+
--
type: long

The total number of milliseconds spent by all writes.


--

*`system.diskio.io.time`*::
+
--
type: long

The total number of of milliseconds spent doing I/Os.


--

*`system.diskio.iostat.read.request.merges_per_sec`*::
+
--
type: float

The number of read requests merged per second that were queued to the device.


--

*`system.diskio.iostat.write.request.merges_per_sec`*::
+
--
type: float

The number of write requests merged per second that were queued to the device.


--

*`system.diskio.iostat.read.request.per_sec`*::
+
--
type: float

The number of read requests that were issued to the device per second


--

*`system.diskio.iostat.write.request.per_sec`*::
+
--
type: float

The number of write requests that were issued to the device per second


--

*`system.diskio.iostat.read.per_sec.bytes`*::
+
--
type: float

format: bytes

The number of Bytes read from the device per second.


--

*`system.diskio.iostat.read.await`*::
+
--
type: float

The average time spent for read requests issued to the device to be served.


--

*`system.diskio.iostat.write.per_sec.bytes`*::
+
--
type: float

format: bytes

The number of Bytes write from the device per second.


--

*`system.diskio.iostat.write.await`*::
+
--
type: float

The average time spent for write requests issued to the device to be served.


--

*`system.diskio.iostat.request.avg_size`*::
+
--
type: float

The average size (in sectors) of the requests that were issued to the device.


--

*`system.diskio.iostat.queue.avg_size`*::
+
--
type: float

The average queue length of the requests that were issued to the device.


--

*`system.diskio.iostat.await`*::
+
--
type: float

The average time spent for requests issued to the device to be served.


--

*`system.diskio.iostat.service_time`*::
+
--
type: float

The average service time (in milliseconds) for I/O requests that were issued to the device.


--

*`system.diskio.iostat.busy`*::
+
--
type: float

Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%.


--

[float]
== filesystem fields

`filesystem` contains local filesystem stats.



*`system.filesystem.available`*::
+
--
type: long

format: bytes

The disk space available to an unprivileged user in bytes.


--

*`system.filesystem.device_name`*::
+
--
type: keyword

The disk name. For example: `/dev/disk1`


--

*`system.filesystem.type`*::
+
--
type: keyword

The disk type. For example: `ext4`


--

*`system.filesystem.mount_point`*::
+
--
type: keyword

The mounting point. For example: `/`


--

*`system.filesystem.files`*::
+
--
type: long

The total number of file nodes in the file system.


--

*`system.filesystem.free`*::
+
--
type: long

format: bytes

The disk space available in bytes.


--

*`system.filesystem.free_files`*::
+
--
type: long

The number of free file nodes in the file system.


--

*`system.filesystem.total`*::
+
--
type: long

format: bytes

The total disk space in bytes.


--

*`system.filesystem.used.bytes`*::
+
--
type: long

format: bytes

The used disk space in bytes.


--

*`system.filesystem.used.pct`*::
+
--
type: scaled_float

format: percent

The percentage of used disk space.


--

[float]
== fsstat fields

`system.fsstat` contains filesystem metrics aggregated from all mounted filesystems.



*`system.fsstat.count`*::
+
--
type: long

Number of file systems found.

--

*`system.fsstat.total_files`*::
+
--
type: long

Total number of files.

--

[float]
== total_size fields

Nested file system docs.


*`system.fsstat.total_size.free`*::
+
--
type: long

format: bytes

Total free space.


--

*`system.fsstat.total_size.used`*::
+
--
type: long

format: bytes

Total used space.


--

*`system.fsstat.total_size.total`*::
+
--
type: long

format: bytes

Total space (used plus free).


--

[float]
== load fields

CPU load averages.



*`system.load.1`*::
+
--
type: scaled_float

Load average for the last minute.


--

*`system.load.5`*::
+
--
type: scaled_float

Load average for the last 5 minutes.


--

*`system.load.15`*::
+
--
type: scaled_float

Load average for the last 15 minutes.


--

*`system.load.norm.1`*::
+
--
type: scaled_float

Load for the last minute divided by the number of cores.


--

*`system.load.norm.5`*::
+
--
type: scaled_float

Load for the last 5 minutes divided by the number of cores.


--

*`system.load.norm.15`*::
+
--
type: scaled_float

Load for the last 15 minutes divided by the number of cores.


--

*`system.load.cores`*::
+
--
type: long

The number of CPU cores present on the host.


--

[float]
== memory fields

`memory` contains local memory stats.



*`system.memory.total`*::
+
--
type: long

format: bytes

Total memory.


--

*`system.memory.used.bytes`*::
+
--
type: long

format: bytes

Used memory.


--

*`system.memory.free`*::
+
--
type: long

format: bytes

The total amount of free memory in bytes. This value does not include memory consumed by system caches and buffers (see system.memory.actual.free).


--

*`system.memory.used.pct`*::
+
--
type: scaled_float

format: percent

The percentage of used memory.


--

[float]
== actual fields

Actual memory used and free.



*`system.memory.actual.used.bytes`*::
+
--
type: long

format: bytes

Actual used memory in bytes. It represents the difference between the total and the available memory. The available memory depends on the OS. For more details, please check `system.actual.free`.


--

*`system.memory.actual.free`*::
+
--
type: long

format: bytes

Actual free memory in bytes. It is calculated based on the OS. On Linux it consists of the free memory plus caches and buffers. On OSX it is a sum of free memory and the inactive memory. On Windows, it is equal to `system.memory.free`.


--

*`system.memory.actual.used.pct`*::
+
--
type: scaled_float

format: percent

The percentage of actual used memory.


--

[float]
== swap fields

This group contains statistics related to the swap memory usage on the system.


*`system.memory.swap.total`*::
+
--
type: long

format: bytes

Total swap memory.


--

*`system.memory.swap.used.bytes`*::
+
--
type: long

format: bytes

Used swap memory.


--

*`system.memory.swap.free`*::
+
--
type: long

format: bytes

Available swap memory.


--

*`system.memory.swap.used.pct`*::
+
--
type: scaled_float

format: percent

The percentage of used swap memory.


--

[float]
== hugepages fields

This group contains statistics related to huge pages usage on the system.


*`system.memory.hugepages.total`*::
+
--
type: long

format: number

Number of huge pages in the pool.


--

*`system.memory.hugepages.used.bytes`*::
+
--
type: long

format: bytes

Memory used in allocated huge pages.


--

*`system.memory.hugepages.used.pct`*::
+
--
type: long

format: percent

Percentage of huge pages used.


--

*`system.memory.hugepages.free`*::
+
--
type: long

format: number

Number of available huge pages in the pool.


--

*`system.memory.hugepages.reserved`*::
+
--
type: long

format: number

Number of reserved but not allocated huge pages in the pool.


--

*`system.memory.hugepages.surplus`*::
+
--
type: long

format: number

Number of overcommited huge pages.


--

*`system.memory.hugepages.default_size`*::
+
--
type: long

format: bytes

Default size for huge pages.


--

[float]
== network fields

`network` contains network IO metrics for a single network interface.



*`system.network.name`*::
+
--
type: keyword

example: eth0

The network interface name.


--

*`system.network.out.bytes`*::
+
--
type: long

format: bytes

The number of bytes sent.


--

*`system.network.in.bytes`*::
+
--
type: long

format: bytes

The number of bytes received.


--

*`system.network.out.packets`*::
+
--
type: long

The number of packets sent.


--

*`system.network.in.packets`*::
+
--
type: long

The number or packets received.


--

*`system.network.in.errors`*::
+
--
type: long

The number of errors while receiving.


--

*`system.network.out.errors`*::
+
--
type: long

The number of errors while sending.


--

*`system.network.in.dropped`*::
+
--
type: long

The number of incoming packets that were dropped.


--

*`system.network.out.dropped`*::
+
--
type: long

The number of outgoing packets that were dropped. This value is always 0 on Darwin and BSD because it is not reported by the operating system.


--

[float]
== process fields

`process` contains process metadata, CPU metrics, and memory metrics.



*`system.process.name`*::
+
--
type: keyword

The process name.


--

*`system.process.state`*::
+
--
type: keyword

The process state. For example: "running".


--

*`system.process.pid`*::
+
--
type: long

The process pid.


--

*`system.process.ppid`*::
+
--
type: long

The process parent pid.


--

*`system.process.pgid`*::
+
--
type: long

The process group id.


--

*`system.process.cmdline`*::
+
--
type: keyword

The full command-line used to start the process, including the arguments separated by space.


--

*`system.process.username`*::
+
--
type: keyword

The username of the user that created the process. If the username cannot be determined, the field will contain the user's numeric identifier (UID). On Windows, this field includes the user's domain and is formatted as `domain\username`.


--

*`system.process.cwd`*::
+
--
type: keyword

The current working directory of the process. This field is only available on Linux.


--

*`system.process.env`*::
+
--
type: object

The environment variables used to start the process. The data is available on FreeBSD, Linux, and OS X.


--

[float]
== cpu fields

CPU-specific statistics per process.


*`system.process.cpu.user.ticks`*::
+
--
type: long

The amount of CPU time the process spent in user space.


--

*`system.process.cpu.total.value`*::
+
--
type: long

The value of CPU usage since starting the process.


--

*`system.process.cpu.total.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last update. Its value is similar to the %CPU value of the process displayed by the top command on Unix systems.


--

*`system.process.cpu.total.norm.pct`*::
+
--
type: scaled_float

format: percent

The percentage of CPU time spent by the process since the last event. This value is normalized by the number of CPU cores and it ranges from 0 to 100%.


--

*`system.process.cpu.system.ticks`*::
+
--
type: long

The amount of CPU time the process spent in kernel space.


--

*`system.process.cpu.total.ticks`*::
+
--
type: long

The total CPU time spent by the process.


--

*`system.process.cpu.start_time`*::
+
--
type: date

The time when the process was started.


--

[float]
== memory fields

Memory-specific statistics per process.


*`system.process.memory.size`*::
+
--
type: long

format: bytes

The total virtual memory the process has.


--

*`system.process.memory.rss.bytes`*::
+
--
type: long

format: bytes

The Resident Set Size. The amount of memory the process occupied in main memory (RAM).


--

*`system.process.memory.rss.pct`*::
+
--
type: scaled_float

format: percent

The percentage of memory the process occupied in main memory (RAM).


--

*`system.process.memory.share`*::
+
--
type: long

format: bytes

The shared memory the process uses.


--

[float]
== fd fields

File descriptor usage metrics. This set of metrics is available for Linux and FreeBSD.



*`system.process.fd.open`*::
+
--
type: long

The number of file descriptors open by the process.

--

*`system.process.fd.limit.soft`*::
+
--
type: long

The soft limit on the number of file descriptors opened by the process. The soft limit can be changed by the process at any time.


--

*`system.process.fd.limit.hard`*::
+
--
type: long

The hard limit on the number of file descriptors opened by the process. The hard limit can only be raised by root.


--

[float]
== cgroup fields

Metrics and limits from the cgroup of which the task is a member. cgroup metrics are reported when the process has membership in a non-root cgroup. These metrics are only available on Linux.



*`system.process.cgroup.id`*::
+
--
type: keyword

The ID common to all cgroups associated with this task. If there isn't a common ID used by all cgroups this field will be absent.


--

*`system.process.cgroup.path`*::
+
--
type: keyword

The path to the cgroup relative to the cgroup subsystem's mountpoint. If there isn't a common path used by all cgroups this field will be absent.


--

[float]
== cpu fields

The cpu subsystem schedules CPU access for tasks in the cgroup. Access can be controlled by two separate schedulers, CFS and RT. CFS stands for completely fair scheduler which proportionally divides the CPU time between cgroups based on weight. RT stands for real time scheduler which sets a maximum amount of CPU time that processes in the cgroup can consume during a given period.



*`system.process.cgroup.cpu.id`*::
+
--
type: keyword

ID of the cgroup.

--

*`system.process.cgroup.cpu.path`*::
+
--
type: keyword

Path to the cgroup relative to the cgroup subsystem's mountpoint.


--

*`system.process.cgroup.cpu.cfs.period.us`*::
+
--
type: long

Period of time in microseconds for how regularly a cgroup's access to CPU resources should be reallocated.


--

*`system.process.cgroup.cpu.cfs.quota.us`*::
+
--
type: long

Total amount of time in microseconds for which all tasks in a cgroup can run during one period (as defined by cfs.period.us).


--

*`system.process.cgroup.cpu.cfs.shares`*::
+
--
type: long

An integer value that specifies a relative share of CPU time available to the tasks in a cgroup. The value specified in the cpu.shares file must be 2 or higher.


--

*`system.process.cgroup.cpu.rt.period.us`*::
+
--
type: long

Period of time in microseconds for how regularly a cgroup's access to CPU resources is reallocated.


--

*`system.process.cgroup.cpu.rt.runtime.us`*::
+
--
type: long

Period of time in microseconds for the longest continuous period in which the tasks in a cgroup have access to CPU resources.


--

*`system.process.cgroup.cpu.stats.periods`*::
+
--
type: long

Number of period intervals (as specified in cpu.cfs.period.us) that have elapsed.


--

*`system.process.cgroup.cpu.stats.throttled.periods`*::
+
--
type: long

Number of times tasks in a cgroup have been throttled (that is, not allowed to run because they have exhausted all of the available time as specified by their quota).


--

*`system.process.cgroup.cpu.stats.throttled.ns`*::
+
--
type: long

The total time duration (in nanoseconds) for which tasks in a cgroup have been throttled.


--

[float]
== cpuacct fields

CPU accounting metrics.


*`system.process.cgroup.cpuacct.id`*::
+
--
type: keyword

ID of the cgroup.

--

*`system.process.cgroup.cpuacct.path`*::
+
--
type: keyword

Path to the cgroup relative to the cgroup subsystem's mountpoint.


--

*`system.process.cgroup.cpuacct.total.ns`*::
+
--
type: long

Total CPU time in nanoseconds consumed by all tasks in the cgroup.


--

*`system.process.cgroup.cpuacct.stats.user.ns`*::
+
--
type: long

CPU time consumed by tasks in user mode.

--

*`system.process.cgroup.cpuacct.stats.system.ns`*::
+
--
type: long

CPU time consumed by tasks in user (kernel) mode.

--

*`system.process.cgroup.cpuacct.percpu`*::
+
--
type: object

CPU time (in nanoseconds) consumed on each CPU by all tasks in this cgroup.


--

[float]
== memory fields

Memory limits and metrics.


*`system.process.cgroup.memory.id`*::
+
--
type: keyword

ID of the cgroup.

--

*`system.process.cgroup.memory.path`*::
+
--
type: keyword

Path to the cgroup relative to the cgroup subsystem's mountpoint.


--

*`system.process.cgroup.memory.mem.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.mem.usage.max.bytes`*::
+
--
type: long

format: bytes

The maximum memory used by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.mem.limit.bytes`*::
+
--
type: long

format: bytes

The maximum amount of user memory in bytes (including file cache) that tasks in the cgroup are allowed to use.


--

*`system.process.cgroup.memory.mem.failures`*::
+
--
type: long

The number of times that the memory limit (mem.limit.bytes) was reached.


--

*`system.process.cgroup.memory.memsw.usage.bytes`*::
+
--
type: long

format: bytes

The sum of current memory usage plus swap space used by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.memsw.usage.max.bytes`*::
+
--
type: long

format: bytes

The maximum amount of memory and swap space used by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.memsw.limit.bytes`*::
+
--
type: long

format: bytes

The maximum amount for the sum of memory and swap usage that tasks in the cgroup are allowed to use.


--

*`system.process.cgroup.memory.memsw.failures`*::
+
--
type: long

The number of times that the memory plus swap space limit (memsw.limit.bytes) was reached.


--

*`system.process.cgroup.memory.kmem.usage.bytes`*::
+
--
type: long

format: bytes

Total kernel memory usage by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.kmem.usage.max.bytes`*::
+
--
type: long

format: bytes

The maximum kernel memory used by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.kmem.limit.bytes`*::
+
--
type: long

format: bytes

The maximum amount of kernel memory that tasks in the cgroup are allowed to use.


--

*`system.process.cgroup.memory.kmem.failures`*::
+
--
type: long

The number of times that the memory limit (kmem.limit.bytes) was reached.


--

*`system.process.cgroup.memory.kmem_tcp.usage.bytes`*::
+
--
type: long

format: bytes

Total memory usage for TCP buffers in bytes.


--

*`system.process.cgroup.memory.kmem_tcp.usage.max.bytes`*::
+
--
type: long

format: bytes

The maximum memory used for TCP buffers by processes in the cgroup (in bytes).


--

*`system.process.cgroup.memory.kmem_tcp.limit.bytes`*::
+
--
type: long

format: bytes

The maximum amount of memory for TCP buffers that tasks in the cgroup are allowed to use.


--

*`system.process.cgroup.memory.kmem_tcp.failures`*::
+
--
type: long

The number of times that the memory limit (kmem_tcp.limit.bytes) was reached.


--

*`system.process.cgroup.memory.stats.active_anon.bytes`*::
+
--
type: long

format: bytes

Anonymous and swap cache on active least-recently-used (LRU) list, including tmpfs (shmem), in bytes.


--

*`system.process.cgroup.memory.stats.active_file.bytes`*::
+
--
type: long

format: bytes

File-backed memory on active LRU list, in bytes.

--

*`system.process.cgroup.memory.stats.cache.bytes`*::
+
--
type: long

format: bytes

Page cache, including tmpfs (shmem), in bytes.

--

*`system.process.cgroup.memory.stats.hierarchical_memory_limit.bytes`*::
+
--
type: long

format: bytes

Memory limit for the hierarchy that contains the memory cgroup, in bytes.


--

*`system.process.cgroup.memory.stats.hierarchical_memsw_limit.bytes`*::
+
--
type: long

format: bytes

Memory plus swap limit for the hierarchy that contains the memory cgroup, in bytes.


--

*`system.process.cgroup.memory.stats.inactive_anon.bytes`*::
+
--
type: long

format: bytes

Anonymous and swap cache on inactive LRU list, including tmpfs (shmem), in bytes


--

*`system.process.cgroup.memory.stats.inactive_file.bytes`*::
+
--
type: long

format: bytes

File-backed memory on inactive LRU list, in bytes.


--

*`system.process.cgroup.memory.stats.mapped_file.bytes`*::
+
--
type: long

format: bytes

Size of memory-mapped mapped files, including tmpfs (shmem), in bytes.


--

*`system.process.cgroup.memory.stats.page_faults`*::
+
--
type: long

Number of times that a process in the cgroup triggered a page fault.


--

*`system.process.cgroup.memory.stats.major_page_faults`*::
+
--
type: long

Number of times that a process in the cgroup triggered a major fault. "Major" faults happen when the kernel actually has to read the data from disk.


--

*`system.process.cgroup.memory.stats.pages_in`*::
+
--
type: long

Number of pages paged into memory. This is a counter.


--

*`system.process.cgroup.memory.stats.pages_out`*::
+
--
type: long

Number of pages paged out of memory. This is a counter.


--

*`system.process.cgroup.memory.stats.rss.bytes`*::
+
--
type: long

format: bytes

Anonymous and swap cache (includes transparent hugepages), not including tmpfs (shmem), in bytes.


--

*`system.process.cgroup.memory.stats.rss_huge.bytes`*::
+
--
type: long

format: bytes

Number of bytes of anonymous transparent hugepages.


--

*`system.process.cgroup.memory.stats.swap.bytes`*::
+
--
type: long

format: bytes

Swap usage, in bytes.


--

*`system.process.cgroup.memory.stats.unevictable.bytes`*::
+
--
type: long

format: bytes

Memory that cannot be reclaimed, in bytes.


--

[float]
== blkio fields

Block IO metrics.


*`system.process.cgroup.blkio.id`*::
+
--
type: keyword

ID of the cgroup.

--

*`system.process.cgroup.blkio.path`*::
+
--
type: keyword

Path to the cgroup relative to the cgroup subsystems mountpoint.


--

*`system.process.cgroup.blkio.total.bytes`*::
+
--
type: long

format: bytes

Total number of bytes transferred to and from all block devices by processes in the cgroup.


--

*`system.process.cgroup.blkio.total.ios`*::
+
--
type: long

Total number of I/O operations performed on all devices by processes in the cgroup as seen by the throttling policy.


--

[float]
== process.summary fields

Summary metrics for the processes running on the host.



*`system.process.summary.total`*::
+
--
type: long

Total number of processes on this host.


--

*`system.process.summary.running`*::
+
--
type: long

Number of running processes on this host.


--

*`system.process.summary.idle`*::
+
--
type: long

Number of idle processes on this host.


--

*`system.process.summary.sleeping`*::
+
--
type: long

Number of sleeping processes on this host.


--

*`system.process.summary.stopped`*::
+
--
type: long

Number of stopped processes on this host.


--

*`system.process.summary.zombie`*::
+
--
type: long

Number of zombie processes on this host.


--

*`system.process.summary.dead`*::
+
--
type: long

Number of dead processes on this host. It's very unlikely that it will appear but in some special situations it may happen.


--

*`system.process.summary.unknown`*::
+
--
type: long

Number of processes for which the state couldn't be retrieved or is unknown.


--

[float]
== raid fields

raid



*`system.raid.name`*::
+
--
type: keyword

Name of the device.


--

*`system.raid.activity_state`*::
+
--
type: keyword

activity-state of the device.


--

*`system.raid.disks.active`*::
+
--
type: long

Number of active disks.


--

*`system.raid.disks.total`*::
+
--
type: long

Total number of disks the device consists of.


--

*`system.raid.blocks.total`*::
+
--
type: long

Number of blocks the device holds.


--

*`system.raid.blocks.synced`*::
+
--
type: long

Number of blocks on the device that are in sync.


--

[float]
== socket fields

TCP sockets that are active.



*`system.socket.direction`*::
+
--
type: keyword

example: incoming

How the socket was initiated. Possible values are incoming, outgoing, or listening.


--

*`system.socket.family`*::
+
--
type: keyword

example: ipv4

Address family.


--

*`system.socket.local.ip`*::
+
--
type: ip

example: 192.0.2.1 or 2001:0DB8:ABED:8536::1

Local IP address. This can be an IPv4 or IPv6 address.


--

*`system.socket.local.port`*::
+
--
type: long

example: 22

Local port.


--

*`system.socket.remote.ip`*::
+
--
type: ip

example: 192.0.2.1 or 2001:0DB8:ABED:8536::1

Remote IP address. This can be an IPv4 or IPv6 address.


--

*`system.socket.remote.port`*::
+
--
type: long

example: 22

Remote port.


--

*`system.socket.remote.host`*::
+
--
type: keyword

example: 76-211-117-36.nw.example.com.

PTR record associated with the remote IP. It is obtained via reverse IP lookup.


--

*`system.socket.remote.etld_plus_one`*::
+
--
type: keyword

example: example.com.

The effective top-level domain (eTLD) of the remote host plus one more label. For example, the eTLD+1 for "foo.bar.golang.org." is "golang.org.". The data for determining the eTLD comes from an embedded copy of the data from http://publicsuffix.org.


--

*`system.socket.remote.host_error`*::
+
--
type: keyword

Error describing the cause of the reverse lookup failure.


--

*`system.socket.process.pid`*::
+
--
type: long

ID of the process that opened the socket.


--

*`system.socket.process.command`*::
+
--
type: keyword

Name of the command (limited to 20 chars by the OS).


--

*`system.socket.process.cmdline`*::
+
--
type: keyword



--

*`system.socket.process.exe`*::
+
--
type: keyword

Absolute path to the executable.


--

*`system.socket.user.id`*::
+
--
type: long

UID of the user running the process.


--

*`system.socket.user.name`*::
+
--
type: keyword

Name of the user running the process.


--

[float]
== socket.summary fields

Summary metrics of open sockets in the host system



[float]
== all fields

All connections



*`system.socket.summary.all.count`*::
+
--
type: integer

All open connections


--

*`system.socket.summary.all.listening`*::
+
--
type: integer

All listening ports


--

[float]
== tcp fields

All TCP connections



[float]
== all fields

All TCP connections



*`system.socket.summary.tcp.all.count`*::
+
--
type: integer

All open TCP connections


--

*`system.socket.summary.tcp.all.listening`*::
+
--
type: integer

All TCP listening ports


--

[float]
== udp fields

All UDP connections



[float]
== all fields

All UDP connections



*`system.socket.summary.udp.all.count`*::
+
--
type: integer

All open TCP connections


--

[float]
== uptime fields

`uptime` contains the operating system uptime metric.



*`system.uptime.duration.ms`*::
+
--
type: long

format: duration

The OS uptime in milliseconds.


--

[[exported-fields-traefik]]
== traefik fields

Traefik reverse proxy / load balancer metrics



[float]
== traefik fields

Traefik reverse proxy / load balancer metrics



[float]
== health fields

Metrics obtained from Traefik's health API endpoint



*`traefik.health.uptime.sec`*::
+
--
type: long

Uptime of Traefik instance in seconds


--

[float]
== response fields

Response metrics



*`traefik.health.response.count`*::
+
--
type: long

Number of responses


--

*`traefik.health.response.avg_time.us`*::
+
--
type: long

Average response time in microseconds


--

*`traefik.health.response.status_code`*::
+
--
type: object

Number of responses per status code


--

[[exported-fields-uwsgi]]
== uwsgi fields

uwsgi module



[float]
== uwsgi fields




[float]
== status fields

uwsgi.status metricset fields



*`uwsgi.status.total.requests`*::
+
--
type: long

Total requests handled


--

*`uwsgi.status.total.exceptions`*::
+
--
type: long

Total exceptions


--

*`uwsgi.status.total.write_errors`*::
+
--
type: long

Total requests write errors


--

*`uwsgi.status.total.read_errors`*::
+
--
type: long

Total read errors


--

*`uwsgi.status.total.pid`*::
+
--
type: long

Process id


--

*`uwsgi.status.worker.id`*::
+
--
type: long

Worker id


--

*`uwsgi.status.worker.pid`*::
+
--
type: long

Worker process id


--

*`uwsgi.status.worker.accepting`*::
+
--
type: long

State of worker, 1 if still accepting new requests otherwise 0


--

*`uwsgi.status.worker.requests`*::
+
--
type: long

Number of requests served by this worker


--

*`uwsgi.status.worker.delta_requests`*::
+
--
type: long

Number of requests served by this worker after worker is reloaded when reached MAX_REQUESTS


--

*`uwsgi.status.worker.exceptions`*::
+
--
type: long

Exceptions raised


--

*`uwsgi.status.worker.harakiri_count`*::
+
--
type: long

Dropped requests by timeout


--

*`uwsgi.status.worker.signals`*::
+
--
type: long

Emitted signals count


--

*`uwsgi.status.worker.signal_queue`*::
+
--
type: long

Number of signals waiting to be handled


--

*`uwsgi.status.worker.status`*::
+
--
type: keyword

Worker status (cheap, pause, sig, busy, idle)


--

*`uwsgi.status.worker.rss`*::
+
--
type: keyword

Resident Set Size. memory currently used by a process. if always zero try `--memory-report` option of uwsgi


--

*`uwsgi.status.worker.vsz`*::
+
--
type: long

Virtual Set Size. memory size assigned to a process. if always zero try `--memory-report` option of uwsgi


--

*`uwsgi.status.worker.running_time`*::
+
--
type: long

Process running time


--

*`uwsgi.status.worker.respawn_count`*::
+
--
type: long

Respawn count


--

*`uwsgi.status.worker.tx`*::
+
--
type: long

Transmitted size


--

*`uwsgi.status.worker.avg_rt`*::
+
--
type: long

Average response time


--

*`uwsgi.status.core.id`*::
+
--
type: long

worker ID


--

*`uwsgi.status.core.worker_pid`*::
+
--
type: long

Parent worker PID


--

*`uwsgi.status.core.requests.total`*::
+
--
type: long

Number of total requests served


--

*`uwsgi.status.core.requests.static`*::
+
--
type: long

Number of static file serves


--

*`uwsgi.status.core.requests.routed`*::
+
--
type: long

Routed requests


--

*`uwsgi.status.core.requests.offloaded`*::
+
--
type: long

Offloaded requests


--

*`uwsgi.status.core.write_errors`*::
+
--
type: long

Number of failed writes


--

*`uwsgi.status.core.read_errors`*::
+
--
type: long

Number of failed reads


--

[[exported-fields-vsphere]]
== vSphere fields

vSphere module



[float]
== vsphere fields




[float]
== datastore fields

datastore



*`vsphere.datastore.name`*::
+
--
type: keyword

Datastore name


--

*`vsphere.datastore.fstype`*::
+
--
type: keyword

Filesystem type


--

*`vsphere.datastore.capacity.total.bytes`*::
+
--
type: long

format: bytes

Total bytes of the datastore


--

*`vsphere.datastore.capacity.free.bytes`*::
+
--
type: long

format: bytes

Free bytes of the datastore


--

*`vsphere.datastore.capacity.used.bytes`*::
+
--
type: long

format: bytes

Used bytes of the datastore


--

*`vsphere.datastore.capacity.used.pct`*::
+
--
type: long

format: percent

Used percent of the datastore


--

[float]
== host fields

host



*`vsphere.host.name`*::
+
--
type: keyword

Host name


--

*`vsphere.host.cpu.used.mhz`*::
+
--
type: long

Used CPU in Mhz


--

*`vsphere.host.cpu.total.mhz`*::
+
--
type: long

Total CPU in Mhz


--

*`vsphere.host.cpu.free.mhz`*::
+
--
type: long

Free CPU in Mhz


--

*`vsphere.host.memory.used.bytes`*::
+
--
type: long

format: bytes

Used Memory in bytes


--

*`vsphere.host.memory.total.bytes`*::
+
--
type: long

format: bytes

Total Memory in bytes


--

*`vsphere.host.memory.free.bytes`*::
+
--
type: long

format: bytes

Free Memory in bytes


--

*`vsphere.host.network_names`*::
+
--
type: keyword

Network names


--

[float]
== virtualmachine fields

virtualmachine



*`vsphere.virtualmachine.host`*::
+
--
type: keyword

Host name


--

*`vsphere.virtualmachine.name`*::
+
--
type: keyword

Virtual Machine name


--

*`vsphere.virtualmachine.cpu.used.mhz`*::
+
--
type: long

Used CPU in Mhz


--

*`vsphere.virtualmachine.memory.used.guest.bytes`*::
+
--
type: long

format: bytes

Used Memory of Guest in bytes


--

*`vsphere.virtualmachine.memory.used.host.bytes`*::
+
--
type: long

format: bytes

Used Memory of Host in bytes


--

*`vsphere.virtualmachine.memory.total.guest.bytes`*::
+
--
type: long

format: bytes

Total Memory of Guest in bytes


--

*`vsphere.virtualmachine.memory.free.guest.bytes`*::
+
--
type: long

format: bytes

Free Memory of Guest in bytes


--

*`vsphere.virtualmachine.custom_fields`*::
+
--
type: object

Custom fields


--

*`vsphere.virtualmachine.network_names`*::
+
--
type: keyword

Network names


--

[[exported-fields-windows]]
== Windows fields

beta[] Module for Windows



[float]
== windows fields




[float]
== service fields

`service` contains the status for Windows services.



*`windows.service.id`*::
+
--
type: keyword

example: hW3NJFc1Ap

A unique ID for the service. It is a hash of the machine's GUID and the service name.


--

*`windows.service.name`*::
+
--
type: keyword

example: Wecsvc

The service name.


--

*`windows.service.display_name`*::
+
--
type: keyword

example: Windows Event Collector

The display name of the service.


--

*`windows.service.start_type`*::
+
--
type: keyword

The startup type of the service. The possible values are `Automatic`, `Boot`, `Disabled`, `Manual`, and `System`.


--

*`windows.service.state`*::
+
--
type: keyword

The actual state of the service. The possible values are `Continuing`, `Pausing`, `Paused`, `Running`, `Starting`, `Stopping`, and `Stopped`.


--

*`windows.service.exit_code`*::
+
--
type: keyword

For `Stopped` services this is the error code that service reports when starting to stopping. This will be the generic Windows service error code unless the service provides a service-specific error code.


--

*`windows.service.pid`*::
+
--
type: long

example: 1092

For `Running` services this is the associated process PID.


--

*`windows.service.uptime.ms`*::
+
--
type: long

format: duration

The service's uptime specified in milliseconds.


--

[[exported-fields-zookeeper]]
== ZooKeeper fields

ZooKeeper metrics collected by the four-letter monitoring commands.



[float]
== zookeeper fields

`zookeeper` contains the metrics reported by ZooKeeper commands.



[float]
== mntr fields

`mntr` contains the metrics reported by the four-letter `mntr` command.



*`zookeeper.mntr.hostname`*::
+
--
type: keyword

ZooKeeper hostname.


--

*`zookeeper.mntr.approximate_data_size`*::
+
--
type: long

Approximate size of ZooKeeper data.


--

*`zookeeper.mntr.latency.avg`*::
+
--
type: long

Average latency between ensemble hosts in milliseconds.


--

*`zookeeper.mntr.ephemerals_count`*::
+
--
type: long

Number of ephemeral znodes.


--

*`zookeeper.mntr.followers`*::
+
--
type: long

Number of followers seen by the current host.


--

*`zookeeper.mntr.max_file_descriptor_count`*::
+
--
type: long

Maximum number of file descriptors allowed for the ZooKeeper process.


--

*`zookeeper.mntr.latency.max`*::
+
--
type: long

Maximum latency in milliseconds.


--

*`zookeeper.mntr.latency.min`*::
+
--
type: long

Minimum latency in milliseconds.


--

*`zookeeper.mntr.num_alive_connections`*::
+
--
type: long

Number of connections to ZooKeeper that are currently alive.


--

*`zookeeper.mntr.open_file_descriptor_count`*::
+
--
type: long

Number of file descriptors open by the ZooKeeper process.


--

*`zookeeper.mntr.outstanding_requests`*::
+
--
type: long

Number of outstanding requests that need to be processed by the cluster.


--

*`zookeeper.mntr.packets.received`*::
+
--
type: long

Number of ZooKeeper network packets received.


--

*`zookeeper.mntr.packets.sent`*::
+
--
type: long

Number of ZooKeeper network packets sent.


--

*`zookeeper.mntr.pending_syncs`*::
+
--
type: long

Number of pending syncs to carry out to ZooKeeper ensemble followers.


--

*`zookeeper.mntr.server_state`*::
+
--
type: keyword

Role in the ZooKeeper ensemble.


--

*`zookeeper.mntr.synced_followers`*::
+
--
type: long

Number of synced followers reported when a node server_state is leader.


--

*`zookeeper.mntr.version`*::
+
--
type: keyword

ZooKeeper version and build string reported.


--

*`zookeeper.mntr.watch_count`*::
+
--
type: long

Number of watches currently set on the local ZooKeeper process.


--

*`zookeeper.mntr.znode_count`*::
+
--
type: long

Number of znodes reported by the local ZooKeeper process.


--

