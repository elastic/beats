////
This file is generated! See scripts/docs_collector.py
////

[[metricbeat-module-system]]
== System Module

The System module allows you to monitor your servers. Because the System module always applies to the local
server, the `hosts` config option is not needed.

[float]
=== Module-Specific Configuration Notes

The System module has these additional config options:

*`processes`*:: When the `process` metricset is enabled, you can use the `processes` option to define a list of
regexp expressions to filter the processes that are reported. For more complex filtering, you should use the
<<configuration-processors, processors>> configuration option.
+
The following example config returns metrics for all processes:
+
[source,yaml]
----
metricbeat.modules:
- module: system
  metricsets: ["process"]
  processes: ['.*']
----

*`process.include_top_n`*:: These options allow you to filter out all processes
that are not in the top N by CPU or memory, in order to reduce the number of
documents created. If both the `by_cpu` and `by_memory` options are used, the
union of the two sets is included.

*`process.include_top_n.enabled`*:: Set to false to disable the top N feature and
include all processes, regardless of the other options. The default is `true`,
but nothing is filtered unless one of the other options (`by_cpu` or `by_memory`)
is set to a non-zero value.

*`process.include_top_n.by_cpu`*::  How many processes to include from the top
by CPU. The processes are sorted by the `system.process.cpu.total.pct` field.
The default is 0.

*`process.include_top_n.by_memory`*:: How many processes to include from the top
by memory. The processes are sorted by the `system.process.memory.rss.bytes`
field. The default is 0.

*`process.cgroups.enabled`*:: When the `process` metricset is enabled, you can
use this boolean configuration option to disable cgroup metrics. By default
cgroup metrics collection is enabled.
+
The following example config disables cgroup metrics on Linux.
+
[source,yaml]
----
metricbeat.modules:
- module: system
  metricsets: ["process"]
  process.cgroups.enabled: false
----
*`cpu_ticks`*:: When the `cpu` or `core` metricset is enabled, you can specify `cpu_ticks: true` to report CPU ticks in addition to CPU percentages stats. For example:
+
[source,yaml]
----
metricbeat.modules:
- module: system
  metricsets: ["cpu", "core"]
  cpu_ticks: true
----

[float]
=== Dashboard

The System module comes with a predefined dashboard. For example:

image::./images/metricbeat_system_dashboard.png[]


[float]
=== Example Configuration

The System module supports the standard configuration options that are described
in <<configuration-metricbeat>>. Here is an example configuration:

[source,yaml]
----
metricbeat.modules:
- module: system
  enabled: true
  period: 10s
  metricsets:
    - cpu
    - load
    - memory
    #- core
    #- diskio
    - network
    - process_summary
    - process
    #- socket
  processes: ['.*']
  process.include_top_n:
    by_cpu: 5      # include top 5 processes by CPU
    by_memory: 5   # include top 5 processes by memory
- module: system
  enabled: true
  period: 1m
  metricsets:
    - filesystem
    - fsstat
  filters:
    - drop_event.when.regexp.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
----

[float]
=== Metricsets

The following metricsets are available:

* <<metricbeat-metricset-system-core,core>>

* <<metricbeat-metricset-system-cpu,cpu>>

* <<metricbeat-metricset-system-diskio,diskio>>

* <<metricbeat-metricset-system-filesystem,filesystem>>

* <<metricbeat-metricset-system-fsstat,fsstat>>

* <<metricbeat-metricset-system-load,load>>

* <<metricbeat-metricset-system-memory,memory>>

* <<metricbeat-metricset-system-network,network>>

* <<metricbeat-metricset-system-process,process>>

* <<metricbeat-metricset-system-process_summary,process_summary>>

* <<metricbeat-metricset-system-socket,socket>>

include::system/core.asciidoc[]

include::system/cpu.asciidoc[]

include::system/diskio.asciidoc[]

include::system/filesystem.asciidoc[]

include::system/fsstat.asciidoc[]

include::system/load.asciidoc[]

include::system/memory.asciidoc[]

include::system/network.asciidoc[]

include::system/process.asciidoc[]

include::system/process_summary.asciidoc[]

include::system/socket.asciidoc[]

