// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: performance.go
//
// Generated by this command:
//
//	mockgen -source=performance.go -destination=mock_performance.go -package client -mock_names=Logouter=MockPerfManager
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	performance "github.com/vmware/govmomi/performance"
	types "github.com/vmware/govmomi/vim25/types"
	gomock "go.uber.org/mock/gomock"
)

// MockPerfManager is a mock of PerfManager interface.
type MockPerfManager struct {
	ctrl     *gomock.Controller
	recorder *MockPerfManagerMockRecorder
	isgomock struct{}
}

// MockPerfManagerMockRecorder is the mock recorder for MockPerfManager.
type MockPerfManagerMockRecorder struct {
	mock *MockPerfManager
}

// NewMockPerfManager creates a new mock instance.
func NewMockPerfManager(ctrl *gomock.Controller) *MockPerfManager {
	mock := &MockPerfManager{ctrl: ctrl}
	mock.recorder = &MockPerfManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerfManager) EXPECT() *MockPerfManagerMockRecorder {
	return m.recorder
}

// AvailableMetric mocks base method.
func (m *MockPerfManager) AvailableMetric(ctx context.Context, entity types.ManagedObjectReference, interval int32) (performance.MetricList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableMetric", ctx, entity, interval)
	ret0, _ := ret[0].(performance.MetricList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableMetric indicates an expected call of AvailableMetric.
func (mr *MockPerfManagerMockRecorder) AvailableMetric(ctx, entity, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableMetric", reflect.TypeOf((*MockPerfManager)(nil).AvailableMetric), ctx, entity, interval)
}

// Query mocks base method.
func (m *MockPerfManager) Query(ctx context.Context, spec []types.PerfQuerySpec) ([]types.BasePerfEntityMetricBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, spec)
	ret0, _ := ret[0].([]types.BasePerfEntityMetricBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPerfManagerMockRecorder) Query(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPerfManager)(nil).Query), ctx, spec)
}

// ToMetricSeries mocks base method.
func (m *MockPerfManager) ToMetricSeries(ctx context.Context, series []types.BasePerfEntityMetricBase) ([]performance.EntityMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMetricSeries", ctx, series)
	ret0, _ := ret[0].([]performance.EntityMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToMetricSeries indicates an expected call of ToMetricSeries.
func (mr *MockPerfManagerMockRecorder) ToMetricSeries(ctx, series any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMetricSeries", reflect.TypeOf((*MockPerfManager)(nil).ToMetricSeries), ctx, series)
}
