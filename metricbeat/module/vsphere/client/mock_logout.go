// Code generated by MockGen. DO NOT EDIT.
// Source: logout.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogouter is a mock of Logouter interface.
type MockLogouter struct {
	ctrl     *gomock.Controller
	recorder *MockLogouterMockRecorder
}

// MockLogouterMockRecorder is the mock recorder for MockLogouter.
type MockLogouterMockRecorder struct {
	mock *MockLogouter
}

// NewMockLogouter creates a new mock instance.
func NewMockLogouter(ctrl *gomock.Controller) *MockLogouter {
	mock := &MockLogouter{ctrl: ctrl}
	mock.recorder = &MockLogouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogouter) EXPECT() *MockLogouterMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockLogouter) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockLogouterMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLogouter)(nil).Logout), ctx)
}
