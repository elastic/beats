// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package redis

import (
	"github.com/elastic/beats/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "redis", asset.ModuleFieldsPri, AssetRedis); err != nil {
		panic(err)
	}
}

// AssetRedis returns asset data.
// This is the base64 encoded gzipped contents of ../metricbeat/module/redis.
func AssetRedis() string {
	return "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"
}
