// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package elasticsearch

import (
	"github.com/elastic/beats/v7/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "elasticsearch", asset.ModuleFieldsPri, AssetElasticsearch); err != nil {
		panic(err)
	}
}

// AssetElasticsearch returns asset data.
// This is the base64 encoded gzipped contents of module/elasticsearch.
func AssetElasticsearch() string {
	return "eJzsXU+P27iSv/enIPo0D0gEvGsf9i3w/uxmgMkMdjJ7WSw0tFS2mUiiQlJO9376BUlJpiSSoiSq2wnch8HEtn71q+K/YqlYfI++wMsTggJzQTIOmGXnB4QEEQU8ocd/mp8/PiCUA88YqQWh1RP6tweEEBr8BpU0bwp4QIhBAZjDEzrhB4Q4CEGqE39C//PIefH4Dj2ehagf/1d+d6ZMpBmtjuT0hI644PL5I4Ei509KxHtU4RKeUFY0XABLucAC1DcIiZdaCmG0qdtPzCfNpyuaA0/PmJ/7r7rHcUEwNz6tsTiPrJK0whMpnKv/QmKB7KRdgHFCq2iixnidnBIrk0gm0WTZMDt56hdp05A8mjgLpCmt4VEltXCdBEFK4AKX9YNLgAZ//Pf+l4/WTmnwd2HYCbaP9SrThmVgGj+8i69uFiktsdhf/nc9YP90b6uMpbgRND3SoqDf1EDmywdyUx6ApfSYHjEpIO/QSJWTDFb2lowlBrNEIydD5CSjTSXm+TAoqYB0MF2lDL42wEVUel5Bs2x5k2XA+bEp9rBgi+42odkp1nUEfsYsT9fORBlLJgAd8tCwq/EdMJ2UAnAOTJoGnlfL0CDJEKSToI2/WUYH45DS6nEq6AEXaXaG7EtNidH3VurkBhxJLvFzyuFrWtGtIi1IE1vG07O367ymvfQIuvZiPdrKh7qpBPLN1vWidTJpI7jAVU6qU8oA59vnzH4uNKATCe2YHE0G3xiJMW1bKShsBwct99Acj3KaroFh6W6nwx8vZWGCJj1oCANO/g9SUqWHF7FhZRjIl5DJEM/SzetatsImP3rY1+2AE8ndXiWeaCfiRLaChoiiXYC9+0sFLvRgk/5tWpKiIOubWcNJJD3KymkLGxLb5RGeIdtFuoFvY2L4P5Fnmyuyb7LpvcWosnvX0D3JdcOfK9nbO9kVMFCsnA0EROjeHsxOrJpntilqgRj2Zj27Re7Ceo3w99vYa5TRcX1LVNtzY0tvu64pebBTkJvKlVuF45Se+Zjt0UkzD75xobiQTDR8waTAh8K6rvqspXbVOqBxlI1Vlpi9JD1c4sKyt8eVEKEDs27X0GYvP6IPFVlnEevPQuzWaasHmzl7jX2sKfWpDccE1XQen6WaWCNT1eM3Plc9gDeQ7fulIx6xZOiqLSupTtH6tgLUkz2ppvN9oNW6eEhHL7nCmnO+304Oao7Bt5KRalJXC4awEmdGhSggvs0GyMvM1i8MsrVzLHC0/lFCSdmLc9+0UNeeX6JxV8/xXxtgL2mGszPcqKoGw63Kti7FTas74LhV4f7VXRxNdVPEGq/tN1fQ9TNci7FthhvyWTW/Xe1+KqGK6Dm5iASrpvlsmrBzmqUXXDTA07bLb+/tPbEr+No+jwbT9zPk6YGIlIPYge0APwZhvagqD4ntwNeEj0E3PsMIpCrKyj26psKNQVCF8PdgqIFjUOSCMshTPR3twHSAH4OwAFamF8gEZXvwNeFj0d2LZxSCbUQ4LXG9A00DfQ3ZjuTnS7lp83fKIi7MRaG7xz5xjSL3bpBd2HP4FhVsb5PGfzPt/flSJqcsudokoUWeXPG9O34UEKJw0J71SGPxtzqooeQ74i+0mcQdhhi33qpKg++6XScarGpZwx2KNqGcQc68+HnDtCvVLaFMJFRS4udNC4Li03DIYxGSWJEY1cAyWLMvmhKqs9Bt0eC1wyDLKCSFzo9JtwU1s7qJ1g8LivMUX4Dh0zhU4gf2gZsC/joeM93fTNtRnmR1k7T8TokTZ27UZjb2GzyBusGZpxdtsVXD8QnSCld0ZTReGk0RSFqaiYJMnNH9kIE47W5xtM2OPP3aUIHTkmQsispJduSJwkyaNSqjUfbx7sv3NR8TCly3kx2h+YZVcGgQ+Vkywo66jl81UCnSaReVdzm06zQYYUfVQLkfPbR3+K0nb3B3DsY54sOwzD5jklaC0SL19e1gA7RbvxDM0EFZkJIIn4uyhqACdfoqS+jpCTwyPT2FL6XXR6MYzYDfjsOx2plrFVHDarkbJ87q1XxNabHJFIem+BLNFl8baGxe14wlDF0SySdROJuC/gw+Qyask/ZSMh3U6rcqJxg/9aYWPoG4GQNLLpvtOz4N8OYWVoRuxsaazWYrx38nu9XM1xefN2Hn9tvNhlavu27JzjoB6lbMrNkstvIoCWtl4mWKi23Lbc1IiRmZeD4bE7imGWF+UB/wBNyZoICCNia2ttVzUpfy2RtllK3l2RUtTF/bnaktD2SfdFvrPOyH9MGi4HQUFMmGOkXFzFoJaOfAFJ4dOboyfX6gcai1do7Bjsy4voJdRdcU2h0Ur2yHsb/AyzfKzBXCUqOh+xvWamhxlZTEKdUS0o4gk+Ruifqsfly5CtMq1Vo5YVGC8Xh5dpGdISz/PtIc0Id/WOWMmj+GpGHLm8J0CQiruAOlBeBqmbgPHIkzKGOr/9H46t9/sxMoaPZl6Dtsp9CBIqjwoYAc0aqn9bdpf8ymJ7/HHcMj8++Mcv6+6/AM6oJkKh8ejc9aDGuldH++Puc8n468vcJ7Jur6aEFHk3LooeAACMuZ/etTpBJwMvRxOwdqYYvmIYzPKs5qM3nYcdRwEdDkwJf3aUe/mJzF2maZ64GwXVZpy3HBWcVtOLbDasFAw1NtP76exkH0H09Z67AwT5/HGxrTU+xBKk5Oss3syOfVM8quRNNux8HgLaozawEb4pI6OMECRlPgDZrCvkarQibR+oEtVIxmXE8074zJv4+4BESPLWOHpKtDail74rHNIia/4GdSNiXisstUGbSvtCW5fpR2vmLLVvkxTra+EjEe0tYG7Q67f09N2nGeaVRlxEQbe4dm/di3omw4JQx9I+JMdEv6uXnLFcRneBWneUGOfur2DJD/RbrGVLHuTav1OTJahvdLFQ7ipMogbX35FY5vkGafSAnvEKlQyd8hJXHIXopHRxDZGSZKxB5Wi4j/h5KBrjKQOq0kh//Q9Lc/VQXzdZXaCSB9DbI6q+YsQHHXv1kA4i9H4oWyhaLmEyd8QYB2+799y28WPfXTcSGhUdRrUgx1COtaCIYhonHl0WUYc+0897y1GulyCGum4HwYxfrohpic2Vkajn46MYDqHXoBOYzfIQb5X+zROtWawX0jIDLIFQeiAqhJUNe6po/ZBpsv1j5fvFWp1/6/Dd9sD5cT7Zk3ZmfdT1TgwphoFR+5tnU0HXysQdSYxrAKGFrDy2GdOa5OiwZ/DwU5kUMBwYax1FvwUlpmFQv60CZLxS+wiISeMcPovXqsYftBw+0ycOMMm1bhgP6h/JXp4PDtt2fZ/K7cZbd11h/N3+wqj+yktfeYaT45Yg9aWtbLPL1+4xpWumRLF/tFAaOGy00EZYbIiUsHFSPZtPT7Al/unwohgisHz5A10ltOa1qQbJzHvcGrm74iRMGOkMB8nNfqZ+Nj5Hk9asI6eucMpflQRb+fUGf+NkFkuMqgUPXVPDj2N5ImTo0ZVCKVKk1ffy2jZHn3ZQK4s+z9Z1KMRZIJ3znJmaisEZdtqopUp6TC1r2wF22QjqdKxlqHiYXFnH97nWh1bkAXKEZtXEhL9Ixc9epTPgptxbPdmYkzFu0M1qXzU8bRGV+g59RGWdQrdtWETW1Xoo2WR39XmDWM2fP6ty5Ff9fIZqzj+g6r1ac3lnu19FcljBLFc9MKaydXjHbxYjUGWL5Kxc03+SD5eBJO4qb85TSbK4EUzzHKadaoqhfIDCy7u6Eil0MB9sze6PS0pMU0VQUXW63uQKpHykos2mSTLapICl0QX3GWCihUD/mwOljxrKyJ9WLniQVVRdnbtFf+peFJH170C5OWqsXc9vkqYZDRCwwOJr7BxOVILlq+HustY6fUIHvQlCfh402UI6ESyS623Y9ZJa9KkPvEGkBktNGzy+ZiWixgg87/1WmrcC3dDA02BewEIomZdvlJQeol2dnKWuyZcvvZtM2CJTLCec6Ac/RTRpsiRwdAH37rP6RM/UjycQSCW5Jxl26T5HABt/cNdYFV1Pb5XUH626cVG7d9TMEx2qclGbd9TJL2XO5B0vrbTs7xj/Pcfb27r3f39fbz9cZa7X9sx5sHN9D306//+NXxu8DUQfdhtP1EzpdImQsqhrPqPYP5UukBKoRIfa1jd14N4hTWC6kw47EVWtB3htHdkCp1mwX3p0GmBS1QlGZadAPEpj6HQvOyd5DnjMZH74uv0ivGkvHl9GZyfa0YSfQ9/rg7vbtPevdJZ/nffdK7T3r3Se8+6d0njSHv7pN+rz5pnztcJJ/p4WGMuyBWW5rubLS3aKsi1H9U5GsDqCzQZ3pwR/CdJxxWCf2ZHjSkXVqOBdYF8/vCkuoy3oyy3FpIf+1bxN86cJ0cDJepg2bjRKoLLkie5lhAVD6fzuahIa0wV+fiEBBxBoYwKgnnpDpJQqB7CaLyc/VvlYyk339UVKADoBozDrnlvdCkWwdVW/EoMHp+ebe2nzjZ0M1UIZUW1d6qw0tM3GoHCPv5v39BH6ojDUvt3n7OJsiVl6SsBjAZtNsNVYefVJ5iu3tvPP4TcI0kg8FeQ+owv80wlZi/bmFnHUr8vF6FilZv3xQfafU+QnN0urxli/SqhLfK9Y2ormq8Q8WjYweOJDbk6jyuNpp1Zt5+3vH3/nwFwgfaCAQ4O7cv7iuE7dXAtvkpC4/R3FToDp6lseRC2wXHbjdsd0PBru8tzNVFEBdEtLZGP1dFN5XQAHKuS5NRlC36TJPNqo5mm+71wobbQlsjKO9NtQvgtsfdBkEv6y3L6DvrCr4bo783XfYveBujU4dcvzwDN57td1E5/MLiAOXnFxVzll1w93Bk2UvuEY4sOugW3sgyw+7VjSx00RW5kWUvue52B9GvLXPBdbQbJRtBn/7iwWh7k512uB283LfuMoW+1ii23gm0SIjtbqJxk9aUFvH2m/aLfyO4G56+guLYPWiXgXTRKteWwqRcA/5yM5x/A/wllHR6S8ZWxMswi3uvaH1t4n/osJl35+m6Uvk+Xt6a8328vDbxkPHCG3YhF+qurnkfMm/H+T5kXpu4a8iYLt7g/viYbp5xC/0uwzFCZHBLLHB80/6PoKO1kxxjXq8wPpI5j4nCuvu/SAGIv3ABpUdMiM11iO4WhnDfAgw2ptNFJoQvmKgSUW/Oqg/g0XT8MndIY8sonL9WK0Z+YWCqJgpLursG+nGe7AOtL6zYjt0bIGJtpp1u8C8ozlN8OSV/Hec4zeg4IOdiEGG9qBucZaK9Qdt573rg0mG34jzTObYDGUeefG2owIm1KnEgYzTKq5xF8lEPoW8KhALXHPK0BkZoPj8MAvVBowRn48jCXiJC7+wPgB++Bty/GwVcuY8C8v+GqPP35KNQQ4esdeYuYu4G/AiCxxlZ9nvmnUJCYsj2S+jRprl9t7MS/guMvbYYAs3ePTyD1eFM74X/QRX1X9HyQ6m6b7LCbelqu6j8B1H1YQzUFYeuQZXDTEe1fBdnlv5pA/xTrXOYVBxh1H6hqgabSGaoZ01+KQcmUspct2otP4HxQUGiKeR1ASKUEWGv7bbmBIoFrh9/qnqUVdKGalQJ+hdlCJ5xWRdSoUa8b6+ZsS+L7TXVuhtPIjSrj7qQUqUzDq/07zUf3YqzuEu2NzCpzrOpj+1Wyk+cCUdE370bUNbPehNXnHNGiom/omDMw1+fVDYrFhAim0FBM6wKsqss+Cpu+Tzz3uP2EjLMO6Ht7VfJw/8HAAD//wiraXo="
}
