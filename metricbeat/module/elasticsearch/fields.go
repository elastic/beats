// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by beats/dev-tools/cmd/asset/asset.go - DO NOT EDIT.

package elasticsearch

import (
	"github.com/elastic/beats/v7/libbeat/asset"
)

func init() {
	if err := asset.SetFields("metricbeat", "elasticsearch", asset.ModuleFieldsPri, AssetElasticsearch); err != nil {
		panic(err)
	}
}

// AssetElasticsearch returns asset data.
// This is the base64 encoded gzipped contents of module/elasticsearch.
func AssetElasticsearch() string {
	return "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"
}
