=== Audit Kernel Metricset

experimental[]

The `kernel` metricset receives audit events from the Linux Audit Framework that
is a part of the Linux kernel.

This metricset is available only for Linux.

[float]
=== How it Works

This metricset establishes a subscription to the `kernel` to receive the events
as they occur. So unlike most other metricsets, the `period` configuration
option is unused because it is not implemented using polling.

The Linux kernel only supports a single subscriber to the audit events so this
metricset cannot be used simultaneously with a service like `auditd`. `auditd`
should be disabled if this metricset is being used. If you wish to continue to
use `auditd` instead of this metricset to receive audit messages from the kernel
then consider using {filebeat}/filebeat-module-auditd.html[Filebeat] to collect the daemon's
log files.

The Linux Audit Framework can send multiple messages for a single auditable
event. For example, a `rename` syscall causes the kernel to sent eight separate
messages. Each message describes a different aspect of the activity that is
occurring (the syscall itself, file paths, current working directory, process
title). This metricset will combine all of the data from each of the messages
into a single event.

Messages for one event can be interleaved with messages from another event. This
metricset will buffer the messages in order to combine related messages into a
single event even if they arrive interleaved or out of order.

[float]
=== Configuration Options

This metricset has some configuration options for tuning its behavior. Below
is example showing all configuration options with their default values.

[source,yaml]
----
- module: audit
  metricsets: ["kernel"]
  kernel.resolve_ids: true
  kernel.backlog_limit: 8196
  kernel.rate_limit: 0
  kernel.include_raw_message: false
  kernel.include_warnings: false
----

*`kernel.resolve_ids`*:: This boolean setting enables the resolution of UIDs and
GIDs to their associated names. The default value is true.

*`kernel.backlog_limit`*:: This controls the maximum number of audit messages
that will be buffered by kernel.

*`kernel.rate_limit`*:: This sets a rate limit on the number of messages/sec
delivered by the kernel. The default is 0 which means to disable rate limiting.
Changing this value to anything other than zero can cause messages to be lost.
The preferred approach to reduce the messaging rate is be more selective in the
audit ruleset.

*`kernel.include_raw_message`*:: This boolean setting causes Metricbeat to
include each of the raw messages that contributed to the event in the document
as a field called `messages`. The default value is false. This setting is
primarily used for development and debugging purposes.

*`kernel.include_warnings`*:: This boolean setting causes Metricbeat to include
as warnings any issues that were encountered while parsing the raw messages.
The default value is false. This setting is primarily used for development and
debugging purposes.

////
TODO (andrewkroh): Uncomment when rules can be installed by Metricbeat.
*`kernel.audit_rules`*:: A string containing the audit rules that should be
installed to the kernel. There should be one rule per line. Comments can be
embedded in the string using `#` as a prefix. The format for rules is the same
used by the Linux `auditctl` utility.
////

[float]
=== Audit Rules

// TODO (andrewkroh): Uncomment when rules can be installed by Metricbeat.
WARNING: This feature is not complete yet. Currently you must manually install
audit rules using `auditctl`.

The audit rules are where you configure the activities that are audited. These
rules are configured as either syscalls or files that should be monitored. For
example you can track all `connect` syscalls or file system writes to
`/etc/passwd`.

Auditing a large number of syscalls can place a heavy load on the system so
consider carefully the rules you define and try to apply filters in the rules
themselves to be as selective as possible.

The kernel evaluates the rules in the order in which they were defined so place
the most active rules first in order to speed up evaluation.

You can assign keys to each rule for better identification of the rule that
triggered an event and easier filtering later in Elasticsearch.

[source,yaml]
----
metricbeat.modules:
- module: audit
  metricsets: ["kernel"]
  kernel.audit_rules: |
    # Things that affect identity.
    -w /etc/group -p wa -k identity
    -w /etc/passwd -p wa -k identity
    -w /etc/gshadow -p wa -k identity
    -w /etc/shadow -p wa -k identity

    # Unauthorized access attempts to files (unsuccessful).
    -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access
    -a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access
    -a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat,open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access
    -a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat,open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access
----
