// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package perfmon

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

var (
	modpdh = syscall.NewLazyDLL("pdh.dll")

	procPdhOpenQuery                = modpdh.NewProc("PdhOpenQuery")
	procPdhAddEnglishCounterW       = modpdh.NewProc("PdhAddEnglishCounterW")
	procPdhCollectQueryData         = modpdh.NewProc("PdhCollectQueryData")
	procPdhGetFormattedCounterValue = modpdh.NewProc("PdhGetFormattedCounterValue")
)

func _PdhOpenQuery(dataSource uintptr, userData uintptr, query *uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procPdhOpenQuery.Addr(), 3, uintptr(dataSource), uintptr(userData), uintptr(unsafe.Pointer(query)))
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = nil
		}
	}
	return
}

func _PdhAddCounter(query uintptr, counterPath string, userData uintptr, counter *uintptr) (err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(counterPath)
	if err != nil {
		return
	}
	return __PdhAddCounter(query, _p0, userData, counter)
}

func __PdhAddCounter(query uintptr, counterPath *uint16, userData uintptr, counter *uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procPdhAddEnglishCounterW.Addr(), 4, uintptr(query), uintptr(unsafe.Pointer(counterPath)), uintptr(userData), uintptr(unsafe.Pointer(counter)), 0, 0)
	if r1 == 0 {
		// Ignoring error 2147485649. This error means PDH_CSTATUS_NO_INSTANCE. See here for description https://msdn.microsoft.com/en-us/library/windows/desktop/aa371894%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396
		if e1 != 0 && e1 != 2147485649 {
			err = error(e1)
		} else {
			err = nil
		}
	}
	return
}

func _PdhCollectQueryData(query uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procPdhCollectQueryData.Addr(), 1, uintptr(query), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = nil
		}
	}
	return
}

func _PdhGetFormattedCounterValue(counter uintptr, format uint32, counterType int, value *PdhCounterValue) (err error) {
	r1, _, e1 := syscall.Syscall6(procPdhGetFormattedCounterValue.Addr(), 4, uintptr(counter), uintptr(format), uintptr(counterType), uintptr(unsafe.Pointer(value)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = nil
		}
	}
	return
}
