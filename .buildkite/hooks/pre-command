#!/usr/bin/env bash

set -euo pipefail

source .buildkite/env-scripts/util.sh

# Secrets must be redacted
# https://buildkite.com/docs/pipelines/managing-log-output#redacted-environment-variables
AWS_SERVICE_ACCOUNT_SECRET_PATH="kv/ci-shared/platform-ingest/aws_account_auth"
PRIVATE_CI_GCS_CREDENTIALS_PATH="kv/ci-shared/platform-ingest/gcp-platform-ingest-ci-service-account"
DOCKER_REGISTRY_SECRET_PATH="kv/ci-shared/platform-ingest/docker_registry_prod"
GITHUB_TOKEN_VAULT_PATH="kv/ci-shared/platform-ingest/github_token"

if [[ "$BUILDKITE_PIPELINE_SLUG" == "beats" || "$BUILDKITE_PIPELINE_SLUG" == "filebeat" || "$BUILDKITE_PIPELINE_SLUG" == "auditbeat" ]]; then
  source .buildkite/env-scripts/env.sh
  if [[ -z "${GO_VERSION-""}" ]]; then
    export GO_VERSION=$(cat "${WORKSPACE}/.go-version")
  fi

  # Images with prefix "platform-ingest-beats-*" has Go pre-setup.
  # Image itself takes care of Go version download/installation based on .go-version file
  if [[ "$BUILDKITE_STEP_KEY" == macos* ]]; then
    if [[ -z "${GO_VERSION-""}" ]]; then
      GO_VERSION=$(cat "${WORKSPACE}/.go-version")
      export GO_VERSION
    fi

    # To prevent "OSError: [Errno 24] Too many open files"
    ulimit -Sn 150000
    echo "--- Ulimit: $(ulimit)"

    echo "--- Setting up environment"
    add_bin_path
    with_go
    with_mage
  fi

  if [[ "$BUILDKITE_STEP_KEY" == *packaging* ]]; then
    DOCKER_USERNAME_SECRET=$(retry_with_count 5 vault kv get -field user "${DOCKER_REGISTRY_SECRET_PATH}")
    DOCKER_PASSWORD_SECRET=$(retry_with_count 5 vault kv get -field password "${DOCKER_REGISTRY_SECRET_PATH}")
    GITHUB_TOKEN_SECRET=$(retry_with_count 5 vault kv get -field token ${GITHUB_TOKEN_VAULT_PATH})

    export DOCKER_USERNAME_SECRET
    export DOCKER_PASSWORD_SECRET
    export GITHUB_TOKEN_SECRET

    docker login -u "${DOCKER_USERNAME_SECRET}" -p "${DOCKER_PASSWORD_SECRET}" "${DOCKER_REGISTRY}" 2>/dev/null

    github_username=$(retry_with_count 5 vault kv get -field username ${GITHUB_TOKEN_VAULT_PATH})
    github_email=$(retry_with_count 5 vault kv get -field email ${GITHUB_TOKEN_VAULT_PATH})

    git config user.name "$github_username"
    git config user.email "$github_email"
  fi
fi

ENABLED_BEATS_PIPELINES_SLUGS=(
  "auditbeat"
  "heartbeat"
  "filebeat"
  "beats-metricbeat"
  "beats-winlogbeat"
  "beats-xpack-winlogbeat"
  "beats-xpack-dockerlogbeat"
  "beats-xpack-auditbeat"
  "beats-xpack-metricbeat"
  "beats-xpack-heartbeat"
  "deploy-k8s"
)

for slug in "${ENABLED_BEATS_PIPELINES_SLUGS[@]}"; do
  if [[ "$BUILDKITE_PIPELINE_SLUG" == "$slug" ]]; then
    source .buildkite/scripts/setenv.sh
    break
  fi
done

if [[ "$BUILDKITE_PIPELINE_SLUG" == *"xpack-metricbeat"* || "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-filebeat" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == *"extended-cloud-test"* ]]; then
    BEATS_AWS_SECRET_KEY=$(retry_with_count 5 vault kv get -field secret_key ${AWS_SERVICE_ACCOUNT_SECRET_PATH})
    export BEATS_AWS_SECRET_KEY
    BEATS_AWS_ACCESS_KEY=$(retry_with_count 5 vault kv get -field access_key ${AWS_SERVICE_ACCOUNT_SECRET_PATH})
    export BEATS_AWS_ACCESS_KEY
  fi
fi

if [[ "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-packetbeat" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == "extended-win-10-system-tests" || "$BUILDKITE_STEP_KEY" == "mandatory-win-2022-system-tests" ]]; then
    PRIVATE_CI_GCS_CREDENTIALS_SECRET=$(retry_with_count 5 vault kv get -field plaintext -format=json ${PRIVATE_CI_GCS_CREDENTIALS_PATH})
    export PRIVATE_CI_GCS_CREDENTIALS_SECRET
  fi
fi

if [[ "$BUILDKITE_PIPELINE_SLUG" == "deploy-k8s" ]]; then
  source .buildkite/env-scripts/env.sh
  if [[ "$BUILDKITE_STEP_KEY" == k8s-test* ]]; then
    .buildkite/deploy/kubernetes/scripts/setup-k8s-env.sh
  fi
fi
