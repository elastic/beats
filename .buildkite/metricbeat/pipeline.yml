# yaml-language-server: $schema=https://raw.githubusercontent.com/buildkite/pipeline-schema/main/schema.json
env:
  IMAGE_UBUNTU_X86_64: "family/core-ubuntu-2204"
  IMAGE_UBUNTU_ARM_64: "core-ubuntu-2004-aarch64"
  IMAGE_WIN_2016: "family/core-windows-2016"
  IMAGE_WIN_2019: "family/core-windows-2019"
  IMAGE_WIN_2022: "family/core-windows-2022"
  IMAGE_MACOS_X86_64: "generic-13-ventura-x64"
  GO_AGENT_IMAGE: "golang:${GO_VERSION}"
  PIPELINE_NAME: "metricbeat"

steps:

  - input: "Input Parameters"
    key: "input-run-all-stages"
    fields:
    - select: "Metricbeat - runAllStages"
      key: "runAllStages"
      options:
        - label: "True"
          value: "true"
        - label: "False"
          value: "false"
      default: "false"
    - select: "Metricbeat - runMacOsTests"
      key: "UI_MACOS_TESTS"
      options:
        - label: "True"
          value: "true"
        - label: "False"
          value: "false"
      default: "false"
    if: "build.source == 'ui'"

  - wait: ~
    if: "build.source == 'ui'"
    allow_dependency_failure: false

  - group: "Mandatory Tests"
    key: "mandatory-tests"
    if: ${ALLOW_MANDATORY_TESTS} == 'true'
    steps:
      - label: ":linux: Ubuntu Unit Tests"
        key: "mandatory-linux-unit-test"
        command: ".buildkite/scripts/unit_tests.sh ${PIPELINE_NAME}"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        artifact_paths: "metricbeat/build/*.*"

      - label: ":go: Go Intergration Tests"
        key: "mandatory-int-test"
        command: ".buildkite/scripts/go_int_tests.sh ${PIPELINE_NAME}"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        artifact_paths: "metricbeat/build/*.*"

      - label: ":python: Python Integration Tests"
        key: "mandatory-python-int-test"
        command: ".buildkite/scripts/py_int_tests.sh ${PIPELINE_NAME}"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        artifact_paths: "metricbeat/build/*.*"

      - label: ":negative_squared_cross_mark: Cross compile"
        key: "mandatory-cross-compile"
        command: ".buildkite/scripts/crosscompile.sh ${PIPELINE_NAME}"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        artifact_paths: "metricbeat/build/*.*"

      - label: ":windows: Windows Unit Tests - {{matrix.image}}"
        command: ".buildkite/scripts/win_unit_tests.ps1"
        key: "mandatory-win-unit-tests"
        agents:
          provider: "gcp"
          image: "{{matrix.image}}"
          machine_type: "n2-standard-8"
          disk_size: 100
          disk_type: "pd-ssd"
        matrix:
          setup:
            image:
              - "${IMAGE_WIN_2016}"
              - "${IMAGE_WIN_2022}"
        artifact_paths: "metricbeat/build/*.*"

  - group: "Extended Tests"
    key: "extended-tests"
    if: ${ALLOW_EXTENDED_TESTS} == 'true'
    steps:
      - label: ":mac: MacOS Unit Tests"
        key: "extended-macos-unit-tests"
        if: ${ALLOW_MACOS_TESTS} == 'true'
        command: ".buildkite/scripts/unit_tests.sh ${PIPELINE_NAME}"
        agents:
          provider: "orka"
          imagePrefix: "${IMAGE_MACOS_X86_64}"
        artifact_paths: "metricbeat/build/*.*"

  - group: "Extended Windowds Tests"
    key: "extended-win-tests"
    if: ${ALLOW_EXTENDED_WIN_TESTS} == 'true'
    steps:
      - label: ":windows: Win 2019 Unit Tests"
        key: "extended-win-2019-unit-tests"
        command: ".buildkite/scripts/win_unit_tests.ps1"
        agents:
          provider: "gcp"
          image: "${IMAGE_WIN_2019}"
          machine_type: "n2-standard-8"
          disk_size: 100
          disk_type: "pd-ssd"
        artifact_paths: "metricbeat/build/*.*"

  - group: "Packaging"    # TODO: check conditions for future the main pipeline migration: https://github.com/elastic/beats/pull/28589
    key: "packaging"
    if: ${ALLOW_PACKAGING} == 'true'
    steps:
      - label: ":linux: Packaging Linux"
        key: "packaging-linux"
        command: ".buildkite/scripts/packaging.sh"
        agents:
          provider: "gcp"
          image: "${IMAGE_UBUNTU_X86_64}"
          machineType: "c2-standard-16"
        env:
          PLATFORMS: "+all linux/amd64 linux/arm64 windows/amd64 darwin/amd64 darwin/arm64"

      - label: ":linux: Packaging ARM"
        key: "packaging-arm"
        command: ".buildkite/scripts/packaging.sh"
        agents:
          provider: "aws"
          imagePrefix: "${IMAGE_UBUNTU_ARM_64}"
          instanceType: "t4g.xlarge"
        env:
          PLATFORMS: "linux/arm64"
          PACKAGES: "docker"

    depends_on:
    - step: "mandatory-tests"
      allow_failure: false
    - step: "extended-tests"
      allow_failure: true
    - step: "extended-win-tests"
      allow_failure: true
