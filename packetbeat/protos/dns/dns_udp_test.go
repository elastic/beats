// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

//go:build !integration
// +build !integration

// Unit tests and benchmarks for the dns package.
//
// The byte array test data was generated from pcap files using the gopacket
// test_creator.py script contained in the gopacket repository. The script was
// modified to drop the Ethernet, IP, and UDP headers from the byte arrays
// (skip the first 42 bytes).
//
// TODO:
//   * Add test case to verify that Include_authorities and Include_additionals
//     are working.
//   * Add test case for Send_request and validate the stringified DNS message.
//   * Add test case for Send_response and validate the stringified DNS message.

package dns

import (
	"math/rand"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	mkdns "github.com/miekg/dns"
	"github.com/stretchr/testify/assert"

	"github.com/elastic/beats/v7/libbeat/common"
	"github.com/elastic/beats/v7/packetbeat/protos"
	"github.com/elastic/elastic-agent-libs/mapstr"
)

// Verify that the interface for UDP has been satisfied.
var _ protos.UDPPlugin = &dnsPlugin{}

// DNS messages for testing. When adding a new test message, add it to the
// messages array and create a new benchmark test for the message.
var (
	// An array of all test messages.
	messages = []dnsTestMessage{
		elasticA,
		elasticNoIP,
		zoneIxfr,
		githubPtr,
		sophosTxt,
		ednsSecA,
	}

	elasticA = dnsTestMessage{
		id:      8529,
		opcode:  "QUERY",
		flags:   []string{"rd", "ra"},
		rcode:   "NOERROR",
		qClass:  "IN",
		qType:   "A",
		qName:   "elastic.co",
		qEtld:   "elastic.co",
		qTLD:    "co",
		answers: []string{"54.148.130.30", "54.69.104.66"},
		request: []byte{
			0x21, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6c, 0x61,
			0x73, 0x74, 0x69, 0x63, 0x02, 0x63, 0x6f, 0x00, 0x00, 0x01, 0x00, 0x01,
		},
		response: []byte{
			0x21, 0x51, 0x81, 0x80, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6c, 0x61,
			0x73, 0x74, 0x69, 0x63, 0x02, 0x63, 0x6f, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x04, 0x36, 0x94, 0x82, 0x1e, 0xc0, 0x0c, 0x00, 0x01,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x04, 0x36, 0x45, 0x68, 0x42,
		},
	}

	elasticNoIP = dnsTestMessage{
		id:      8529,
		opcode:  "QUERY",
		flags:   []string{"rd", "ra", "tc"},
		rcode:   "NOERROR",
		qClass:  "IN",
		qType:   "A",
		qName:   "elastic.co",
		qEtld:   "elastic.co",
		qTLD:    "co",
		answers: nil,
		request: []byte{
			0x21, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6c, 0x61,
			0x73, 0x74, 0x69, 0x63, 0x02, 0x63, 0x6f, 0x00, 0x00, 0x01, 0x00, 0x01,
		},
		response: []byte{
			0x21, 0x51, 0x83, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6c, 0x61,
			0x73, 0x74, 0x69, 0x63, 0x02, 0x63, 0x6f, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00,
		},
	}

	zoneIxfr = dnsTestMessage{
		id:      16384,
		opcode:  "QUERY",
		flags:   []string{"ra"},
		rcode:   "NOERROR",
		qClass:  "IN",
		qType:   "IXFR",
		qName:   "etas.com",
		qEtld:   "etas.com",
		qTLD:    "com",
		answers: []string{"training2003p", "training2003p", "training2003p", "training2003p", "1.1.1.100"},
		request: []byte{
			0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x65, 0x74, 0x61,
			0x73, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0xfb, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x06, 0x00, 0x01,
			0x00, 0x00, 0x0e, 0x10, 0x00, 0x2f, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x32,
			0x30, 0x30, 0x33, 0x70, 0x00, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x02, 0x58, 0x00, 0x01, 0x51,
			0x80, 0x00, 0x00, 0x0e, 0x10, 0x4d, 0x53,
		},
		response: []byte{
			0x40, 0x00, 0x80, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x04, 0x65, 0x74, 0x61,
			0x73, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0xfb, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x06, 0x00, 0x01,
			0x00, 0x00, 0x0e, 0x10, 0x00, 0x2f, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x32,
			0x30, 0x30, 0x33, 0x70, 0x00, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
			0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x02, 0x58, 0x00, 0x01, 0x51,
			0x80, 0x00, 0x00, 0x0e, 0x10, 0xc0, 0x0c, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00,
			0x18, 0xc0, 0x26, 0xc0, 0x35, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x02,
			0x58, 0x00, 0x01, 0x51, 0x80, 0x00, 0x00, 0x0e, 0x10, 0xc0, 0x0c, 0x00, 0x06, 0x00, 0x01, 0x00,
			0x00, 0x0e, 0x10, 0x00, 0x18, 0xc0, 0x26, 0xc0, 0x35, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3c, 0x00, 0x00, 0x02, 0x58, 0x00, 0x01, 0x51, 0x80, 0x00, 0x00, 0x0e, 0x10, 0x05, 0x69, 0x6e,
			0x64, 0x65, 0x78, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x04, 0x01,
			0x01, 0x01, 0x64, 0xc0, 0x0c, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x18, 0xc0,
			0x26, 0xc0, 0x35, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x02, 0x58, 0x00,
			0x01, 0x51, 0x80, 0x00, 0x00, 0x0e, 0x10,
		},
	}

	githubPtr = dnsTestMessage{
		id:         344,
		opcode:     "QUERY",
		flags:      []string{"rd", "ra"},
		rcode:      "NOERROR",
		qClass:     "IN",
		qType:      "PTR",
		qName:      "131.252.30.192.in-addr.arpa",
		qEtld:      "192.in-addr.arpa",
		qSubdomain: "131.252.30",
		qTLD:       "in-addr.arpa",
		answers:    []string{"github.com"},
		authorities: []string{
			"a.root-servers.net", "b.root-servers.net", "c.root-servers.net",
			"d.root-servers.net", "e.root-servers.net", "f.root-servers.net", "g.root-servers.net",
			"h.root-servers.net", "i.root-servers.net", "j.root-servers.net", "k.root-servers.net",
			"l.root-servers.net", "m.root-servers.net",
		},
		request: []byte{
			0x01, 0x58, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x31, 0x33, 0x31,
			0x03, 0x32, 0x35, 0x32, 0x02, 0x33, 0x30, 0x03, 0x31, 0x39, 0x32, 0x07, 0x69, 0x6e, 0x2d, 0x61,
			0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c, 0x00, 0x01,
		},
		response: []byte{
			0x01, 0x58, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x03, 0x31, 0x33, 0x31,
			0x03, 0x32, 0x35, 0x32, 0x02, 0x33, 0x30, 0x03, 0x31, 0x39, 0x32, 0x07, 0x69, 0x6e, 0x2d, 0x61,
			0x64, 0x64, 0x72, 0x04, 0x61, 0x72, 0x70, 0x61, 0x00, 0x00, 0x0c, 0x00, 0x01, 0xc0, 0x0c, 0x00,
			0x0c, 0x00, 0x01, 0x00, 0x00, 0x09, 0xe2, 0x00, 0x0c, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
			0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x14,
			0x01, 0x6c, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x03,
			0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01,
			0x65, 0xc0, 0x52, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x63,
			0xc0, 0x52, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x62, 0xc0,
			0x52, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x61, 0xc0, 0x52,
			0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x68, 0xc0, 0x52, 0x00,
			0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x66, 0xc0, 0x52, 0x00, 0x00,
			0x02, 0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x69, 0xc0, 0x52, 0x00, 0x00, 0x02,
			0x00, 0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x67, 0xc0, 0x52, 0x00, 0x00, 0x02, 0x00,
			0x01, 0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x6d, 0xc0, 0x52, 0x00, 0x00, 0x02, 0x00, 0x01,
			0x00, 0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x64, 0xc0, 0x52, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00,
			0x00, 0x07, 0xb8, 0x00, 0x04, 0x01, 0x6a, 0xc0, 0x52, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00,
			0x07, 0xb8, 0x00, 0x04, 0x01, 0x6b, 0xc0, 0x52,
		},
	}

	sophosTxt = dnsTestMessage{
		id:     8238,
		opcode: "QUERY",
		flags:  []string{"rd", "ra"},
		rcode:  "NXDOMAIN",
		qClass: "IN",
		qType:  "TXT",
		qName: "3.1o19ss00s2s17s4qp375sp49r830n2n4n923s8839052s7p7768s53365226pp3.659p1r741os37393" +
			"648s2348o762q1066q53rq5p4614r1q4781qpr16n809qp4.879o3o734q9sns005o3pp76q83.2q65qns3spns" +
			"1081s5rn5sr74opqrqnpq6rn3ro5.i.00.mac.sophosxl.net",
		qEtld: "sophosxl.net",
		qSubdomain: "3.1o19ss00s2s17s4qp375sp49r830n2n4n923s8839052s7p7768s53365226pp3.659p1r741os37393" +
			"648s2348o762q1066q53rq5p4614r1q4781qpr16n809qp4.879o3o734q9sns005o3pp76q83.2q65qns3spns" +
			"1081s5rn5sr74opqrqnpq6rn3ro5.i.00.mac",
		qTLD: "net",
		request: []byte{
			0x20, 0x2e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x3f, 0x31,
			0x6f, 0x31, 0x39, 0x73, 0x73, 0x30, 0x30, 0x73, 0x32, 0x73, 0x31, 0x37, 0x73, 0x34, 0x71, 0x70,
			0x33, 0x37, 0x35, 0x73, 0x70, 0x34, 0x39, 0x72, 0x38, 0x33, 0x30, 0x6e, 0x32, 0x6e, 0x34, 0x6e,
			0x39, 0x32, 0x33, 0x73, 0x38, 0x38, 0x33, 0x39, 0x30, 0x35, 0x32, 0x73, 0x37, 0x70, 0x37, 0x37,
			0x36, 0x38, 0x73, 0x35, 0x33, 0x33, 0x36, 0x35, 0x32, 0x32, 0x36, 0x70, 0x70, 0x33, 0x3f, 0x36,
			0x35, 0x39, 0x70, 0x31, 0x72, 0x37, 0x34, 0x31, 0x6f, 0x73, 0x33, 0x37, 0x33, 0x39, 0x33, 0x36,
			0x34, 0x38, 0x73, 0x32, 0x33, 0x34, 0x38, 0x6f, 0x37, 0x36, 0x32, 0x71, 0x31, 0x30, 0x36, 0x36,
			0x71, 0x35, 0x33, 0x72, 0x71, 0x35, 0x70, 0x34, 0x36, 0x31, 0x34, 0x72, 0x31, 0x71, 0x34, 0x37,
			0x38, 0x31, 0x71, 0x70, 0x72, 0x31, 0x36, 0x6e, 0x38, 0x30, 0x39, 0x71, 0x70, 0x34, 0x1a, 0x38,
			0x37, 0x39, 0x6f, 0x33, 0x6f, 0x37, 0x33, 0x34, 0x71, 0x39, 0x73, 0x6e, 0x73, 0x30, 0x30, 0x35,
			0x6f, 0x33, 0x70, 0x70, 0x37, 0x36, 0x71, 0x38, 0x33, 0x28, 0x32, 0x71, 0x36, 0x35, 0x71, 0x6e,
			0x73, 0x33, 0x73, 0x70, 0x6e, 0x73, 0x31, 0x30, 0x38, 0x31, 0x73, 0x35, 0x72, 0x6e, 0x35, 0x73,
			0x72, 0x37, 0x34, 0x6f, 0x70, 0x71, 0x72, 0x71, 0x6e, 0x70, 0x71, 0x36, 0x72, 0x6e, 0x33, 0x72,
			0x6f, 0x35, 0x01, 0x69, 0x02, 0x30, 0x30, 0x03, 0x6d, 0x61, 0x63, 0x08, 0x73, 0x6f, 0x70, 0x68,
			0x6f, 0x73, 0x78, 0x6c, 0x03, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x10, 0x00, 0x01,
		},
		response: []byte{
			0x20, 0x2e, 0x81, 0x83, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x3f, 0x31,
			0x6f, 0x31, 0x39, 0x73, 0x73, 0x30, 0x30, 0x73, 0x32, 0x73, 0x31, 0x37, 0x73, 0x34, 0x71, 0x70,
			0x33, 0x37, 0x35, 0x73, 0x70, 0x34, 0x39, 0x72, 0x38, 0x33, 0x30, 0x6e, 0x32, 0x6e, 0x34, 0x6e,
			0x39, 0x32, 0x33, 0x73, 0x38, 0x38, 0x33, 0x39, 0x30, 0x35, 0x32, 0x73, 0x37, 0x70, 0x37, 0x37,
			0x36, 0x38, 0x73, 0x35, 0x33, 0x33, 0x36, 0x35, 0x32, 0x32, 0x36, 0x70, 0x70, 0x33, 0x3f, 0x36,
			0x35, 0x39, 0x70, 0x31, 0x72, 0x37, 0x34, 0x31, 0x6f, 0x73, 0x33, 0x37, 0x33, 0x39, 0x33, 0x36,
			0x34, 0x38, 0x73, 0x32, 0x33, 0x34, 0x38, 0x6f, 0x37, 0x36, 0x32, 0x71, 0x31, 0x30, 0x36, 0x36,
			0x71, 0x35, 0x33, 0x72, 0x71, 0x35, 0x70, 0x34, 0x36, 0x31, 0x34, 0x72, 0x31, 0x71, 0x34, 0x37,
			0x38, 0x31, 0x71, 0x70, 0x72, 0x31, 0x36, 0x6e, 0x38, 0x30, 0x39, 0x71, 0x70, 0x34, 0x1a, 0x38,
			0x37, 0x39, 0x6f, 0x33, 0x6f, 0x37, 0x33, 0x34, 0x71, 0x39, 0x73, 0x6e, 0x73, 0x30, 0x30, 0x35,
			0x6f, 0x33, 0x70, 0x70, 0x37, 0x36, 0x71, 0x38, 0x33, 0x28, 0x32, 0x71, 0x36, 0x35, 0x71, 0x6e,
			0x73, 0x33, 0x73, 0x70, 0x6e, 0x73, 0x31, 0x30, 0x38, 0x31, 0x73, 0x35, 0x72, 0x6e, 0x35, 0x73,
			0x72, 0x37, 0x34, 0x6f, 0x70, 0x71, 0x72, 0x71, 0x6e, 0x70, 0x71, 0x36, 0x72, 0x6e, 0x33, 0x72,
			0x6f, 0x35, 0x01, 0x69, 0x02, 0x30, 0x30, 0x03, 0x6d, 0x61, 0x63, 0x08, 0x73, 0x6f, 0x70, 0x68,
			0x6f, 0x73, 0x78, 0x6c, 0x03, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x10, 0x00, 0x01,
		},
	}

	ednsSecA = dnsTestMessage{
		id:         20498,
		opcode:     "QUERY",
		flags:      []string{"rd", "ad", "ra"},
		rcode:      "NOERROR",
		qClass:     "IN",
		qType:      "A",
		qName:      "www.ietf.org",
		qEtld:      "ietf.org",
		qTLD:       "org",
		qSubdomain: "www",
		answers:    []string{"64.170.98.30", "iDA8bJnrAEz3jgYnyFRm567a76qlv1V0CqxOSd/o9nvnN0GlZLaVoDmuXpaIaoypbGxwzwgK/LY6CV2k6SWKwicBmpENL26hwyjkFzPDW8kX3ibFhtfsOb8pYe7nBj326actp/7iG+DRuDmPnkYBja+wDYk61doTtkqZg57fn3iS97tjNPCC9C9knRAuDYUG+dVxalazSwYrpvY97dUC1H2spD0g4UdDyCbGA46mouZ4GPzNMewgf948qxrnU8pWPk3nQW5TgLVkGoWgco2owfLElBqf6rJ4LOswuhaw8IpTtmw3FsixxTLQvKOE5nftd1nMhQQd9CaHjoKNAUEz5Q=="},
		request: []byte{
			0x50, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x77, 0x77, 0x77,
			0x04, 0x69, 0x65, 0x74, 0x66, 0x03, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
			0x29, 0x10, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
		},
		response: []byte{
			0x50, 0x12, 0x81, 0xa0, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03, 0x77, 0x77, 0x77,
			0x04, 0x69, 0x65, 0x74, 0x66, 0x03, 0x6f, 0x72, 0x67, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x04, 0xd8, 0x00, 0x04, 0x40, 0xaa, 0x62, 0x1e, 0xc0, 0x0c,
			0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x04, 0xd8, 0x01, 0x1c, 0x00, 0x01, 0x05, 0x03, 0x00, 0x00,
			0x07, 0x08, 0x52, 0xd0, 0x71, 0xc7, 0x50, 0xef, 0x30, 0xaf, 0x9e, 0x04, 0x04, 0x69, 0x65, 0x74,
			0x66, 0x03, 0x6f, 0x72, 0x67, 0x00, 0x88, 0x30, 0x3c, 0x6c, 0x99, 0xeb, 0x00, 0x4c, 0xf7, 0x8e,
			0x06, 0x27, 0xc8, 0x54, 0x66, 0xe7, 0xae, 0xda, 0xef, 0xaa, 0xa5, 0xbf, 0x55, 0x74, 0x0a, 0xac,
			0x4e, 0x49, 0xdf, 0xe8, 0xf6, 0x7b, 0xe7, 0x37, 0x41, 0xa5, 0x64, 0xb6, 0x95, 0xa0, 0x39, 0xae,
			0x5e, 0x96, 0x88, 0x6a, 0x8c, 0xa9, 0x6c, 0x6c, 0x70, 0xcf, 0x08, 0x0a, 0xfc, 0xb6, 0x3a, 0x09,
			0x5d, 0xa4, 0xe9, 0x25, 0x8a, 0xc2, 0x27, 0x01, 0x9a, 0x91, 0x0d, 0x2f, 0x6e, 0xa1, 0xc3, 0x28,
			0xe4, 0x17, 0x33, 0xc3, 0x5b, 0xc9, 0x17, 0xde, 0x26, 0xc5, 0x86, 0xd7, 0xec, 0x39, 0xbf, 0x29,
			0x61, 0xee, 0xe7, 0x06, 0x3d, 0xf6, 0xe9, 0xa7, 0x2d, 0xa7, 0xfe, 0xe2, 0x1b, 0xe0, 0xd1, 0xb8,
			0x39, 0x8f, 0x9e, 0x46, 0x01, 0x8d, 0xaf, 0xb0, 0x0d, 0x89, 0x3a, 0xd5, 0xda, 0x13, 0xb6, 0x4a,
			0x99, 0x83, 0x9e, 0xdf, 0x9f, 0x78, 0x92, 0xf7, 0xbb, 0x63, 0x34, 0xf0, 0x82, 0xf4, 0x2f, 0x64,
			0x9d, 0x10, 0x2e, 0x0d, 0x85, 0x06, 0xf9, 0xd5, 0x71, 0x6a, 0x56, 0xb3, 0x4b, 0x06, 0x2b, 0xa6,
			0xf6, 0x3d, 0xed, 0xd5, 0x02, 0xd4, 0x7d, 0xac, 0xa4, 0x3d, 0x20, 0xe1, 0x47, 0x43, 0xc8, 0x26,
			0xc6, 0x03, 0x8e, 0xa6, 0xa2, 0xe6, 0x78, 0x18, 0xfc, 0xcd, 0x31, 0xec, 0x20, 0x7f, 0xde, 0x3c,
			0xab, 0x1a, 0xe7, 0x53, 0xca, 0x56, 0x3e, 0x4d, 0xe7, 0x41, 0x6e, 0x53, 0x80, 0xb5, 0x64, 0x1a,
			0x85, 0xa0, 0x72, 0x8d, 0xa8, 0xc1, 0xf2, 0xc4, 0x94, 0x1a, 0x9f, 0xea, 0xb2, 0x78, 0x2c, 0xeb,
			0x30, 0xba, 0x16, 0xb0, 0xf0, 0x8a, 0x53, 0xb6, 0x6c, 0x37, 0x16, 0xc8, 0xb1, 0xc5, 0x32, 0xd0,
			0xbc, 0xa3, 0x84, 0xe6, 0x77, 0xed, 0x77, 0x59, 0xcc, 0x85, 0x04, 0x1d, 0xf4, 0x26, 0x87, 0x8e,
			0x82, 0x8d, 0x01, 0x41, 0x33, 0xe5, 0x00, 0x00, 0x29, 0x0f, 0xa0, 0x00, 0x00, 0x80, 0x00, 0x00,
			0x00,
		},
	}
)

// Verify that an empty packet is safely handled (no panics).
func TestParseUdp_emptyPacket(t *testing.T) {
	store := &eventStore{}
	dns := newDNS(store, testing.Verbose())
	packet := newPacket(forward, []byte{})
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")
	assert.True(t, store.empty(), "No result should have been published.")
}

// Verify that a malformed packet is safely handled (no panics).
func TestParseUdp_malformedPacket(t *testing.T) {
	dns := newDNS(nil, testing.Verbose())
	garbage := []byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}
	packet := newPacket(forward, garbage)
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")

	// As a future addition, a malformed message should publish a result.
}

// Verify that the lone request packet is parsed.
func TestParseUdp_requestPacket(t *testing.T) {
	store := &eventStore{}
	dns := newDNS(store, testing.Verbose())
	packet := newPacket(forward, elasticA.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")
	assert.True(t, store.empty(), "No result should have been published.")
}

// Verify that the lone response packet is parsed and that an error
// result is published.
func TestParseUdp_responseOnly(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())
	q := elasticA
	packet := newPacket(reverse, q.response)
	dns.ParseUDP(packet)

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.Nil(t, mapValue(t, m, "source.bytes"))
	assert.EqualValues(t, len(q.response), mapValue(t, m, "destination.bytes"))
	assert.Nil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
	assert.Equal(t, orphanedResponse.Error(), mapValue(t, m, "error.message"))
	assertMapStrData(t, m, q)
}

// Verify that the first request is published without a response and that
// the status is error. This second packet will remain in the transaction
// map awaiting a response.
func TestParseUdp_duplicateRequests(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())
	q := elasticA
	packet := newPacket(forward, q.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")
	packet = newPacket(forward, q.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.EqualValues(t, len(q.request), mapValue(t, m, "source.bytes"))
	assert.Nil(t, mapValue(t, m, "destination.bytes"))
	assert.Nil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
	assert.Equal(t, duplicateQueryMsg.Error(), mapValue(t, m, "error.message"))
}

// Verify that the request/response pair are parsed and that a result
// is published.
func TestParseUdp_requestResponse(t *testing.T) {
	store := &eventStore{}
	dns := newDNS(store, testing.Verbose())
	parseUDPRequestResponse(t, dns, store, elasticA)
}

// Verify all DNS test messages are parsed correctly.
func TestParseUdp_allTestMessages(t *testing.T) {
	store := &eventStore{}
	dns := newDNS(store, testing.Verbose())
	for _, q := range messages {
		t.Logf("Testing with query for %s", q.qName)
		store.events = nil
		parseUDPRequestResponse(t, dns, store, q)
	}
}

// Verify that expireTransaction publishes an event with an error status
// and note.
func TestExpireTransaction(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())

	trans := newTransaction(time.Now(), dnsTuple{}, common.ProcessTuple{})
	trans.request = &dnsMessage{
		data: &mkdns.Msg{
			Question: []mkdns.Question{{}},
		},
	}
	dns.expireTransaction(trans)

	m := expectResult(t, results)
	assert.Nil(t, mapValue(t, m, "destination.bytes"))
	assert.Nil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
	assert.Equal(t, noResponse.Error(), mapValue(t, m, "error.message"))
}

// Verify that an empty DNS request packet can be published.
func TestPublishTransaction_emptyDnsRequest(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())

	trans := newTransaction(time.Now(), dnsTuple{}, common.ProcessTuple{})
	trans.request = &dnsMessage{
		data: &mkdns.Msg{},
	}
	dns.publishTransaction(trans)

	m := expectResult(t, results)
	assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
}

// Verify that an empty DNS response packet can be published.
func TestPublishTransaction_emptyDnsResponse(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())

	trans := newTransaction(time.Now(), dnsTuple{}, common.ProcessTuple{})
	trans.response = &dnsMessage{
		data: &mkdns.Msg{},
	}
	dns.publishTransaction(trans)

	m := expectResult(t, results)
	assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
}

func TestPublishTransaction_edns(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())
	q := ednsSecA
	packet := newPacket(forward, q.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")
	packet = newPacket(reverse, q.response)
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.EqualValues(t, len(q.request), mapValue(t, m, "source.bytes"))
	assert.EqualValues(t, len(q.response), mapValue(t, m, "destination.bytes"))
	assert.NotNil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.OK_STATUS, mapValue(t, m, "status"))
	assert.Nil(t, mapValue(t, m, "error.message"))
	assertMapStrData(t, m, q)
}

// Verify that a non-edns answer to a edns query publishes Notes.
func TestPublishTransaction_respEdnsNoSupport(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())
	q := ednsSecA
	q.response = q.response[:len(q.response)-11] // Remove OPT RR

	packet := newPacket(forward, q.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")
	packet = newPacket(reverse, q.response)
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.EqualValues(t, len(q.request), mapValue(t, m, "source.bytes"))
	assert.EqualValues(t, len(q.response), mapValue(t, m, "destination.bytes"))
	assert.NotNil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.OK_STATUS, mapValue(t, m, "status"))
	assert.Equal(t, respEdnsNoSupport.Error(), mapValue(t, m, "error.message"))
	assertRequest(t, m, q)
}

// Verify that a edns response to a non-edns query publishes Notes.
func TestPublishTransaction_respEdnsUnexpected(t *testing.T) {
	results := &eventStore{}
	dns := newDNS(results, testing.Verbose())
	q := ednsSecA
	q.request = q.request[:len(q.request)-11] // Remove OPT RR

	packet := newPacket(forward, q.request)
	dns.ParseUDP(packet)
	assert.Equal(t, 1, dns.transactions.Size(), "There should be one transaction.")
	packet = newPacket(reverse, q.response)
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.EqualValues(t, len(q.request), mapValue(t, m, "source.bytes"))
	assert.EqualValues(t, len(q.response), mapValue(t, m, "destination.bytes"))
	assert.NotNil(t, mapValue(t, m, "event.duration"))
	assert.Equal(t, common.OK_STATUS, mapValue(t, m, "status"))
	assert.Equal(t, respEdnsUnexpected.Error(), mapValue(t, m, "error.message"))
	assertMapStrData(t, m, q)
}

// Benchmarks UDP parsing for the given test message.
func benchmarkUDP(b *testing.B, q dnsTestMessage) {
	dns := newDNS(nil, false)
	for i := 0; i < b.N; i++ {
		packet := newPacket(forward, q.request)
		dns.ParseUDP(packet)
		packet = newPacket(reverse, q.response)
		dns.ParseUDP(packet)
	}
}

// Benchmark UDP parsing against each test message.
func BenchmarkUdpElasticA(b *testing.B)  { benchmarkUDP(b, elasticA) }
func BenchmarkUdpZoneIxfr(b *testing.B)  { benchmarkUDP(b, zoneIxfr) }
func BenchmarkUdpGithubPtr(b *testing.B) { benchmarkUDP(b, githubPtr) }
func BenchmarkUdpSophosTxt(b *testing.B) { benchmarkUDP(b, sophosTxt) }

// Benchmark that runs with parallelism to help find concurrency related
// issues. To run with parallelism, the 'go test' cpu flag must be set
// greater than 1, otherwise it just runs concurrently but not in parallel.
func BenchmarkParallelUdpParse(b *testing.B) {
	rand.Seed(22)
	numMessages := len(messages)
	dns := newDNS(nil, false)

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		// Each iteration parses one message, either a request or a response.
		// The request and response could be parsed on different goroutines.
		for pb.Next() {
			q := messages[rand.Intn(numMessages)]
			var packet *protos.Packet
			if rand.Intn(2) == 0 {
				packet = newPacket(forward, q.request)
			} else {
				packet = newPacket(reverse, q.response)
			}
			dns.ParseUDP(packet)
		}
	})
}

// parseUdpRequestResponse parses a request then a response packet and validates
// the published result.
func parseUDPRequestResponse(t testing.TB, dns *dnsPlugin, results *eventStore, q dnsTestMessage) {
	t.Helper()
	packet := newPacket(forward, q.request)
	dns.ParseUDP(packet)
	packet = newPacket(reverse, q.response)
	dns.ParseUDP(packet)
	assert.Empty(t, dns.transactions.Size(), "There should be no transactions.")

	m := expectResult(t, results)
	assert.Equal(t, "udp", mapValue(t, m, "network.transport"))
	assert.EqualValues(t, len(q.request), mapValue(t, m, "source.bytes"))
	assert.EqualValues(t, len(q.response), mapValue(t, m, "destination.bytes"))
	assert.NotNil(t, mapValue(t, m, "event.duration"))

	if assert.ObjectsAreEqual("NOERROR", mapValue(t, m, "dns.response_code")) {
		assert.Equal(t, common.OK_STATUS, mapValue(t, m, "status"))
	} else {
		assert.Equal(t, common.ERROR_STATUS, mapValue(t, m, "status"))
	}

	assert.Nil(t, mapValue(t, m, "error.message"))
	assertMapStrData(t, m, q)
}

func TestEDNS0(t *testing.T) {
	// resp is the EDNS0 response that is returned from udp_edn0_resp.pcap
	// in the packetbeat/decoder tests.
	resp := []uint8{
		0xd3, 0x15, 0x81, 0xa0, 0x00, 0x01, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x70, 0x65, 0x61, // |.......!.....pea|
		0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x00, 0xff, 0x00, 0x01, // |cecorps.gov.....|
		0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0xa2, 0x00, 0x30, 0x07, 0x02, // |........T`...0..|
		0x00, 0x02, 0xa3, 0x00, 0x62, 0xff, 0xb4, 0x4e, 0x62, 0xfa, 0x6b, 0x95, 0xc8, 0x84, 0x0a, 0x70, // |....b..Nb.k....p|
		0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x4f, 0x14, // |eacecorps.gov.O.|
		0x3f, 0xb0, 0xf9, 0x1f, 0xdb, 0x9c, 0x24, 0x93, 0x28, 0x09, 0x2f, 0x84, 0x88, 0x7f, 0xae, 0x0a, // |?.....$.(./.....|
		0xd6, 0xea, 0xb3, 0xf5, 0xc2, 0xfd, 0x4f, 0x02, 0x96, 0xac, 0xb5, 0x15, 0x3e, 0x5e, 0x16, 0xd2, // |......O.....>^..|
		0xfe, 0x02, 0xdf, 0x4c, 0x34, 0x16, 0xcc, 0x0a, 0x0a, 0x10, 0x07, 0x4b, 0x67, 0x75, 0x5e, 0x91, // |...L4......Kgu^.|
		0xe8, 0x45, 0x8c, 0xc2, 0xcf, 0x56, 0x75, 0x36, 0x01, 0x00, 0x4b, 0xa7, 0xe6, 0x47, 0x09, 0xb7, // |.E...Vu6..K..G..|
		0x42, 0x31, 0xb4, 0x84, 0x95, 0x79, 0xec, 0xe3, 0x2f, 0x1c, 0xc5, 0x26, 0xdd, 0xe8, 0x0b, 0x93, // |B1...y../..&....|
		0xcc, 0x0a, 0x55, 0xd0, 0x21, 0x08, 0x73, 0x0e, 0x00, 0xa6, 0x77, 0x2c, 0x7f, 0x68, 0x14, 0x80, // |..U.!.s...w,.h..|
		0xb8, 0xea, 0xf3, 0x0d, 0x73, 0x49, 0xd9, 0x20, 0xff, 0xda, 0x4e, 0x55, 0x65, 0x71, 0x14, 0x82, // |....sI. ..NUeq..|
		0xad, 0x15, 0x5c, 0x51, 0x44, 0x7e, 0x32, 0x13, 0x82, 0x3f, 0x63, 0x36, 0x97, 0x07, 0xc0, 0x0c, // |..\QD~2..?c6....|
		0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x01, 0x22, 0x00, 0x30, 0x07, 0x02, 0x00, 0x02, // |......T`.".0....|
		0xa3, 0x00, 0x62, 0xff, 0xb4, 0x4e, 0x62, 0xfa, 0x6b, 0x95, 0x50, 0xb5, 0x0a, 0x70, 0x65, 0x61, // |..b..Nb.k.P..pea|
		0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x62, 0xa4, 0x89, 0x09, // |cecorps.gov.b...|
		0x48, 0xf2, 0xa2, 0x6d, 0x30, 0xbc, 0xb0, 0xbe, 0xbd, 0x4b, 0xe0, 0xa8, 0x31, 0x30, 0x2f, 0xc1, // |H..m0....K..10/.|
		0xb2, 0x43, 0x0c, 0xf6, 0xe7, 0x56, 0x72, 0xee, 0x51, 0xf6, 0xd4, 0xcf, 0xf8, 0xa5, 0xf6, 0x9d, // |.C...Vr.Q.......|
		0xf0, 0x03, 0x6d, 0x6b, 0xbd, 0x5a, 0x85, 0xc6, 0x02, 0xa6, 0xdc, 0x30, 0x2b, 0x5e, 0x6a, 0x49, // |..mk.Z.....0+^jI|
		0x34, 0x58, 0x07, 0x91, 0x7a, 0xb6, 0x20, 0xa1, 0x46, 0x72, 0x10, 0xf4, 0xfd, 0xe8, 0x06, 0xf0, // |4X..z. .Fr......|
		0x7b, 0x95, 0xcb, 0xbf, 0xbb, 0x9a, 0xe2, 0x4a, 0x02, 0x97, 0x0a, 0xa8, 0x9f, 0x85, 0xde, 0xe5, // |{......J........|
		0x68, 0x68, 0xa8, 0x0e, 0xe0, 0x97, 0x63, 0x3c, 0xed, 0xe9, 0x6e, 0x4c, 0x12, 0x73, 0x0d, 0x1b, // |hh....c<..nL.s..|
		0xc0, 0xe0, 0x3f, 0x0b, 0xf4, 0xee, 0x41, 0xb7, 0xd8, 0x29, 0x15, 0xa1, 0x85, 0x00, 0x24, 0xba, // |..?...A..)....$.|
		0x16, 0x39, 0xf2, 0x2c, 0x4d, 0x2f, 0xae, 0x5d, 0x7a, 0x62, 0x8a, 0x9e, 0x18, 0xb8, 0xfb, 0x87, // |.9.,M/.]zb......|
		0x8b, 0xf9, 0xc2, 0xa5, 0x06, 0xab, 0x0b, 0xcd, 0x86, 0x95, 0x34, 0x2e, 0xc8, 0xa8, 0x6b, 0x43, // |..........4...kC|
		0xe6, 0x45, 0x1f, 0xba, 0x9c, 0x41, 0x16, 0x42, 0x52, 0xae, 0x40, 0x8e, 0xb6, 0x48, 0x99, 0x8e, // |.E...A.BR.@..H..|
		0x13, 0x8e, 0x9e, 0x79, 0x8c, 0x53, 0x14, 0x92, 0x4b, 0x37, 0xe3, 0x31, 0xcb, 0xb2, 0x29, 0x7f, // |...y.S..K7.1..).|
		0x77, 0x98, 0x1a, 0xe8, 0x53, 0x48, 0x13, 0x2a, 0x4e, 0x57, 0x30, 0xae, 0x82, 0x8f, 0xe7, 0x52, // |w...SH.*NW0....R|
		0x34, 0x05, 0x44, 0x03, 0xe2, 0x74, 0xd0, 0xee, 0x35, 0xed, 0xb0, 0x13, 0xdd, 0x61, 0xee, 0x9f, // |4.D..t..5....a..|
		0xcd, 0xea, 0x16, 0x7d, 0x9e, 0xbb, 0x35, 0xed, 0x1e, 0x70, 0xff, 0x41, 0x87, 0x23, 0x70, 0x13, // |...}..5..p.A.#p.|
		0x60, 0x93, 0x52, 0xbe, 0x05, 0xc5, 0x5e, 0xa4, 0x11, 0xca, 0x5e, 0x84, 0x6b, 0xf4, 0x94, 0x17, // |`.R...^...^.k...|
		0x19, 0x21, 0x1d, 0x40, 0xb4, 0xa8, 0x95, 0x57, 0x9b, 0xd5, 0x66, 0x26, 0xc0, 0x0c, 0x00, 0x2e, // |.!.@...W..f&....|
		0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0xa2, 0x00, 0x06, 0x07, 0x02, 0x00, 0x00, 0x70, 0x80, // |....T`........p.|
		0x63, 0x00, 0x1c, 0x9e, 0x62, 0xfa, 0xc8, 0x8e, 0xc8, 0x84, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, // |c...b......peace|
		0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x2b, 0xad, 0xae, 0x97, 0x45, 0x24, // |corps.gov.+...E$|
		0x1f, 0x91, 0x35, 0x29, 0xfa, 0x67, 0x13, 0x1f, 0x90, 0xc4, 0x76, 0x0d, 0xe2, 0x8e, 0x1d, 0x2e, // |..5).g....v.....|
		0x64, 0x46, 0xad, 0x9e, 0xe4, 0x5a, 0x67, 0x37, 0xc0, 0x9c, 0x03, 0x12, 0x73, 0x8e, 0x49, 0xea, // |dF...Zg7....s.I.|
		0xb3, 0x30, 0x82, 0xa3, 0xcc, 0x8a, 0xe7, 0xcf, 0xb6, 0x8a, 0x93, 0x9d, 0xca, 0x86, 0x07, 0x60, // |.0.............`|
		0xb4, 0x42, 0xd3, 0x2c, 0xca, 0xef, 0x4b, 0xfe, 0x4c, 0x98, 0x0d, 0x5f, 0xf3, 0x21, 0x4f, 0x3b, // |.B.,..K.L.._.!O;|
		0x64, 0xbe, 0x6e, 0x82, 0xe6, 0x51, 0x20, 0xd5, 0x13, 0xaa, 0xad, 0x1c, 0x94, 0x13, 0x1f, 0xd8, // |d.n..Q .........|
		0x7a, 0xfd, 0x9b, 0x46, 0x05, 0xca, 0x38, 0xfe, 0xae, 0x72, 0xdb, 0xfe, 0x5e, 0x00, 0x34, 0x97, // |z..F..8..r..^.4.|
		0xfe, 0x90, 0x79, 0x0d, 0xe5, 0xe4, 0x69, 0x28, 0x54, 0x14, 0xec, 0x8c, 0xf5, 0xff, 0x2f, 0x4d, // |..y...i(T...../M|
		0x42, 0x26, 0x79, 0xd9, 0xda, 0x66, 0xc9, 0x47, 0x0e, 0xcf, 0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, // |B&y..f.G........|
		0x00, 0x00, 0x54, 0x60, 0x00, 0xa2, 0x00, 0x10, 0x07, 0x02, 0x00, 0x00, 0x70, 0x80, 0x62, 0xff, // |..T`........p.b.|
		0x6a, 0x96, 0x62, 0xfa, 0x1c, 0x1c, 0xc8, 0x84, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, // |j.b......peaceco|
		0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x1d, 0xd0, 0x51, 0x9f, 0xce, 0x0c, 0xa0, 0x36, // |rps.gov...Q....6|
		0xe6, 0x97, 0x21, 0x13, 0x2a, 0x4a, 0x89, 0xe0, 0xc7, 0xe7, 0xd3, 0xb1, 0x69, 0xe9, 0xf1, 0x48, // |..!.*J......i..H|
		0x98, 0xb5, 0x34, 0x74, 0xc2, 0x0d, 0x8d, 0x95, 0x60, 0x11, 0x8e, 0x44, 0x34, 0xd8, 0xbd, 0x42, // |..4t....`..D4..B|
		0x19, 0x0b, 0x61, 0x74, 0x9c, 0x31, 0x3d, 0xf7, 0x94, 0x03, 0x14, 0xd5, 0x3e, 0x0c, 0xc5, 0xf2, // |..at.1=.....>...|
		0x0d, 0x8d, 0x59, 0x24, 0x32, 0x99, 0x68, 0x14, 0x2a, 0x4c, 0x33, 0x8a, 0xc9, 0x18, 0x8a, 0x55, // |..Y$2.h.*L3....U|
		0x01, 0x77, 0xc9, 0x04, 0x35, 0xa4, 0x5c, 0x78, 0xf4, 0x62, 0xdc, 0xf3, 0xed, 0x0e, 0xa1, 0x81, // |.w..5.\x.b......|
		0xd9, 0xc6, 0xb0, 0x72, 0xd4, 0xa8, 0x33, 0x6e, 0xf0, 0xe8, 0x7e, 0x85, 0xb4, 0x0f, 0x1b, 0x20, // |...r..3n..~.... |
		0x85, 0xa2, 0x89, 0xef, 0x4b, 0x11, 0x3b, 0xc4, 0x25, 0x9b, 0xab, 0x48, 0x36, 0xb1, 0xb0, 0x39, // |....K.;.%..H6..9|
		0xfd, 0x4d, 0x88, 0x18, 0x75, 0xc7, 0x9a, 0x90, 0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, // |.M..u...........|
		0x1c, 0x20, 0x00, 0xa2, 0x00, 0x01, 0x07, 0x02, 0x00, 0x00, 0x1c, 0x20, 0x62, 0xff, 0x20, 0x29, // |. ......... b. )|
		0x62, 0xf9, 0xd6, 0xb2, 0xc8, 0x84, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, // |b......peacecorp|
		0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0x99, 0x6c, 0xec, 0x7e, 0xe2, 0x43, 0x6d, 0x97, 0x23, 0x20, // |s.gov..l.~.Cm.# |
		0xaf, 0x76, 0x95, 0xc1, 0x36, 0x59, 0xa7, 0xe4, 0xf1, 0x68, 0x6c, 0xa3, 0xf5, 0x88, 0x9c, 0x18, // |.v..6Y...hl.....|
		0x08, 0xae, 0xad, 0x75, 0xb1, 0x6b, 0x5b, 0x7a, 0xfa, 0xe7, 0x47, 0x7c, 0x84, 0x89, 0x18, 0x35, // |...u.k[z..G|...5|
		0x05, 0x6e, 0x66, 0xa0, 0x93, 0x5f, 0xd3, 0x1e, 0x55, 0xc6, 0x80, 0xf5, 0xbc, 0xc3, 0x19, 0xc9, // |.nf.._..U.......|
		0xf7, 0xf3, 0x62, 0x81, 0x56, 0x65, 0x22, 0xb6, 0xf8, 0x7f, 0x4d, 0xc9, 0x4c, 0x1e, 0xbe, 0x9e, // |..b.Ve"...M.L...|
		0x91, 0xd4, 0xd2, 0x58, 0xea, 0x6e, 0x07, 0xa3, 0x25, 0x80, 0x76, 0xeb, 0x5a, 0xec, 0x08, 0xbf, // |...X.n..%.v.Z...|
		0x67, 0xa9, 0x56, 0x1f, 0x8d, 0x56, 0x12, 0x69, 0x50, 0xdd, 0xc4, 0x27, 0xbe, 0x61, 0x00, 0xa7, // |g.V..V.iP..'.a..|
		0x19, 0x72, 0x3a, 0xc9, 0x19, 0x7f, 0xf1, 0xa6, 0xf3, 0xab, 0x26, 0x50, 0x65, 0x52, 0x19, 0x46, // |.r:.......&PeR.F|
		0xf3, 0xdd, 0x6f, 0x59, 0xed, 0x25, 0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x03, 0x84, // |..oY.%..........|
		0x00, 0xa2, 0x00, 0x33, 0x07, 0x02, 0x00, 0x00, 0x03, 0x84, 0x62, 0xff, 0x2e, 0xff, 0x62, 0xf9, // |...3......b...b.|
		0xe6, 0x1c, 0xc8, 0x84, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, // |.....peacecorps.|
		0x67, 0x6f, 0x76, 0x00, 0x76, 0xf6, 0xac, 0x0d, 0xa6, 0xe2, 0xec, 0xb2, 0x3f, 0x31, 0x54, 0x1f, // |gov.v.......?1T.|
		0x39, 0x08, 0x7a, 0x2b, 0x8e, 0x43, 0x31, 0x61, 0xe9, 0x13, 0xc2, 0x91, 0x33, 0x0c, 0xb3, 0x1f, // |9.z+.C1a....3...|
		0x5c, 0x59, 0xe5, 0x1f, 0x46, 0x90, 0xc8, 0x54, 0xe9, 0x9b, 0x88, 0xf4, 0xa3, 0xc2, 0x21, 0xad, // |\Y..F..T......!.|
		0xe5, 0x9e, 0x9d, 0x87, 0x42, 0x39, 0xa4, 0xbf, 0xbb, 0x17, 0x70, 0x0e, 0x1e, 0x5c, 0xf3, 0x38, // |....B9....p..\.8|
		0x80, 0xeb, 0xf8, 0x3a, 0xfa, 0x1d, 0x99, 0x63, 0xde, 0xc6, 0x44, 0xa2, 0xf7, 0xa3, 0x22, 0x7e, // |...:...c..D..."~|
		0xa9, 0x6b, 0x2b, 0xcc, 0x1c, 0x39, 0x20, 0x53, 0xc9, 0xb3, 0x9e, 0xaa, 0x36, 0xf1, 0xd3, 0x21, // |.k+..9 S....6..!|
		0xb1, 0x94, 0xae, 0x8f, 0xf4, 0xde, 0x0b, 0xbb, 0xf4, 0x1b, 0x4a, 0xa4, 0xc0, 0xc7, 0xe8, 0x6b, // |..........J....k|
		0x39, 0xbb, 0xb8, 0xaf, 0x55, 0x79, 0x88, 0xca, 0x4e, 0x70, 0x2d, 0xc6, 0xc0, 0x4e, 0x22, 0x20, // |9...Uy..Np-..N" |
		0x3c, 0xbf, 0xd8, 0x4f, 0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0xa2, // |<..O......... ..|
		0x00, 0x0f, 0x07, 0x02, 0x00, 0x00, 0x1c, 0x20, 0x62, 0xff, 0x22, 0x92, 0x62, 0xf9, 0xd9, 0x8a, // |....... b.".b...|
		0xc8, 0x84, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, // |...peacecorps.go|
		0x76, 0x00, 0x46, 0x9a, 0x67, 0x17, 0x53, 0x83, 0x35, 0x46, 0xa6, 0x9c, 0xd8, 0x85, 0x74, 0x61, // |v.F.g.S.5F....ta|
		0xe0, 0x1f, 0x13, 0x97, 0x2c, 0xdd, 0xf5, 0x8a, 0x05, 0x29, 0xd7, 0x16, 0xbc, 0x82, 0x13, 0xa2, // |....,....)......|
		0xc7, 0xce, 0x53, 0xc7, 0x10, 0x94, 0x5a, 0xa2, 0xfe, 0x33, 0xfb, 0xcb, 0xa8, 0x34, 0x15, 0x6d, // |..S...Z..3...4.m|
		0x9f, 0x87, 0x37, 0x09, 0xe7, 0xd4, 0xe1, 0x46, 0x3c, 0x95, 0x75, 0x50, 0x99, 0x3e, 0xfb, 0xce, // |..7....F<.uP.>..|
		0xa2, 0xd8, 0x11, 0xc4, 0x6f, 0x92, 0x61, 0x47, 0xed, 0x1a, 0xe3, 0x0c, 0x3e, 0x5d, 0xdd, 0x41, // |....o.aG....>].A|
		0x22, 0x6e, 0xa8, 0x1a, 0xd5, 0x80, 0x10, 0xd9, 0x58, 0x88, 0xfb, 0x46, 0xfa, 0x8d, 0xec, 0x3b, // |"n......X..F...;|
		0x2c, 0xe5, 0x81, 0x4e, 0xa2, 0xad, 0xac, 0xfa, 0x51, 0x39, 0xae, 0x72, 0x67, 0xde, 0xff, 0x9a, // |,..N....Q9.rg...|
		0x11, 0xb1, 0x19, 0xad, 0x81, 0x8e, 0xb2, 0xce, 0x1c, 0xf5, 0xae, 0x4f, 0x09, 0x18, 0xd2, 0x87, // |...........O....|
		0x0e, 0xc4, 0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0xa2, 0x00, 0x1c, // |..........T`....|
		0x07, 0x02, 0x00, 0x00, 0x70, 0x80, 0x62, 0xff, 0xfc, 0x7e, 0x62, 0xfa, 0xae, 0xd4, 0xc8, 0x84, // |....p.b..~b.....|
		0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, // |.peacecorps.gov.|
		0x7c, 0x76, 0x3c, 0xdc, 0x6b, 0x06, 0xca, 0xff, 0xcc, 0x67, 0xec, 0x55, 0x68, 0xea, 0xff, 0xd4, // ||v<.k....g.Uh...|
		0xda, 0xe3, 0xb7, 0x8a, 0xe7, 0x49, 0x74, 0x78, 0xf9, 0xad, 0xcf, 0x09, 0xee, 0x89, 0x24, 0x6f, // |.....Itx......$o|
		0x7d, 0x42, 0xb7, 0xa9, 0xe0, 0x8e, 0x64, 0x67, 0x5f, 0x2b, 0xf2, 0x97, 0xa2, 0x6a, 0x4b, 0xc4, // |}B....dg_+...jK.|
		0xe1, 0xf0, 0xff, 0x1c, 0x37, 0x44, 0xd1, 0xa7, 0xba, 0x7d, 0xb5, 0xaf, 0x72, 0xdd, 0x3e, 0xde, // |....7D...}..r.>.|
		0x70, 0x00, 0x72, 0x29, 0x8a, 0x29, 0x4c, 0xcd, 0x8a, 0x75, 0x96, 0x62, 0x81, 0xa6, 0xc4, 0x23, // |p.r).)L..u.b...#|
		0x2d, 0x84, 0xce, 0x16, 0xfc, 0xdd, 0x1e, 0x99, 0x75, 0x1c, 0x80, 0xbd, 0x3c, 0x4b, 0xad, 0xdf, // |-.......u...<K..|
		0x17, 0x82, 0x3e, 0x6e, 0x22, 0xe1, 0xc7, 0xd7, 0xdf, 0xda, 0x09, 0xcf, 0x7e, 0x1d, 0xa1, 0x88, // |..>n".......~...|
		0xa8, 0x6f, 0x7b, 0xea, 0xe0, 0xf0, 0x2e, 0x8e, 0xa1, 0x53, 0x0e, 0xe4, 0xbc, 0x7a, 0xb4, 0xf0, // |.o{......S...z..|
		0xc0, 0x0c, 0x00, 0x2e, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0xa2, 0x00, 0x02, 0x07, 0x02, // |........T`......|
		0x00, 0x00, 0x70, 0x80, 0x62, 0xff, 0x8a, 0x7f, 0x62, 0xfa, 0x43, 0x6e, 0xc8, 0x84, 0x0a, 0x70, // |..p.b...b.Cn...p|
		0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x03, 0x67, 0x6f, 0x76, 0x00, 0xb0, 0x2e, // |eacecorps.gov...|
		0xe7, 0x33, 0x4f, 0x95, 0x54, 0xfc, 0x71, 0xda, 0xcc, 0x58, 0x60, 0xf8, 0x07, 0xca, 0xfd, 0x4f, // |.3O.T.q..X`....O|
		0xf9, 0x76, 0x83, 0x03, 0xc7, 0x3f, 0xf3, 0x79, 0xfa, 0x1f, 0x24, 0x5f, 0xbf, 0xb6, 0x7c, 0xb8, // |.v...?.y..$_..|.|
		0x16, 0xb2, 0x0f, 0xd3, 0xd4, 0x9f, 0xeb, 0x02, 0x1f, 0x02, 0xb5, 0x7d, 0xa2, 0x31, 0x15, 0x5f, // |...........}.1._|
		0xcb, 0x94, 0x77, 0xa4, 0x9d, 0xb2, 0x9a, 0xf3, 0x45, 0x3c, 0x41, 0x41, 0xe4, 0x05, 0x9e, 0xa0, // |..w.....E<AA....|
		0x71, 0x1a, 0x95, 0x92, 0x5d, 0x47, 0xcf, 0x71, 0x70, 0x66, 0x5e, 0xb5, 0xbc, 0x4a, 0x83, 0x54, // |q...]G.qpf^..J.T|
		0xb6, 0x57, 0x6e, 0x68, 0xb3, 0x38, 0xa9, 0x9e, 0xd7, 0x25, 0xa5, 0x19, 0x73, 0x40, 0x5f, 0xc0, // |.Wnh.8...%..s@_.|
		0x0e, 0x76, 0xac, 0x4b, 0x4d, 0x7a, 0xd4, 0x50, 0x55, 0x15, 0x81, 0xa1, 0x69, 0x73, 0x29, 0x67, // |.v.KMz.PU...is)g|
		0x19, 0x8d, 0xa8, 0x6f, 0x75, 0xbc, 0xf2, 0x23, 0xf7, 0x42, 0x5c, 0xdc, 0xee, 0x6d, 0xc0, 0x0c, // |...ou..#.B\..m..|
		0x00, 0x33, 0x00, 0x01, 0x00, 0x00, 0x03, 0x84, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x0a, 0x07, 0x92, // |.3..............|
		0xe0, 0xc6, 0x98, 0x99, 0xa9, 0x03, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, // |..............T`|
		0x00, 0x59, 0x58, 0x37, 0x30, 0x68, 0x73, 0x50, 0x53, 0x6b, 0x36, 0x73, 0x49, 0x6a, 0x58, 0x7a, // |.YX70hsPSk6sIjXz|
		0x36, 0x75, 0x68, 0x39, 0x71, 0x32, 0x59, 0x55, 0x2f, 0x68, 0x6e, 0x73, 0x43, 0x64, 0x4f, 0x51, // |6uh9q2YU/hnsCdOQ|
		0x30, 0x33, 0x59, 0x7a, 0x59, 0x58, 0x52, 0x69, 0x62, 0x50, 0x38, 0x4e, 0x77, 0x74, 0x79, 0x57, // |03YzYXRibP8NwtyW|
		0x32, 0x47, 0x36, 0x77, 0x56, 0x4c, 0x4e, 0x5a, 0x4e, 0x74, 0x73, 0x46, 0x32, 0x72, 0x52, 0x68, // |2G6wVLNZNtsF2rRh|
		0x47, 0x34, 0x72, 0x30, 0x67, 0x45, 0x50, 0x34, 0x30, 0x6c, 0x53, 0x39, 0x61, 0x74, 0x73, 0x2f, // |G4r0gEP40lS9ats/|
		0x45, 0x76, 0x42, 0x57, 0x68, 0x73, 0x39, 0x7a, 0x41, 0x3d, 0x3d, 0xc0, 0x0c, 0x00, 0x10, 0x00, // |EvBWhs9zA==.....|
		0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x45, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x73, // |...T`.EDgoogle-s|
		0x69, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, // |ite-verification|
		0x3d, 0x67, 0x49, 0x45, 0x5a, 0x55, 0x59, 0x59, 0x39, 0x67, 0x32, 0x2d, 0x31, 0x62, 0x6c, 0x79, // |=gIEZUYY9g2-1bly|
		0x62, 0x76, 0x4c, 0x4e, 0x5f, 0x62, 0x6e, 0x69, 0x45, 0x6f, 0x78, 0x69, 0x65, 0x34, 0x46, 0x57, // |bvLN_bniEoxie4FW|
		0x63, 0x6c, 0x75, 0x6c, 0x48, 0x77, 0x36, 0x44, 0x76, 0x5a, 0x55, 0x55, 0xc0, 0x0c, 0x00, 0x10, // |clulHw6DvZUU....|
		0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0xd0, 0xcf, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20, // |....T`...v=spf1 |
		0x6d, 0x78, 0x20, 0x69, 0x70, 0x34, 0x3a, 0x36, 0x35, 0x2e, 0x32, 0x30, 0x35, 0x2e, 0x32, 0x33, // |mx ip4:65.205.23|
		0x31, 0x2e, 0x31, 0x37, 0x33, 0x20, 0x69, 0x70, 0x34, 0x3a, 0x36, 0x35, 0x2e, 0x32, 0x30, 0x35, // |1.173 ip4:65.205|
		0x2e, 0x32, 0x33, 0x31, 0x2e, 0x31, 0x37, 0x34, 0x20, 0x20, 0x69, 0x70, 0x34, 0x3a, 0x36, 0x35, // |.231.174  ip4:65|
		0x2e, 0x32, 0x30, 0x35, 0x2e, 0x32, 0x33, 0x31, 0x2e, 0x31, 0x37, 0x35, 0x20, 0x20, 0x69, 0x70, // |.205.231.175  ip|
		0x34, 0x3a, 0x36, 0x35, 0x2e, 0x32, 0x30, 0x35, 0x2e, 0x32, 0x33, 0x31, 0x2e, 0x31, 0x37, 0x36, // |4:65.205.231.176|
		0x20, 0x69, 0x70, 0x34, 0x3a, 0x36, 0x38, 0x2e, 0x32, 0x33, 0x32, 0x2e, 0x31, 0x34, 0x30, 0x2e, // | ip4:68.232.140.|
		0x37, 0x38, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a, 0x63, 0x75, 0x73, 0x74, 0x6f, // |78 include:custo|
		0x6d, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, // |mers.clickdimens|
		0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, // |ions.com include|
		0x3a, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x65, // |:amazonses.com e|
		0x78, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x25, 0x7b, 0x69, 0x7d, 0x2e, 0x73, 0x70, 0x66, 0x2e, 0x50, // |xists:%{i}.spf.P|
		0x65, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x68, 0x6d, 0x78, 0x2e, // |eaceCorps.iphmx.|
		0x63, 0x6f, 0x6d, 0x20, 0x7e, 0x61, 0x6c, 0x6c, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // |com ~all........|
		0x54, 0x60, 0x00, 0x5d, 0x5c, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2d, 0x69, 0x64, 0x70, 0x2d, 0x73, // |T`.]\adobe-idp-s|
		0x69, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, // |ite-verification|
		0x3d, 0x63, 0x35, 0x62, 0x64, 0x38, 0x65, 0x39, 0x65, 0x33, 0x38, 0x63, 0x31, 0x39, 0x65, 0x33, // |=c5bd8e9e38c19e3|
		0x39, 0x62, 0x61, 0x62, 0x32, 0x36, 0x66, 0x34, 0x39, 0x36, 0x31, 0x35, 0x66, 0x38, 0x66, 0x65, // |9bab26f49615f8fe|
		0x66, 0x37, 0x38, 0x64, 0x31, 0x38, 0x36, 0x35, 0x66, 0x61, 0x61, 0x32, 0x63, 0x65, 0x38, 0x62, // |f78d1865faa2ce8b|
		0x66, 0x65, 0x30, 0x63, 0x39, 0x34, 0x31, 0x62, 0x30, 0x62, 0x31, 0x64, 0x35, 0x62, 0x64, 0x32, // |fe0c941b0b1d5bd2|
		0x39, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x5f, 0x5e, 0x61, 0x64, // |9........T`._^ad|
		0x6f, 0x62, 0x65, 0x2d, 0x69, 0x64, 0x70, 0x2d, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, // |obe-idp-site-ver|
		0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x63, 0x35, 0x62, 0x64, 0x38, // |ification="c5bd8|
		0x65, 0x39, 0x65, 0x33, 0x38, 0x63, 0x31, 0x39, 0x65, 0x33, 0x39, 0x62, 0x61, 0x62, 0x32, 0x36, // |e9e38c19e39bab26|
		0x66, 0x34, 0x39, 0x36, 0x31, 0x35, 0x66, 0x38, 0x66, 0x65, 0x66, 0x37, 0x38, 0x64, 0x31, 0x38, // |f49615f8fef78d18|
		0x36, 0x35, 0x66, 0x61, 0x61, 0x32, 0x63, 0x65, 0x38, 0x62, 0x66, 0x65, 0x30, 0x63, 0x39, 0x34, // |65faa2ce8bfe0c94|
		0x31, 0x62, 0x30, 0x62, 0x31, 0x64, 0x35, 0x62, 0x64, 0x32, 0x39, 0x22, 0xc0, 0x0c, 0x00, 0x10, // |1b0b1d5bd29"....|
		0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x6d, 0x01, 0x40, 0x04, 0x33, 0x36, 0x30, 0x30, 0x02, // |....T`.m.@.3600.|
		0x49, 0x4e, 0x03, 0x54, 0x58, 0x54, 0x5e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2d, 0x69, 0x64, 0x70, // |IN.TXT^adobe-idp|
		0x2d, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, // |-site-verificati|
		0x6f, 0x6e, 0x3d, 0x22, 0x63, 0x35, 0x62, 0x64, 0x38, 0x65, 0x39, 0x65, 0x33, 0x38, 0x63, 0x31, // |on="c5bd8e9e38c1|
		0x39, 0x65, 0x33, 0x39, 0x62, 0x61, 0x62, 0x32, 0x36, 0x66, 0x34, 0x39, 0x36, 0x31, 0x35, 0x66, // |9e39bab26f49615f|
		0x38, 0x66, 0x65, 0x66, 0x37, 0x38, 0x64, 0x31, 0x38, 0x36, 0x35, 0x66, 0x61, 0x61, 0x32, 0x63, // |8fef78d1865faa2c|
		0x65, 0x38, 0x62, 0x66, 0x65, 0x30, 0x63, 0x39, 0x34, 0x31, 0x62, 0x30, 0x62, 0x31, 0x64, 0x35, // |e8bfe0c941b0b1d5|
		0x62, 0x64, 0x32, 0x39, 0x22, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, // |bd29"........T`.|
		0x59, 0x58, 0x6c, 0x68, 0x51, 0x74, 0x69, 0x43, 0x4c, 0x37, 0x6a, 0x58, 0x62, 0x4c, 0x35, 0x6a, // |YXlhQtiCL7jXbL5j|
		0x38, 0x51, 0x63, 0x55, 0x68, 0x76, 0x53, 0x52, 0x34, 0x51, 0x37, 0x71, 0x43, 0x75, 0x75, 0x64, // |8QcUhvSR4Q7qCuud|
		0x4d, 0x7a, 0x6e, 0x49, 0x41, 0x56, 0x61, 0x33, 0x5a, 0x75, 0x38, 0x71, 0x4c, 0x6a, 0x35, 0x38, // |MznIAVa3Zu8qLj58|
		0x76, 0x6a, 0x5a, 0x51, 0x48, 0x59, 0x6f, 0x78, 0x57, 0x72, 0x41, 0x6b, 0x76, 0x62, 0x41, 0x4a, // |vjZQHYoxWrAkvbAJ|
		0x71, 0x45, 0x79, 0x67, 0x75, 0x46, 0x42, 0x76, 0x30, 0x59, 0x64, 0x53, 0x2b, 0x54, 0x37, 0x6a, // |qEyguFBv0YdS+T7j|
		0x68, 0x2f, 0x6a, 0x57, 0x45, 0x56, 0x2b, 0x51, 0x3d, 0x3d, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, // |h/jWEV+Q==......|
		0x00, 0x00, 0x54, 0x60, 0x00, 0x2b, 0x2a, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2d, 0x64, 0x6f, 0x6d, // |..T`.+*apple-dom|
		0x61, 0x69, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, // |ain-verification|
		0x3d, 0x69, 0x5a, 0x4b, 0x54, 0x30, 0x4f, 0x35, 0x48, 0x72, 0x53, 0x4d, 0x74, 0x68, 0x57, 0x70, // |=iZKT0O5HrSMthWp|
		0x58, 0xc0, 0x0c, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x0e, 0x0d, 0x4d, 0x53, // |X........T`...MS|
		0x3d, 0x6d, 0x73, 0x33, 0x36, 0x39, 0x34, 0x39, 0x30, 0x38, 0x32, 0xc0, 0x0c, 0x00, 0x02, 0x00, // |=ms36949082.....|
		0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x30, 0xc0, 0x0c, 0xc0, 0x0c, 0x00, // |...T`...ns0.....|
		0x02, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x31, 0xc0, 0x0c, 0xc0, // |.....T`...ns1...|
		0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x1c, 0x00, 0x0a, 0x03, 0x6d, 0x78, // |........ .....mx|
		0x31, 0x0a, 0x70, 0x65, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x05, 0x69, 0x70, 0x68, // |1.peacecorps.iph|
		0x6d, 0x78, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x0c, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x1c, // |mx.com..........|
		0x20, 0x00, 0x0b, 0x00, 0x05, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x6d, 0x78, 0xc0, 0x0c, 0xc0, 0x0c, // | .....mailmx....|
		0x00, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x08, 0x00, 0x14, 0x03, 0x6d, 0x78, 0x32, // |....... .....mx2|
		0xca, 0xa1, 0xc0, 0x0c, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x88, 0x01, 0x00, // |.....0....T`....|
		0x03, 0x07, 0x03, 0x01, 0x00, 0x01, 0xb5, 0x39, 0x21, 0x04, 0xc9, 0x1c, 0x06, 0x13, 0xeb, 0x42, // |.......9!......B|
		0x99, 0x6d, 0x07, 0x09, 0xf5, 0x55, 0xed, 0x2e, 0x01, 0xf3, 0x5d, 0xa9, 0xf3, 0xee, 0x05, 0x92, // |.m...U....].....|
		0xc5, 0xac, 0x6a, 0x0b, 0x81, 0x40, 0x62, 0xb1, 0x6c, 0x5f, 0x82, 0xec, 0x32, 0x9c, 0xcf, 0x7b, // |..j..@b.l_..2..{|
		0x71, 0xed, 0x1c, 0xc1, 0x5b, 0x7e, 0x07, 0x99, 0x25, 0x72, 0x13, 0x62, 0x1d, 0x6e, 0xb0, 0x27, // |q...[~..%r.b.n.'|
		0xb5, 0x3b, 0x80, 0x0d, 0x6e, 0xca, 0x66, 0x42, 0x54, 0x5a, 0x74, 0x71, 0x40, 0x95, 0x14, 0x7e, // |.;..n.fBTZtq@..~|
		0xb1, 0x8a, 0xd5, 0xf3, 0xfc, 0x55, 0xc0, 0x3f, 0x6d, 0x7c, 0x79, 0x35, 0x99, 0xb4, 0xff, 0xf1, // |.....U.?m|y5....|
		0xe3, 0xb1, 0x14, 0x08, 0xf1, 0x10, 0x43, 0xba, 0xdb, 0xaf, 0xda, 0x84, 0xf6, 0xa3, 0x67, 0x2b, // |......C.......g+|
		0x6b, 0xa8, 0xd1, 0xc6, 0x29, 0x3d, 0x0f, 0x0c, 0x47, 0x88, 0x21, 0xe6, 0x58, 0xa2, 0x14, 0x39, // |k...)=..G.!.X..9|
		0x2c, 0xb4, 0x5f, 0xe1, 0x51, 0xb1, 0xc0, 0x0c, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, // |,._.Q....0....T`|
		0x01, 0x08, 0x01, 0x01, 0x03, 0x07, 0x03, 0x01, 0x00, 0x01, 0xd0, 0x2e, 0xf1, 0x72, 0x6f, 0x88, // |.............ro.|
		0x4a, 0x57, 0xe0, 0x4f, 0x14, 0x0a, 0xde, 0x2b, 0x52, 0xba, 0xd8, 0xdc, 0x97, 0x33, 0xab, 0xbb, // |JW.O...+R....3..|
		0xf7, 0x6d, 0x41, 0xf9, 0xc6, 0xbe, 0xbd, 0x9a, 0xf9, 0xbe, 0xa6, 0x91, 0x48, 0xf6, 0xa4, 0x4b, // |.mA.........H..K|
		0xdd, 0x7a, 0x9c, 0xdc, 0x3f, 0x17, 0x98, 0xeb, 0xd8, 0xb1, 0xc5, 0xbc, 0x4c, 0x4a, 0x03, 0x2d, // |.z..?.......LJ.-|
		0x76, 0x7b, 0x45, 0x94, 0xbb, 0x37, 0xe7, 0x70, 0x94, 0xbb, 0x59, 0xc5, 0x24, 0x61, 0xf9, 0x3f, // |v{E..7.p..Y.$a.?|
		0x53, 0xae, 0xa3, 0xe7, 0xcf, 0xa6, 0x17, 0x3a, 0x51, 0x56, 0xc0, 0x8d, 0x9e, 0x26, 0x08, 0x46, // |S......:QV...&.F|
		0x95, 0x62, 0xf9, 0x1b, 0xac, 0xf4, 0x8d, 0xe2, 0x55, 0xf0, 0x73, 0xb1, 0x36, 0xa6, 0x4a, 0x8c, // |.b......U.s.6.J.|
		0xdb, 0x82, 0x41, 0xb3, 0x4e, 0x49, 0x07, 0x61, 0x40, 0xe4, 0xf1, 0x53, 0xdc, 0x0d, 0x87, 0x07, // |..A.NI.a@..S....|
		0x45, 0xaa, 0x2c, 0xbb, 0x95, 0xa3, 0xe8, 0xd8, 0xad, 0x2b, 0x62, 0x18, 0x6f, 0x16, 0x1c, 0xaf, // |E.,......+b.o...|
		0x80, 0xdc, 0xbe, 0x48, 0x65, 0xf1, 0x03, 0x0e, 0x5f, 0x77, 0x49, 0x79, 0xea, 0x2d, 0xe4, 0xea, // |...He..._wIy.-..|
		0x9d, 0x26, 0xde, 0xf8, 0xa2, 0x15, 0x34, 0xaa, 0x60, 0x8c, 0x56, 0xb3, 0xa1, 0xae, 0x24, 0xd1, // |.&....4.`.V...$.|
		0x16, 0xec, 0xa4, 0x01, 0x4b, 0xc0, 0x00, 0xdd, 0xf5, 0xb3, 0x1c, 0x7f, 0x5e, 0x8d, 0x4d, 0xb9, // |....K.......^.M.|
		0xc5, 0x90, 0xc4, 0xa0, 0x50, 0xfe, 0x48, 0x01, 0x2c, 0xd3, 0x87, 0x4c, 0x40, 0xb1, 0x49, 0x7e, // |....P.H.,..L@.I~|
		0x04, 0xc1, 0xb7, 0x4b, 0xf7, 0x98, 0x66, 0x77, 0xe7, 0x02, 0x9e, 0x12, 0x5d, 0xd6, 0x2a, 0xa3, // |...K..fw....].*.|
		0x2b, 0xbb, 0x5a, 0x1e, 0x4e, 0x4e, 0xbe, 0x77, 0xfb, 0x18, 0xb0, 0xe0, 0x78, 0xdb, 0x3e, 0xf6, // |+.Z.NN.w....x.>.|
		0x14, 0x6d, 0xea, 0x95, 0xbf, 0x2c, 0x02, 0x91, 0xc4, 0x89, 0x7b, 0x4b, 0x5f, 0x20, 0xc7, 0xcc, // |.m...,....{K_ ..|
		0xd0, 0xc1, 0x8d, 0x60, 0x9e, 0x88, 0xc3, 0x33, 0x39, 0xd9, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, // |...`...39.......|
		0x00, 0x00, 0x54, 0x60, 0x00, 0x10, 0x26, 0x00, 0x1f, 0x16, 0x0b, 0xa1, 0xbb, 0x01, 0xd4, 0x44, // |..T`..&........D|
		0xd4, 0xb5, 0x56, 0x36, 0x43, 0x26, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, // |..V6C&........T`|
		0x00, 0x10, 0x26, 0x00, 0x1f, 0x16, 0x0b, 0xa1, 0xbb, 0x00, 0x45, 0x6d, 0x82, 0x8a, 0x2b, 0x3c, // |..&.......Em..+<|
		0xf4, 0x9b, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x10, 0x26, 0x00, // |..........T`..&.|
		0x1f, 0x16, 0x0b, 0xa1, 0xbb, 0x02, 0xc8, 0xe5, 0x00, 0xf0, 0x98, 0x43, 0x25, 0x32, 0xc0, 0x0c, // |...........C%2..|
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x04, 0x03, 0x80, 0xe3, 0xbc, 0xc0, 0x0c, // |....... ........|
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x04, 0x12, 0xbd, 0x62, 0x07, 0xc0, 0x0c, // |....... ....b...|
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x04, 0x03, 0x89, 0x58, 0x33, 0xc0, 0x0c, // |....... ....X3..|
		0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x54, 0x60, 0x00, 0x21, 0xca, 0x77, 0x08, 0x64, 0x6e, 0x73, // |......T`.!.w.dns|
		0x61, 0x64, 0x6d, 0x69, 0x6e, 0xc0, 0x0c, 0x78, 0x02, 0xd4, 0x45, 0x00, 0x00, 0x2a, 0x30, 0x00, // |admin..x..E..*0.|
		0x00, 0x04, 0x38, 0x00, 0x1b, 0xaf, 0x80, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 0x29, 0x02, 0x00, // |..8..........)..|
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*                                                       */ // |......|
	}
	want := mapstr.M{
		"client": mapstr.M{
			"ip":   "192.168.0.1",
			"port": int64(53),
		},
		"destination": mapstr.M{
			"bytes": int64(3398),
			"ip":    "10.0.0.1",
			"port":  int64(34898),
		},
		"dns": mapstr.M{
			"additionals_count": 0,
			"answers": []mapstr.M{
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "TxQ/sPkf25wkkygJL4SIf64K1uqz9cL9TwKWrLUVPl4W0v4C30w0FswKChAHS2d1XpHoRYzCz1Z1NgEAS6fmRwm3QjG0hJV57OMvHMUm3egLk8wKVdAhCHMOAKZ3LH9oFIC46vMNc0nZIP/aTlVlcRSCrRVcUUR+MhOCP2M2lwc=",
					"expiration":   "20220819160326",
					"inception":    "20220815155149",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "172800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "DNSKEY",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "YqSJCUjyom0wvLC+vUvgqDEwL8GyQwz251Zy7lH21M/4pfad8ANta71ahcYCptwwK15qSTRYB5F6tiChRnIQ9P3oBvB7lcu/u5riSgKXCqifhd7laGioDuCXYzzt6W5MEnMNG8DgPwv07kG32CkVoYUAJLoWOfIsTS+uXXpiip4YuPuHi/nCpQarC82GlTQuyKhrQ+ZFH7qcQRZCUq5AjrZImY4Tjp55jFMUkks34zHLsil/d5ga6FNIEypOVzCugo/nUjQFRAPidNDuNe2wE91h7p/N6hZ9nrs17R5w/0GHI3ATYJNSvgXFXqQRyl6Ea/SUFxkhHUC0qJVXm9VmJg==",
					"expiration":   "20220819160326",
					"inception":    "20220815155149",
					"key_tag":      "20661",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "172800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "DNSKEY",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "K62ul0UkH5E1KfpnEx+QxHYN4o4dLmRGrZ7kWmc3wJwDEnOOSeqzMIKjzIrnz7aKk53KhgdgtELTLMrvS/5MmA1f8yFPO2S+boLmUSDVE6qtHJQTH9h6/ZtGBco4/q5y2/5eADSX/pB5DeXkaShUFOyM9f8vTUImednaZslHDs8=",
					"expiration":   "20220819232830",
					"inception":    "20220815222830",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "28800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "SOA",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "HdBRn84MoDbmlyETKkqJ4Mfn07Fp6fFImLU0dMINjZVgEY5ENNi9QhkLYXScMT33lAMU1T4MxfINjVkkMploFCpMM4rJGIpVAXfJBDWkXHj0Ytzz7Q6hgdnGsHLUqDNu8Oh+hbQPGyCFoonvSxE7xCWbq0g2sbA5/U2IGHXHmpA=",
					"expiration":   "20220819104854",
					"inception":    "20220815101244",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "28800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "TXT",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "mWzsfuJDbZcjIK92lcE2Wafk8Whso/WInBgIrq11sWtbevrnR3yEiRg1BW5moJNf0x5VxoD1vMMZyffzYoFWZSK2+H9NyUwevp6R1NJY6m4HoyWAduta7Ai/Z6lWH41WEmlQ3cQnvmEApxlyOskZf/Gm86smUGVSGUbz3W9Z7SU=",
					"expiration":   "20220819053121",
					"inception":    "20220815051634",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "7200",
					"signer_name":  "peacecorps.gov",
					"ttl":          "7200",
					"type":         "RRSIG",
					"type_covered": "A",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "dvasDabi7LI/MVQfOQh6K45DMWHpE8KRMwyzH1xZ5R9GkMhU6ZuI9KPCIa3lnp2HQjmkv7sXcA4eXPM4gOv4OvodmWPexkSi96MifqlrK8wcOSBTybOeqjbx0yGxlK6P9N4Lu/QbSqTAx+hrObu4r1V5iMpOcC3GwE4iIDy/2E8=",
					"expiration":   "20220819063439",
					"inception":    "20220815062220",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "900",
					"signer_name":  "peacecorps.gov",
					"ttl":          "900",
					"type":         "RRSIG",
					"type_covered": "NSEC3PARAM",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "RppnF1ODNUamnNiFdGHgHxOXLN31igUp1xa8ghOix85TxxCUWqL+M/vLqDQVbZ+HNwnn1OFGPJV1UJk++86i2BHEb5JhR+0a4ww+Xd1BIm6oGtWAENlYiPtG+o3sOyzlgU6iraz6UTmucmfe/5oRsRmtgY6yzhz1rk8JGNKHDsQ=",
					"expiration":   "20220819054138",
					"inception":    "20220815052842",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "7200",
					"signer_name":  "peacecorps.gov",
					"ttl":          "7200",
					"type":         "RRSIG",
					"type_covered": "MX",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "fHY83GsGyv/MZ+xVaOr/1Nrjt4rnSXR4+a3PCe6JJG99Qrep4I5kZ18r8peiakvE4fD/HDdE0ae6fbWvct0+3nAAcimKKUzNinWWYoGmxCMthM4W/N0emXUcgL08S63fF4I+biLhx9ff2gnPfh2hiKhve+rg8C6OoVMO5Lx6tPA=",
					"expiration":   "20220819211126",
					"inception":    "20220815203844",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "28800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "AAAA",
				},
				{
					"algorithm":    "RSASHA1-NSEC3-SHA1",
					"class":        "IN",
					"data":         "sC7nM0+VVPxx2sxYYPgHyv1P+XaDA8c/83n6HyRfv7Z8uBayD9PUn+sCHwK1faIxFV/LlHeknbKa80U8QUHkBZ6gcRqVkl1Hz3FwZl61vEqDVLZXbmizOKme1yWlGXNAX8AOdqxLTXrUUFUVgaFpcylnGY2ob3W88iP3Qlzc7m0=",
					"expiration":   "20220819130503",
					"inception":    "20220815130030",
					"key_tag":      "51332",
					"labels":       "2",
					"name":         "peacecorps.gov",
					"original_ttl": "28800",
					"signer_name":  "peacecorps.gov",
					"ttl":          "21600",
					"type":         "RRSIG",
					"type_covered": "NS",
				},
				{
					"class":      "IN",
					"data":       "92E0C69899A903",
					"flags":      "0",
					"hash":       "SHA1",
					"iterations": "10",
					"name":       "peacecorps.gov",
					"ttl":        "900",
					"type":       "NSEC3PARAM",
				},
				{
					"class": "IN",
					"data":  "70hsPSk6sIjXz6uh9q2YU/hnsCdOQ03YzYXRibP8NwtyW2G6wVLNZNtsF2rRhG4r0gEP40lS9ats/EvBWhs9zA==",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "google-site-verification=gIEZUYY9g2-1blybvLN_bniEoxie4FWclulHw6DvZUU",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "v=spf1 mx ip4:65.205.231.173 ip4:65.205.231.174  ip4:65.205.231.175  ip4:65.205.231.176 ip4:68.232.140.78 include:customers.clickdimensions.com include:amazonses.com exists:%{i}.spf.PeaceCorps.iphmx.com ~all",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "adobe-idp-site-verification=c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "adobe-idp-site-verification=\\\"c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29\\\"",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "@ 3600 IN TXT adobe-idp-site-verification=\\\"c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29\\\"",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "lhQtiCL7jXbL5j8QcUhvSR4Q7qCuudMznIAVa3Zu8qLj58vjZQHYoxWrAkvbAJqEyguFBv0YdS+T7jh/jWEV+Q==",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "apple-domain-verification=iZKT0O5HrSMthWpX",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "MS=ms36949082",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "TXT",
				},
				{
					"class": "IN",
					"data":  "ns0.peacecorps.gov",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "NS",
				},
				{
					"class": "IN",
					"data":  "ns1.peacecorps.gov",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "NS",
				},
				{
					"class":      "IN",
					"data":       "mx1.peacecorps.iphmx.com",
					"name":       "peacecorps.gov",
					"preference": uint16(0xa),
					"ttl":        "7200",
					"type":       "MX",
				},
				{
					"class":      "IN",
					"data":       "mailmx.peacecorps.gov",
					"name":       "peacecorps.gov",
					"preference": uint16(0x5),
					"ttl":        "7200",
					"type":       "MX",
				},
				{
					"class":      "IN",
					"data":       "mx2.peacecorps.iphmx.com",
					"name":       "peacecorps.gov",
					"preference": uint16(0x14),
					"ttl":        "7200",
					"type":       "MX",
				},
				{
					"algorithm": "RSASHA1-NSEC3-SHA1",
					"class":     "IN",
					"data":      "AwEAAbU5IQTJHAYT60KZbQcJ9VXtLgHzXanz7gWSxaxqC4FAYrFsX4LsMpzPe3HtHMFbfgeZJXITYh1usCe1O4ANbspmQlRadHFAlRR+sYrV8/xVwD9tfHk1mbT/8eOxFAjxEEO626/ahPajZytrqNHGKT0PDEeIIeZYohQ5LLRf4VGx",
					"flags":     "256",
					"name":      "peacecorps.gov",
					"protocol":  "3",
					"ttl":       "21600",
					"type":      "DNSKEY",
				},
				{
					"algorithm": "RSASHA1-NSEC3-SHA1",
					"class":     "IN",
					"data":      "AwEAAdAu8XJviEpX4E8UCt4rUrrY3Jczq7v3bUH5xr69mvm+ppFI9qRL3Xqc3D8XmOvYscW8TEoDLXZ7RZS7N+dwlLtZxSRh+T9TrqPnz6YXOlFWwI2eJghGlWL5G6z0jeJV8HOxNqZKjNuCQbNOSQdhQOTxU9wNhwdFqiy7laPo2K0rYhhvFhyvgNy+SGXxAw5fd0l56i3k6p0m3viiFTSqYIxWs6GuJNEW7KQBS8AA3fWzHH9ejU25xZDEoFD+SAEs04dMQLFJfgTBt0v3mGZ35wKeEl3WKqMru1oeTk6+d/sYsOB42z72FG3qlb8sApHEiXtLXyDHzNDBjWCeiMMzOdk=",
					"flags":     "257",
					"name":      "peacecorps.gov",
					"protocol":  "3",
					"ttl":       "21600",
					"type":      "DNSKEY",
				},
				{
					"class": "IN",
					"data":  "2600:1f16:ba1:bb01:d444:d4b5:5636:4326",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "AAAA",
				},
				{
					"class": "IN",
					"data":  "2600:1f16:ba1:bb00:456d:828a:2b3c:f49b",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "AAAA",
				},
				{
					"class": "IN",
					"data":  "2600:1f16:ba1:bb02:c8e5:f0:9843:2532",
					"name":  "peacecorps.gov",
					"ttl":   "21600",
					"type":  "AAAA",
				},
				{
					"class": "IN",
					"data":  "3.128.227.188",
					"name":  "peacecorps.gov",
					"ttl":   "7200",
					"type":  "A",
				},
				{
					"class": "IN",
					"data":  "18.189.98.7",
					"name":  "peacecorps.gov",
					"ttl":   "7200",
					"type":  "A",
				},
				{
					"class": "IN",
					"data":  "3.137.88.51",
					"name":  "peacecorps.gov",
					"ttl":   "7200",
					"type":  "A",
				},
				{
					"class":   "IN",
					"data":    "ns0.peacecorps.gov",
					"expire":  uint32(0x1baf80),
					"minimum": uint32(0x384),
					"name":    "peacecorps.gov",
					"refresh": uint32(0x2a30),
					"retry":   uint32(0x438),
					"rname":   "dnsadmin.peacecorps.gov",
					"serial":  uint32(0x7802d445),
					"ttl":     "21600",
					"type":    "SOA",
				},
			},
			"answers_count":     33,
			"authorities_count": 0,
			"flags": mapstr.M{
				"authentic_data":      true,
				"authoritative":       false,
				"checking_disabled":   false,
				"recursion_available": true,
				"recursion_desired":   true,
				"truncated_response":  false,
			},
			"header_flags": []string{
				"RD",
				"RA",
				"AD",
			},
			"id":      uint16(0xd315),
			"op_code": "QUERY",
			"opt": mapstr.M{
				"do":        false,
				"ext_rcode": "NOERROR",
				"udp_size":  uint16(0x200),
				"version":   "0",
			},
			"question": mapstr.M{
				"class":             "IN",
				"etld_plus_one":     "peacecorps.gov",
				"name":              "peacecorps.gov",
				"registered_domain": "peacecorps.gov",
				"top_level_domain":  "gov",
				"type":              "ANY",
			},
			"resolved_ip": []string{
				"2600:1f16:ba1:bb01:d444:d4b5:5636:4326",
				"2600:1f16:ba1:bb00:456d:828a:2b3c:f49b",
				"2600:1f16:ba1:bb02:c8e5:f0:9843:2532",
				"3.128.227.188",
				"18.189.98.7",
				"3.137.88.51",
			},
			"response_code": "NOERROR",
			"type":          "answer",
		},
		"error": mapstr.M{
			"message": "Response: received without an associated Query",
		},
		"event": mapstr.M{
			"category": []string{
				"network",
			},
			"dataset": "dns",
			"end":     time.Time{}, // Place holder.
			"kind":    "event",
			"type": []string{
				"connection",
				"protocol",
			},
		},
		"method": "QUERY",
		"network": mapstr.M{
			"bytes":        int64(3398),
			"community_id": "1:WP9rmJjBg0OeIDIWbkNRF5whRco=",
			"direction":    "unknown",
			"protocol":     "dns",
			"transport":    "udp",
			"type":         "ipv4",
		},
		"query": "class IN, type ANY, peacecorps.gov",
		"related": mapstr.M{
			"ip": []string{
				"192.168.0.1",
				"10.0.0.1",
				"2600:1f16:ba1:bb01:d444:d4b5:5636:4326",
				"2600:1f16:ba1:bb00:456d:828a:2b3c:f49b",
				"2600:1f16:ba1:bb02:c8e5:f0:9843:2532",
				"3.128.227.188",
				"18.189.98.7",
				"3.137.88.51",
			},
		},
		"resource": "peacecorps.gov",
		"response": "ID 54037; QR response; OPCODE QUERY; FLAGS rd ra ad; RCODE NOERROR; QUESTION class IN, type ANY, peacecorps.gov; ANSWER algorithm RSASHA1-NSEC3-SHA1, expiration 20220819160326, inception 20220815155149, key_tag 51332, labels 2, original_ttl 172800, signer_name peacecorps.gov, type_covered DNSKEY, TxQ/sPkf25wkkygJL4SIf64K1uqz9cL9TwKWrLUVPl4W0v4C30w0FswKChAHS2d1XpHoRYzCz1Z1NgEAS6fmRwm3QjG0hJV57OMvHMUm3egLk8wKVdAhCHMOAKZ3LH9oFIC46vMNc0nZIP/aTlVlcRSCrRVcUUR+MhOCP2M2lwc=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819160326, inception 20220815155149, key_tag 20661, labels 2, original_ttl 172800, signer_name peacecorps.gov, type_covered DNSKEY, YqSJCUjyom0wvLC+vUvgqDEwL8GyQwz251Zy7lH21M/4pfad8ANta71ahcYCptwwK15qSTRYB5F6tiChRnIQ9P3oBvB7lcu/u5riSgKXCqifhd7laGioDuCXYzzt6W5MEnMNG8DgPwv07kG32CkVoYUAJLoWOfIsTS+uXXpiip4YuPuHi/nCpQarC82GlTQuyKhrQ+ZFH7qcQRZCUq5AjrZImY4Tjp55jFMUkks34zHLsil/d5ga6FNIEypOVzCugo/nUjQFRAPidNDuNe2wE91h7p/N6hZ9nrs17R5w/0GHI3ATYJNSvgXFXqQRyl6Ea/SUFxkhHUC0qJVXm9VmJg==; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819232830, inception 20220815222830, key_tag 51332, labels 2, original_ttl 28800, signer_name peacecorps.gov, type_covered SOA, K62ul0UkH5E1KfpnEx+QxHYN4o4dLmRGrZ7kWmc3wJwDEnOOSeqzMIKjzIrnz7aKk53KhgdgtELTLMrvS/5MmA1f8yFPO2S+boLmUSDVE6qtHJQTH9h6/ZtGBco4/q5y2/5eADSX/pB5DeXkaShUFOyM9f8vTUImednaZslHDs8=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819104854, inception 20220815101244, key_tag 51332, labels 2, original_ttl 28800, signer_name peacecorps.gov, type_covered TXT, HdBRn84MoDbmlyETKkqJ4Mfn07Fp6fFImLU0dMINjZVgEY5ENNi9QhkLYXScMT33lAMU1T4MxfINjVkkMploFCpMM4rJGIpVAXfJBDWkXHj0Ytzz7Q6hgdnGsHLUqDNu8Oh+hbQPGyCFoonvSxE7xCWbq0g2sbA5/U2IGHXHmpA=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819053121, inception 20220815051634, key_tag 51332, labels 2, original_ttl 7200, signer_name peacecorps.gov, type_covered A, mWzsfuJDbZcjIK92lcE2Wafk8Whso/WInBgIrq11sWtbevrnR3yEiRg1BW5moJNf0x5VxoD1vMMZyffzYoFWZSK2+H9NyUwevp6R1NJY6m4HoyWAduta7Ai/Z6lWH41WEmlQ3cQnvmEApxlyOskZf/Gm86smUGVSGUbz3W9Z7SU=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819063439, inception 20220815062220, key_tag 51332, labels 2, original_ttl 900, signer_name peacecorps.gov, type_covered NSEC3PARAM, dvasDabi7LI/MVQfOQh6K45DMWHpE8KRMwyzH1xZ5R9GkMhU6ZuI9KPCIa3lnp2HQjmkv7sXcA4eXPM4gOv4OvodmWPexkSi96MifqlrK8wcOSBTybOeqjbx0yGxlK6P9N4Lu/QbSqTAx+hrObu4r1V5iMpOcC3GwE4iIDy/2E8=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819054138, inception 20220815052842, key_tag 51332, labels 2, original_ttl 7200, signer_name peacecorps.gov, type_covered MX, RppnF1ODNUamnNiFdGHgHxOXLN31igUp1xa8ghOix85TxxCUWqL+M/vLqDQVbZ+HNwnn1OFGPJV1UJk++86i2BHEb5JhR+0a4ww+Xd1BIm6oGtWAENlYiPtG+o3sOyzlgU6iraz6UTmucmfe/5oRsRmtgY6yzhz1rk8JGNKHDsQ=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819211126, inception 20220815203844, key_tag 51332, labels 2, original_ttl 28800, signer_name peacecorps.gov, type_covered AAAA, fHY83GsGyv/MZ+xVaOr/1Nrjt4rnSXR4+a3PCe6JJG99Qrep4I5kZ18r8peiakvE4fD/HDdE0ae6fbWvct0+3nAAcimKKUzNinWWYoGmxCMthM4W/N0emXUcgL08S63fF4I+biLhx9ff2gnPfh2hiKhve+rg8C6OoVMO5Lx6tPA=; algorithm RSASHA1-NSEC3-SHA1, expiration 20220819130503, inception 20220815130030, key_tag 51332, labels 2, original_ttl 28800, signer_name peacecorps.gov, type_covered NS, sC7nM0+VVPxx2sxYYPgHyv1P+XaDA8c/83n6HyRfv7Z8uBayD9PUn+sCHwK1faIxFV/LlHeknbKa80U8QUHkBZ6gcRqVkl1Hz3FwZl61vEqDVLZXbmizOKme1yWlGXNAX8AOdqxLTXrUUFUVgaFpcylnGY2ob3W88iP3Qlzc7m0=; flags 0, hash SHA1, iterations 10, 92E0C69899A903; 70hsPSk6sIjXz6uh9q2YU/hnsCdOQ03YzYXRibP8NwtyW2G6wVLNZNtsF2rRhG4r0gEP40lS9ats/EvBWhs9zA==; google-site-verification=gIEZUYY9g2-1blybvLN_bniEoxie4FWclulHw6DvZUU; v=spf1 mx ip4:65.205.231.173 ip4:65.205.231.174  ip4:65.205.231.175  ip4:65.205.231.176 ip4:68.232.140.78 include:customers.clickdimensions.com include:amazonses.com exists:%{i}.spf.PeaceCorps.iphmx.com ~all; adobe-idp-site-verification=c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29; adobe-idp-site-verification=\\\"c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29\\\"; @ 3600 IN TXT adobe-idp-site-verification=\\\"c5bd8e9e38c19e39bab26f49615f8fef78d1865faa2ce8bfe0c941b0b1d5bd29\\\"; lhQtiCL7jXbL5j8QcUhvSR4Q7qCuudMznIAVa3Zu8qLj58vjZQHYoxWrAkvbAJqEyguFBv0YdS+T7jh/jWEV+Q==; apple-domain-verification=iZKT0O5HrSMthWpX; MS=ms36949082; ns0.peacecorps.gov; ns1.peacecorps.gov; mx1.peacecorps.iphmx.com; mailmx.peacecorps.gov; mx2.peacecorps.iphmx.com; algorithm RSASHA1-NSEC3-SHA1, flags 256, protocol 3, AwEAAbU5IQTJHAYT60KZbQcJ9VXtLgHzXanz7gWSxaxqC4FAYrFsX4LsMpzPe3HtHMFbfgeZJXITYh1usCe1O4ANbspmQlRadHFAlRR+sYrV8/xVwD9tfHk1mbT/8eOxFAjxEEO626/ahPajZytrqNHGKT0PDEeIIeZYohQ5LLRf4VGx; algorithm RSASHA1-NSEC3-SHA1, flags 257, protocol 3, AwEAAdAu8XJviEpX4E8UCt4rUrrY3Jczq7v3bUH5xr69mvm+ppFI9qRL3Xqc3D8XmOvYscW8TEoDLXZ7RZS7N+dwlLtZxSRh+T9TrqPnz6YXOlFWwI2eJghGlWL5G6z0jeJV8HOxNqZKjNuCQbNOSQdhQOTxU9wNhwdFqiy7laPo2K0rYhhvFhyvgNy+SGXxAw5fd0l56i3k6p0m3viiFTSqYIxWs6GuJNEW7KQBS8AA3fWzHH9ejU25xZDEoFD+SAEs04dMQLFJfgTBt0v3mGZ35wKeEl3WKqMru1oeTk6+d/sYsOB42z72FG3qlb8sApHEiXtLXyDHzNDBjWCeiMMzOdk=; 2600:1f16:ba1:bb01:d444:d4b5:5636:4326; 2600:1f16:ba1:bb00:456d:828a:2b3c:f49b; 2600:1f16:ba1:bb02:c8e5:f0:9843:2532; 3.128.227.188; 18.189.98.7; 3.137.88.51; rname dnsadmin.peacecorps.gov, ns0.peacecorps.gov; ADDITIONAL ",
		"server": mapstr.M{
			"bytes": int64(3398),
			"ip":    "10.0.0.1",
			"port":  int64(34898),
		},
		"source": mapstr.M{
			"ip":   "192.168.0.1",
			"port": int64(53),
		},
		"status": "Error",
		"type":   "dns",
	}

	var store eventStore
	dns := newDNS(&store, testing.Verbose())
	packet := newPacket(reverse, resp)
	dns.ParseUDP(packet)

	if len(store.events) != 1 {
		t.Fatalf("unexpected number of events, want:1 got:%d", len(store.events))
	}
	got := store.events[0].Fields

	// Ignore time value since event.end is now, but make sure that
	// it is present.
	ignoreTime := cmp.Comparer(func(x, y time.Time) bool { return true })
	if !cmp.Equal(got, want, ignoreTime) {
		t.Errorf("unexpected event result:\n--- got\n+++ want\n%s", cmp.Diff(got, want, ignoreTime))
	}
}
