[[packetbeat-geoip]]
== Exporting GeoIP Information 

You can use Packetbeat along with the
{plugindoc}/ingest-geoip.html[ingest geoIP processor plugin] in Elasticsearch 
to export geographic location information about source IPs for incoming HTTP
requests. Then you can use this info to visualize the location of your
clients on a map in Kibana.

Prior to version 5.0, Packetbeat provided a `geoip` configuration option for
exporting geoIP information about the source IPs.  Starting with 5.0, the
`geoip` configuration option in Beats is deprecated in favor of using the
ingest geoIP processor plugin. This plugin adds information about the
geographical location of IP addresses, based on data from the Maxmind GeoLite2
City Database. Using this plugin provides you with greater flexibility and
control over the information that's returned by the geoIP lookup. 

//REVIEWERS: trying to put some words around why the plugin is better, but I'm not sure if this is completely true. ^^

NOTE: If your use case involves using Logstash, you can use the
{logstashdoc}/plugins-filters-geoip.html[GeoIP filter] available in Logstash
instead of using the ingest plugin. However, using the ingest plugin is the
simplest approach when you don't require the additional processing power of
Logstash.

[float]
[[packetbeat-configuring-geoip]]
=== Configuring the Ingest GeoIP Processor Plugin

To configure Packetbeat and the ingest geoIP processor plugin:

1. {plugindoc}/ingest-geoip.html[Install the ingest geoIP processor plugin].
After installing the plugin, remember to restart the node.

2. Define an ingest node pipeline that uses the `geoip` processor. For example,
you could define the following pipeline in a file named `geoip-pipeline.json`:
+
[source,json]
-------------------------------------------------------------------------------
{
  "description" : "Add geoip info",
  "processors" : [
    {
      "geoip" : {
        "field" : "client_ip",
        "ignore_failure" : true
      }
    }
  ]
}
-------------------------------------------------------------------------------
+
Where `client_ip` is the output field in Packetbeat that contains the IP
address of the client. You set `ignore_failure` to `true` so that the pipeline
does not fail when it processes events that don't have a `client_ip` field. See 
{plugindoc}/using-ingest-geoip.html[Using the Geoip Processor in a Pipeline] for
more options. 

3. Add the pipeline to Elasticsearch. For example:
+
[source,shell]
-------------------------------------------------------------------------------
curl -XPUT 'http://localhost:9200/_ingest/pipeline/geoip-info' -d@geoip-pipeline.json
-------------------------------------------------------------------------------
+
Where `geoip-info` specifies the ID of the new pipeline, and
`geoip-pipeline.json` is the file that defines the pipeline.

4. In the Packetbeat config file, configure the Elasticsearch output to use the
pipeline. Specify the pipeline ID in the `pipeline` option under
`output.elasticsearch`. For example: 
+
[source,yaml]
-------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["localhost:9200"]
  pipeline: geoip-info
-------------------------------------------------------------------------------

5. Before you start Packetbeat, edit the Packetbeat index template,
`packetbeat.template.json`, and add mappings for the "geoip" info. Add the
mappings immediately after the line that closes the mapping for the
"@timestamp" field:
+
[source,yaml]
-------------------------------------------------------------------------------
      "properties": {
        "@timestamp": {
          "type": "date"
        },        
        "geoip": {
          "properties": {
            "continent_name": {
              "type": "keyword",
              "ignore_above": 1024
            },
            "country_iso_code": {
              "type": "keyword",
              "ignore_above": 1024
            },
            "location": {
              "type": "geo_point"
            }
          }
        },          
-------------------------------------------------------------------------------
+
Notice that the mappings set the `location` field a `geo_point` type. A field
of type `geo_point` is required for building tile map visualizations in Kibana.
+
The mappings in this example assume that the ingest plugin will add the geoIP
info to a field called `geoip` (this is the default behavior). If you use the 
`target_field` or `properties` options in the geoIP processor to change or
remove fields, make sure you specify mappings that are consistent with the
fields that will be exported. 
+
See the {elasticsearch}/indices-templates.html[documentation about index
templates] for more info.
+
NOTE: If you've already loaded the default index template, you'll need to
either configure Packetbeat to overwrite the template or load the template
manually before running Packetbeat (see
<<packetbeat-template,Loading the Index Template in Elasticsearch>>).

6. Run Packbeat, passing in the configuration file that you updated earlier.
+
[source,shell]
-------------------------------------------------------------------------------
./packetbeat -e -c packetbeat.yml
-------------------------------------------------------------------------------
+
The event that's sent to Elasticsearch should now include geoIP info.

[float]
[[packetbeat-visualizing-location]]
=== Visualizing the Location of Your Packetbeat Clients

To visualize the location of your Packetbeat clients, you can either create a
new tile map in Kibana, or update the existing map in the Packetbeat dashboard.

To visualize the data:

1. On the Management tab in Kibana, select the `packetbeat-*` index pattern,
and refresh the field list to pick up the `geoip` fields that were added by the
ingest geoIP processor.
+
image:./images/kibana-refresh-index-fields.png[Refresh index fields list]

2. Create a new tile map (see {kibanadoc}/tilemap.html[Tile Maps]), or open the
Packetbeat dashboard, and click the Edit button next to the map widget.

3. Under buckets, expand Geo Coordinates.

4. In the Field list, select `geoip.location`. The `geoip.location` field
contains the latitude and longitude needed to locate points on a map. 
+
If you see a message indicating that the index pattern does not contain the
`geo_point` field type, make sure that you've refreshed the index field list. 

5. Click Apply Changes to see the updated map.
+
image:./images/kibana-update-map.png[Update Packetbeat client location map in Kibana]

6. Save your changes and return to the dashboard. The map in the Packetbeat
dashboard should now show client location information.
