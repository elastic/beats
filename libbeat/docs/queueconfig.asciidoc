[[configuring-internal-queue]]
== Configure the internal queue

{beatname_uc} uses an internal queue to store events before publishing them. The
queue is responsible for buffering and combining events into batches that can
be consumed by the outputs. The outputs will use bulk operations to send a
batch of events in one transaction.

You can configure the type and behavior of the internal queue by setting
options in the `queue` section of the +{beatname_lc}.yml+ config file. Only one
queue type can be configured.


Example configuration:

[source,yaml]
------------------------------------------------------------------------------
queue.mem:
  events: 4096
------------------------------------------------------------------------------

[float]
[[configuration-internal-queue-memory]]
=== Configure the memory queue

The memory queue keeps all events in memory.

If no flush interval and no number of events to flush is configured, 
all events published to this queue will be directly consumed by the outputs.
To enforce spooling in the queue, set the `flush.min_events` and `flush.timeout` options.

By default `flush.min.events` is set to 2048 and `flush.timeout` is set to 1s.

The output's `bulk_max_size` setting limits the number of events being processed at once.

The memory queue waits for the output to acknowledge or drop events. If
the queue is full, no new events can be inserted into the memory queue. Only
after the signal from the output will the queue free up space for more events to be accepted.

This sample configuration forwards events to the output if 512 events are
available or the oldest available event is already waiting for 5s in the queue:

[source,yaml]
------------------------------------------------------------------------------
queue.mem:
  events: 4096
  flush.min_events: 512
  flush.timeout: 5s
------------------------------------------------------------------------------

[float]
==== Configuration options

You can specify the following options in the `queue.mem` section of the +{beatname_lc}.yml+ config file:

[float]
===== `events`

Number of events the queue can store. 

The default value is 4096 events.

[float]
===== `flush.min_events`

Minimum number of events required for publishing. If this value is set to 0, the
output can start publishing events without additional waiting times. Otherwise
the output has to wait for more events to become available.

The default value is 0.

[float]
===== `flush.timeout`

Maximum wait time for `flush.min_events` to be fulfilled. If set to 0s, events
will be immediately available for consumption.

The default values is 0s.

[float]
[[configuration-internal-queue-spool]]
=== Configure the file spool queue

The file spooling queue stores all events in an on disk ring buffer. The spool
has a write buffer, which new events are written to. Events written to the
spool are forwarded to the outputs, only after the write buffer has been
flushed successfully.

The spool waits for the output to acknowledge or drop events. If the spool is
full, no new events can be inserted. The spool will block. Space is freed only
after a signal from the output has been received.

On disk, the spool operates in pages. The `file.page_size` setting configures
the files page size on creation time. The optimal page size depends on the
effective block size, used by the underlying file system.

This sample configuration enables the spool with all default settings and the
default file path:

[source,yaml]
------------------------------------------------------------------------------
queue.spool: ~
------------------------------------------------------------------------------

This sample configuration creates a spool of 512MiB, with 16KiB pages. The
write buffer is flushed if 10MiB of contents, or 1024 events have been
written. If oldest available event is already waiting for 5s in the write
buffer, the buffer will be flushed as well:

[source,yaml]
------------------------------------------------------------------------------
queue.spool:
  file:
    path: "${path.data}/spool.dat"
    size: 512MiB
    page_size: 16KiB
  write:
    buffer_size: 10MiB
    flush.timeout: 5s
    flush.events: 1024
------------------------------------------------------------------------------

[float]
==== Configuration options

You can specify the following options in the `queue.spool` section of the
+{beatname_lc}.yml+ config file:

[float]
===== `file.path`

The spool file path. The file is created on startup, if it does not exist.

The default value is "${path.data}/spool.dat".

===== `file.permissions`

The file permissions. The permissions are applied when the file is
created. In case the file already exists, The file permissions are compared
with `file.permissions`. The spool file is not opened if the actual file
permissions are more permissive then configured.

The default value is 0600.


===== `file.size`

Spool file size. 

The default value is 100 MiB.

Note: The size should be much larger then the expected event sizes
and write buffer size. Otherwise the queue will block, because it has not
enough space.

Note: The file size can not be changed once the file has been generated. This
limitation will be removed in the future.


===== `file.page_size`

The files page size.

The spool file is split into multiple pages of `page_size`. All write
operations write a complete page.

The default value is 4096 (4KiB).

Note: This setting should match the file systems minimum block size. If the
`page_size` is not a multiple of the file systems block size, the file system
might create additional read operations on writes.

Note: The page size is only set on file creation time. It can not be changed
afterwards.


===== `file.prealloc`

If `prealloc` is set to `true`, truncate is used to reserve the space up to
`file.size`. This setting is only used when the file is created.

The file will dynamically grow, if `prealloc` is set to false. The spool
blocks, if `prealloc` is `false` and the system is out of disk space.

The default value is `true`.

===== `write.buffer_size`

The write buffer size. The write buffer is flushed, once the buffer size is exceeded.

Very big events are allowed to be bigger then the configured buffer size. But
the write buffer will be flushed right after the event has been serialized.

The default value is 1MiB.

===== `write.codec`

The event encoding used for serialized events. Valid values are `json` and `cbor`.

The default value is `cbor`.

===== `write.flush.timeout`

Maximum wait time of the oldest event in the write buffer. If set to 0, the
write buffer will only be flushed once `write.flush.events` or `write.buffer_size` is fulfilled.

The default value is 1s.

===== `write.flush.events`

Number of buffered events. The write buffer is flushed once the limit is reached.

The default value is 16384.

===== `read.flush.timeout`

If configured, the `read.flush.timeout` ensures the spool will wait for more
events to be flushed to the spool file, If the number of available events is
less then the outputs `bulk_max_size`.

If `read.flush.timeout` is 0, all available events are forwarded to the output immediately.

The default value is 0s.
