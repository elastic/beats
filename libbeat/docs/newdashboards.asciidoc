[[new-dashboards]]
== Developer Guide: Creating New Kibana Dashboards for a Beat

When contributing to Beats development, you may want to add new dashboards or modify existing ones. To make this easier,
we've created an `import_dashboards` script that you can use to <<import-dashboards,import the dashboards>> from an
existing Beat into Kibana, where you can modify the dashboards or use them as a starting point to create new dashboards. 

Starting with 5.0.0-beta1, the Kibana dashboards are not released as part of the Beat package, they are released in a separate
package, `beats-dashboards`.

Kibana saves the dashboards, along with all the dependencies such as visualizations, searches, and index patterns, in
a special index in Elasticsearch. By default the index is `.kibana`, but you can specify a different index.

When you're done making changes to the dashboards in Kibana, you can use the `export_dashboards` script to <<export-dashboards,export the dashboards>>, along with all dependencies, to a local directory.

To make sure the dashboards are compatible with the latest version of Kibana and Elasticsearch, we
recommend that you use the virtual environment under
https://github.com/elastic/beats/tree/master/testing/environments[beats/testing/environments] to import, create, and
export the Kibana dashboards.

[[import-dashboards]]
=== Importing Existing Beat Dashboards

You can use the `import_dashboards` script to import all the dashboards and the index pattern for a Beat, including the dependencies such as visualizations and searches.
The `import_dashboards` script is available under
https://github.com/elastic/beats/tree/master/libbeat/dashboards[beats/libbeat/dashboards], and it's copied in each Beat package under the `scripts` directory. 


Using the `import_dashboards` script, you can import the dashboards and the index pattern to
Elasticsearch running on localhost for a single Beat (eg. Metricbeat):

- from a local directory:

[source,shell]
----------------------------------------------------------------------
$ ./scripts/import_dashboards -dir kibana/metricbeat
----------------------------------------------------------------------

- from a local zip archive:

[source,shell]
----------------------------------------------------------------------
$ ./scripts/import_dashboards -beat metricbeat -file metricbeat-dashboards-1.1.zip
----------------------------------------------------------------------

- from a zip archive available online:

[source,shell]
-----------------------
$ scripts/import_dashboards -beat metricbeat -url https://github.com/monicasarbu/metricbeat-dashboards/archive/v1.1.zip
-----------------------

NOTE:: When running the `import_dashboards` from the Beat package, the `-beat` option is set automatically to the Beat
name.

The zip archive contains dashboards for at least one Beat. The index pattern, dashboards, visualizations and searches
are available in a separate directory for each Beat, having the name of the Beat. For example the official zip archive (beats-dashboards-{stack-version}) has the following structure:

[source,shell]
-------------------------
  metricbeat/
    dashboard/
    search/
    visualization/
    index-pattern/
  packetbeat/
    dashboard/
    search/
    visualization/
    index-pattern/
  filebeat/
    index-pattern/
  winlogbeat/
    dashboard/
    search/
    visualization/
    index-pattern/
------------------------


If you don't specify the `-url` option, then by default it's set to the official zip archive containing the index
pattern and the dashboards of the official Beats.


For development or community Beats it's easier to run the `import_dashboards` script from the https://github.com/elastic/beats/tree/master/libbeat/dashboards[beats/libbeat/dashboards] directory. In this case, you need to first compile the script:

[source,shell]
-----------------------
$ cd beats/libbeat/dashboards
$ make
-----------------------

And then you can import the index pattern and the dashboards together with visualizations and searches for a single
Beat, by passing the `-beat` option. If the `-beat` option is not specified, by default it imports the dashboards of all
Beats.

For example, to import the Metricbeat dashboards together with visualizations, 
searches and the Metricbeat index pattern:

[source,shell]
-----------------
$ beats/libbeat/dashboards/import_dashboards -beat metricbeat
-----------------


NOTE: You can make use of the Makefile from the Beat GitHub repository to import the
dashboards. If Elasticsearch is running on localhost, then you can run the following command from the Beat repository:

[source,shell]
--------------------------------
$ make import-dashboards
--------------------------------

If Elasticsearch is running on a different host, then you can use the environment `ES_URL`:

[source,shell]
-------------------------------
$ ES_URL="http://192.168.3.206:9200" make import-dashboards
-------------------------------

The command has the following options:

["source","sh",subs="attributes"]
----------------------------------------------------------------------

./import_dashboards -h

Usage: ./import_dashboards [options]

Kibana dashboards are stored in a special index in Elasticsearch together with the searches, visualizations, and indexes that they use.

You can import the dashboards, visualizations, searches, and the index pattern for a single Beat (eg. Metricbeat):
  1. from a local directory:
       	./import_dashboards -dir kibana/metricbeat
  2. from a local zip archive containing dashboards of multiple Beats:
       	./import_dashboards -beat metricbeat -file beats-dashboards-5.0.0-alpha6.zip
  3. from the official zip archive available under http://download.elastic.co/beats/dashboards/beats-dashboards-5.0.0-alpha6.zip:
       	./import_dashboards -beat metricbeat
  4. from any zip archive available online:
    ./import_dashboards -beat metricbeat -url https://github.com/monicasarbu/metricbeat-dashboards/archive/1.1.zip

To import only the index-pattern for a single Beat (eg. Metricbeat) use:
       	./import_dashboards -only-index -beat metricbeat

To import only the dashboards together with visualizations and searches for a single Beat (eg. Metricbeat) use:
       	./import_dashboards -only-dashboards -beat metricbeat

Options:
  -beat string
       	The Beat name, in case a zip archive is passed as input (default "packetbeat")
  -dir string
       	Directory containing the subdirectories: dashboard, visualization, search, index-pattern. Example: etc/kibana/
  -es string
       	Elasticsearch URL (default "http://127.0.0.1:9200")
  -file string
       	Zip archive file containing the Beats dashboards. The archive contains a directory for each Beat.
  -i string
       	The Elasticsearch index name. This overwrites the index name defined in the dashboards and index pattern. Example: metricbeat-*
  -k string
       	Kibana index (default ".kibana")
  -only-dashboards
       	Import only dashboards together with visualizations and searches. By default import both, dashboards and the index-pattern.
  -only-index
       	Import only the index-pattern. By default imports both, dashboards and the index pattern.
  -pass string
       	Password to connect to Elasticsearch. By default no password is passed.
  -url string
       	URL to the zip archive containing the Beats dashboards (default "https://download.elastic.co/beats/dashboards/beats-dashboards-5.0.0-alpha6.zip")
  -user string
       	Username to connect to Elasticsearch. By default no username is passed.
----------------------------------------------------------------------


==== es
The Elasticsearch URL. The default value is http://localhost:9200.

==== user
The username for authenticating the connection to Elasticsearch by using Basic Authentication. By default no username and password are used.


==== pass
The password for authenticating the connection to Elasticsearch by using Basic Authentication. By default no username and password are used.

==== k
The Elasticsearch index pattern where Kibana saves its configuration. The default value is `.kibana`.

==== i
You should only use this option if you want to change the index pattern name that's used by default. For example, if the
default is `metricbeat-*`, you can change it to `custombeat-*`.

==== only-dashboards
If specified, then only the dashboards, along with their visualizations and searches, are imported. The index pattern is
not imported. By default is false.

==== only-index
If specified, then only the index pattern is imported. The dashboards, along with their visualizations and searches, are not imported. By default is false.

==== dir
Local directory that contains the subdirectories: dashboard, visualization, search and index-pattern. The default value is the current directory.

==== file
Local zip archive with the dashboards. The archive can contain Kibana dashboards for a single Beat or for multiple Beats. 

==== url
Zip archive with the dashboards, available online. The archive can contain Kibana dashboards for a single Beat or for
multiple Beats.

==== beat
The Beat name, and it's required when importing from a zip archive. When using the `import_dashboards` from the Beat package, this option is set automatically with the name of
the Beat. When running the script from source, the default value is "", so you need to set this option in order to install the index pattern and
the dashboards for a single Beat. Otherwise it imports the index pattern and the dashboards for all Beats.

[[build-dashboards]]
=== Building your Own Dashboards

For visualizing the dashboards of a Beat in Kibana you need to have configured:

* the Beat index pattern, that specifies how Kibana should display the Beat fields
* the Beat dashboards, including the dependencies such as visualizations and searches

For the Elastic Beats, the index pattern is available in the GitHub repository of each Beat under
`etc/kibana/index-pattern` or under the `beats-dashboards` zip archive, available for each Beat release.

For the community Beats, you can easily generate the index-pattern from the `etc/fields.yml` file. For more details
check the <<generate-index-pattern,generate index pattern>> section.

If you would like to build dashboards from scratch for any Elastic Beats, you can start by importing the same version of the index pattern as your Beat:

[source,shell]
---------------
$ scripts/import_dashboards -only-index -beat metricbeat
---------------

After creating your own dashboards in Kibana, you can <<export-dashboards,export the Kibana dashboards>> to a local
directory, and then <<archive-dashboards,archive the dashboards>> in order to be able to share it with the community.

[[generate-index-pattern]]
=== Generating the Beat Index Pattern

You need to generate again a new index pattern for your Beat, in case you change the fields exported by the Beat. Otherwise
you can just use the index pattern available under `etc/kibana/index-pattern` directory or in the `beats-dashboards`
archive for the Elastic Beats.

The Beat index pattern is generated from the `etc/fields.yml`, where all the fields for a Beat are defined. For each field, besides the `type`, you can configure the
`format` field. The format informs Kibana about how to display a certain field. A good example is `percentage` or `bytes`
to display fields as `50%` or `5MB`.

To generate the index pattern from the `etc/fields.yml`, you need to run the following command in the Beat repository:

[source,shell]
---------------
$ make update
---------------

[[export-dashboards]]
=== Exporting New and Modified Beat Dashboards

To export all the dashboards for any Elastic Beat or any community Beat, including any new or modified dashboards and all dependencies such as
visualizations, searches, you can use the Python script `export_dashboards.py` from
https://github.com/elastic/beats/tree/master/dev-tools[dev-tools]. See the dev-tools
https://github.com/elastic/beats/tree/master/dev-tools/README.md[readme] for more info.


NOTE: You can make use of the Makefile from the Beat GitHub repository to export all the Kibana dashboards for a Beat
from your Elasticsearch. If Elasticsearch is running on localhost, then you just need to run the following command from the Beat repository:

[source,shell]
-----------------------------
$ make export-dashboards
-----------------------------

If the Elasticsearch is running on a different host, then you can use the `ES_URL` variable:

[source,shell]
----------------------------
$ ES_URL="http://192.168.3.206:9200" make export-dashboards
----------------------------


To export only some Kibana dashboards for an Elastic Beat or community Beat, you can simply pass a regular expression to
the `export_dashboards.py` script to match the selected Kibana dashboards.

Before running the `export_dashboards.py` script for the first time, you
need to create an environment that contains all the required Python packages. 

[source,shell]
-------------------------
make python-env
-------------------------

For example, to export all Kibana dashboards that start with the **Packetbeat** name:

[source,shell]
----------------------------------------------------------------------
python ../dev-tools/export_dashboards.py --regex Packetbeat*
----------------------------------------------------------------------

The command has the following options:

[source,shell]
----------------------------------------------------------------------
$ python ../dev-tools/export_dashboards.py -h
usage: export_dashboards.py [-h] [--url URL] --regex REGEX [--kibana KIBANA]
                            [--dir DIR]

Export the Kibana dashboards together with all used visualizations, searches
and index pattern

optional arguments:
  -h, --help       show this help message and exit
  --url URL        Elasticsearch URL. By default: http://localhost:9200
  --regex REGEX    Regular expression to match all the dashboards to be
                   exported. For example: metricbeat*
  --kibana KIBANA  Elasticsearch index where to store the Kibana settings. By
                   default: .kibana
  --dir DIR        Output directory. By default: output
----------------------------------------------------------------------

==== url
The Elasticsearch URL. The default value is http://localhost:9200.

==== regex
Regular expression to match all the Kibana dashboards to be exported. This argument is required.

==== kibana
The Elasticsearch index pattern where Kibana saves its configuration. The default value is `.kibana`.

==== dir
The output directory where the dashboards and all dependencies will be saved. The default value is `output`.

The output directory has the following structure:

[source,shell]
--------------
output/
    index-pattern/
    dashboard/
    visualization/
    search/
--------------

[[archive-dashboards]]
=== Archiving your Own Kibana Dashboards

The Kibana dashboards for the Elastic Beats are saved under the `etc/kibana` directory. To create a zip archive with the
dashboards, including visualizations and searches and the index pattern, you can run the following command in the Beat
repository:

[source,shell]
--------------
$ make package-setup
$ make package-dashboards
--------------

The Makefile is part of libbeat, which means that community Beats contributors can use the commands shown here to
archive dashboards. The dashboards must be available under the `etc/kibana` directory.

Another option would be to create a repository only with the dashboards, and use the GitHub release functionality to 
create a zip archive.

Share the Kibana dashboards archive with the community, so other users can use your cool Kibana visualizations!
