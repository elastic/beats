[[new-beat]]
== Developer Guide: Creating a New Beat

This guide walks you through the steps for creating a new Elastic Beat.  The
Beats are a collection of lightweight daemons that collect operational data from
your servers and ship it to Elasticsearch or Logstash.  The common parts for
all Beats are placed in the libbeat library, which contains packages for sending
data to Elasticsearch and Logstash, for configuration file handling, for signal
handling, for logging, and more. By using this common framework, you can ensure
that all Beats behave consistently and that they are easy to package and run
with common tools.

[[newbeat-getting-ready]]
=== Getting Ready

All Beats are written in http://golang.org/[Go], so having Go installed and knowing
the basics are prerequisites for understanding this guide.
But don't worry if you aren't a Go expert. Go is a relatively new
language, and very few people are experts in it. In fact, several
people learned Go by contributing to Packetbeat and libbeat, including the
original Packetbeat authors.

For general information about contributing to Beats, see our
https://github.com/elastic/beats/blob/master/CONTRIBUTING.md[Contributing Guide].

After you have https://golang.org/doc/install[installed Go] and set up the
https://golang.org/doc/code.html#GOPATH[GOPATH] environment variable to point to
your preferred workspace location, a simple way of getting the source code for 
Beats, including libbeat and the Beat generator, is to do:

[source,shell]
----------------------------------------------------------------------
go get github.com/elastic/beats
----------------------------------------------------------------------

When you run the command, all source files will be downloaded to the
`$GOPATH/src` path. You can ignore the "no buildable Go source files" message because
you will build the source later.

//QUESTION: Wondering if adding sentence about "no buildable Go source files" is the best way to handle this. The problem is that users might be confused because the command returns the message "package github.com/elastic/beats: no buildable Go source files in /Users/dedemorton/workspace/src/github.com/elastic/beats". 

In this guide, we use working examples from the Testbeat source code in
https://github.com/monicasarbu/testbeat[GitHub]
to demonstrate how to implement a Beat. Just copy
the source files and modify them as necessary for your Beat.

//QUESTION: Do we really want users to copy testbeat if they are using the beat generator? Donâ€™t we want them to use the beat generator instead? If we do want them to use testbeat, then shouldn't we tell them to clone it since it's not a part of github.com/elastic/beats? 


=== Overview

At the high level, a simple Beat has two main components:

* a component that collects the actual data, and
* a publisher that sends the data to the specified output, such as Elasticsearch or
Logstash.

The publisher is already implemented in libbeat, so you typically only have to worry about the logic
specific to your Beat (the code that creates the event and sends it to the publisher).
Libbeat also offers common services like configuration management, logging,
daemonzing, and Windows service handling, and in the future, will offer data processing modules,
such as filtering or sampling.

image:./images/beat_overview.png[Beat overview architecture]

The event that you create is a JSON-like object (Golang type `map[string]interface{}`) that
contains the collected data to send to the publisher. At a minimum, the event object
must contain a `@timestamp` field and a `type` field. Beyond
that, events can contain any additional fields, and they can be created as often
as necessary.

The following example shows an event object in Lsbeat:

[source,json]
----------------------------------------------------------------------
{
  "@timestamp": "2016-07-13T21:33:58.355Z",
  "beat": {
    "hostname": "mar.local",
    "name": "mar.local"
  },
  "directory": false,
  "filename": "winlogbeat.yml",
  "filesize": 2895,
  "modtime": "2016-07-13T20:56:21.000Z",
  "path": "./vendor/github.com/elastic/beats/winlogbeat/winlogbeat.yml",
  "type": "lsbeat"
}

{
  "@timestamp": "2016-07-13T21:33:58.354Z",
  "beat": {
    "hostname": "mar.local",
    "name": "mar.local"
  },
  "directory": true,
  "filename": "system",
  "filesize": 238,
  "modtime": "2016-07-13T20:56:21.000Z",
  "path": "./vendor/github.com/elastic/beats/winlogbeat/tests/system",
  "type": "lsbeat"
}
----------------------------------------------------------------------

Now that you have the big picture, let's dig into the code.

=== Generating Your Beat

To generate your own Beat, you use the Beat generator available in the beats repo on GitHub. If you haven't
downloaded the beats repo yet, follow the instructions in <<newbeat-getting-ready>>.

//REVIEWERS: I dont' think it makes sense to repeat the steps that are already described in the Getting Started, so I removed them and added a pointer back to the GS topic. 

Before running the Beat generator, you must install https://github.com/audreyr/cookiecutter[cookiecutter], a
command-line utility that creates projects from project templates. Check out the 
http://cookiecutter.readthedocs.io/en/latest/installation.html[installation guide]. After installing cookiecutter,
decide on a name for your beat. The name must be one word in all lowercase. In our example, we use `testbeat`.

Now create a directory under $GOPATH for your repository and change to the new directory:

[source,shell]
--------------------
mkdir $GOPATH/src/github.com/{user}
cd $GOPATH/src/github.com/{user}
--------------------

Run cookiecutter and specify the path to the Beat generator:

[source,shell]
--------------------
cookiecutter $GOPATH/src/github.com/elastic/beats/generate/beat
--------------------


//REVIEWERS: Deleted $ in the example commands because users say it makes copying/pasting harder

Cookiecutter will prompt you to enter information about your Beat. For the `project_name`, enter `testbeat`.
For the `github_name`, enter your github id. The `beat` and `beat_path` are set to the correct values automatically (just press Enter to accept each default). For the `full_name`, enter your firstname and lastname.

[source,shell]
---------
project_name [Examplebeat]: testbeat
github_name [your-github-name]: {username}
beat [testbeat]:
beat_path [github.com/{github id}]:
full_name [Firstname Lastname]: {Full Name}
---------

You should see a directory called `testbeat` inside of your project folder. 

You now have a raw template of the Beat, but you still need to fetch the dependencies and set up the git repository.

//REVIEWERS: We don't describe how to fetch dependencies or set up the git repo anywhere in the docs. Have we decided to skip talking about the make command in the docs because we want to remove  dependencies like python and the virtualenv? I'm not entirely opposed to pointing off to Jongmin's blog for details about running make and setting up the git repo, but if we do that, we need to be more explicit and we need to agree to update the blog entry whenever it gets out-of-date.  

[[beater-interface]]
=== The Beater interface

Each Beat needs to implement the Beater interface defined in libbeat.

[source,go]
----------------------------------------------------------------------
// Beater is the interface that must be implemented by every Beat. A Beater
// provides the main Run-loop and a Stop method to break the Run-loop.
// Instantiation and Configuration is normally provided by a Beat-`Creator`.
//
// Once the beat is fully configured, the Run() method is invoked. The
// Run()-method implements the beat its run-loop. Once the Run()-method returns,
// the beat shuts down.
//
// The Stop() method is invoked the first time (and only the first time) a
// shutdown signal is received. The Stop()-method normally will stop the Run()-loop,
// such that the beat can gracefully shutdown.
type Beater interface {
	// The main event loop. This method should block until signalled to stop by an
	// invocation of the Stop() method.
	Run(b *Beat) error

	// Stop is invoked to signal that the Run method should finish its execution.
	// It will be invoked at most once.
	Stop()
}
----------------------------------------------------------------------

To implement the Beater interface, you need to define a Beat object that
implements two methods `Run()` and `Stop()`. 

[source,go]
--------------
type Testbeat struct {
	done   chan struct{}
	config config.Config
	client publisher.Client

	...
}

func (bt *Testbeat) Run(b *beat.Beat) error {
	...
}


func (bt *Testbeat) Stop() {
	...
}

--------------

By default, the Beat object contains the following:

- `done`: Channel used by the `Run()` function to stop when the `Stop()` function is called.
- `config`: Configuration options for the Beat
- `client`: Publisher that takes care of sending the events to the
  defined output.

The `Beat` parameter received by the `Run` method contains data about the
Beat, such as the name, version, and common configuration options.

The implementation of these functions is available under `beater/testbeat.go`.

In addition, each Beat needs to implement the `New()` function to create the Beat
object.

This means your Beat should implement the following functions:

[horizontal]
<<new-function, New>>:: Creates the Beat object
<<run-method, Run>>:: Contains the main application loop that captures data
and sends it to the defined output using the publisher
<<stop-method, Stop>>:: Contains logic that is called when the Beat is signaled to stop

For more complex Beats, the optional `FlagsHandler` interface is available.

[source,go]
----------------------------------------------------------------------
// FlagsHandler is an interface that can optionally be implemented by a Beat
// if it needs to process command line flags on startup. If implemented, the
// HandleFlags method will be invoked after parsing the command line flags
// and before any of the Beater interface methods are invoked. There will be
// no callback when '-help' or '-version' are specified.
type FlagsHandler interface {
	HandleFlags(*Beat) error // Handle any custom command line arguments.
}
----------------------------------------------------------------------

You can use the `FlagsHandler` interface to add additional command line flags to
your Beat. The `HandleFlags` callback is called after the Beat parses the
command line arguments inherited from libbeat and handles the `--help` and
`--version` flags. For an example of how to implement `HandleFlags`, take a look
at the https://github.com/elastic/beats/blob/master/packetbeat/beat/packetbeat.go[Packetbeat]
code.

We strongly recommend that you create a main package that contains only the main
method. All your Beat-specific code should go in a separate folder and package.
This will allow other Beats to use the other parts of your Beat as a library, if
needed.

NOTE: To be consistent with other Beats, you should append `beat` to your Beat name.

Let's go through each of the methods in the `Beater` interface and look at a
sample implementation.

[[new-function]]
==== New function


The `New()` function receives the configuration options defined for the Beat and
creates a Beat object based on them. 

The configuration file of the Beat is `testbeat.yml` and it's generated in the
previous step:

[source,yaml]
------------
testbeat:
  # Defines how often an event is sent to the output
  period: 10s
------------

 - `period`: Defines how often to send out events


The recommended way of handling the configuration is to create a
`Config` structure with the configuration options and a `DefaultConfig` with
the default configuration options. 

And here are the corresponding Go structures, which are defined in `config/config.go`:

[source,go]
----------------------------------------------------------------------
package config

import "time"

type Config struct {
	Period time.Duration `config:"period"`
}

var DefaultConfig = Config{
	Period: 1 * time.Second,
}
----------------------------------------------------------------------

Pointers are used to distinguish between when the setting is completely
missing from the configuration file and when it has a value that matches the
type's default value.

The generated `New()` function:

[source,go]
----------
func New(b *beat.Beat, cfg *common.Config) (beat.Beater, error) {
	config := config.DefaultConfig
	if err := cfg.Unpack(&config); err != nil {
		return nil, fmt.Errorf("Error reading config file: %v", err)
	}

	ls := &Testbeat{
		done:   make(chan struct{}),
		config: config,
	}
	return ls, nil
}
-----------


[[run-method]]
==== Run Method

The `Run` method contains your main application loop. 

[source,go]
----------------------------------------------------------------------
func (bt *Testbeat) Run(b *beat.Beat) error {
	logp.Info("testbeat is running! Hit CTRL-C to stop it.")

	bt.client = b.Publisher.Connect()
	ticker := time.NewTicker(bt.config.Period)
	counter := 1
	for {
		select {
		case <-bt.done:
			return nil
		case <-ticker.C:
		}

		event := common.MapStr{ <1>
			"@timestamp": common.Time(time.Now()), <2>
			"type":       b.Name,
			"counter":    counter,
		}
		bt.client.PublishEvent(event) <3>
		logp.Info("Event sent")
		counter++
	}
}
----------------------------------------------------------------------
<1> Create the event object.
<2> Specify a `@timestamp` field of time `common.Time`.
<3> Use the publisher to send the event out to the defined output

Inside the loop, the Beat sleeps for a configurable period of time and then
captures the required data and sends it to the publisher. The publisher client is available as part of the Beat object
through the `client` variable.

The `event := common.MapStr{}` stores the event in a json format, and `bt.client.PublishEvent(event)` is publishing data to Elasticsearch. 
In the generated Beat, there are three fields in the event, which is
@timestamp, type, and counter. 

For more details about how the fields should be named, please check
<<event-conventions, Event conventions>>.

[[stop-method]]
==== Stop Method

The `Stop` method is called when the Beat is signaled to stop, for
example through the SIGTERM signal on Unix systems or the service control
interface on Windows. This method simply closes the channel 
which breaks the main loop.

[source,go]
----------------------------------------------------------------------
func (bt *Testbeat) Stop() {
	bt.client.Close()
	close(bt.done)
}
----------------------------------------------------------------------

==== The main Function

If you follow the `Testbeat` model and put your Beat-specific code in its own type
that implements the `Beater` interface, the code from your main package is
very simple:

[source,go]
----------------------------------------------------------------------
package main

import (
	"os"

	"github.com/elastic/beats/libbeat/beat"

	"github.com/kimjmin/testbeat/beater"
)

func main() {
	err := beat.Run("testbeat", "", beater.New)
	if err != nil {
		os.Exit(1)
	}
}
----------------------------------------------------------------------

[[ls-beat]]
=== Example: Building Lsbeat from Scratch

https://github.com/kimjmin/lsbeat[Lsbeat] is similar to the `ls` command-line tool, but instead of printing the files and subdirectories to the screen,
Lsbeat periodically ships them to Elasticsearch for storage. 

To help you learn how to build a Beat, we've created this http://elastic.co//blog/build-your-own-beat[blog post]
that describes how to build Lsbeat from scratch. The blog post includes additional details about fetching dependencies
and compiling the code. 

//REVIEWERS: I wanted to add a little clarification here because it's initially jarring to come to this section in the doc because it talks about Lsbeat instead of the example that's used in the topics leading up to this one. I hope that flagging this section as an example makes the purpose less ambiguous.


=== Sharing Your Beat with the Community

When you're done with your new Beat, how about letting everyone know? Open
a pull request to add your link <<community-beats, here>>.
