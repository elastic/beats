[[new-beat]]
== Developer Guide: Creating a New Beat

This guide walks you through the steps for creating a new Elastic Beat.  The
Beats are a collection of lightweight daemons that collect operational data from
your servers and ship it to Elasticsearch or Logstash.  The common parts for
all Beats are placed in the libbeat library, which contains packages for sending
data to Elasticsearch and Logstash, for configuration file handling, for signal
handling, for logging, and more. By using this common framework, you can ensure
that all Beats behave consistently and that they are easy to package and run
with common tools.

=== Getting Ready

All Beats are written in http://golang.org/[Go], so having Go installed and knowing
the basics are prerequisites for understanding this guide.
But don't worry if you aren't a Go expert. Go is a relatively new
language, and very few people are experts in it. In fact, several
people learned Go by contributing to Packetbeat and libbeat, including the
original Packetbeat authors.

After you have https://golang.org/doc/install[installed Go] and set up the
https://golang.org/doc/code.html#GOPATH[GOPATH] environment variable to point to
your preferred workspace location, a simple way of getting the source code for 
Beats, including Topbeat and libbeat, and compiling them at the same time is to do:

[source,shell]
----------------------------------------------------------------------
go get github.com/elastic/beats
----------------------------------------------------------------------

In this guide, we use working examples from the Topbeat source code in https://github.com/elastic/beats[GitHub]
to demonstrate how to implement a Beat. Topbeat is similar to
the `top` command line tool, but instead of printing the statistics to the screen,
Topbeat periodically ships them to Elasticsearch for storage.

You can use Topbeat as an example implementation for creating a new Beat. Just copy
the source files and modify them as necessary for your Beat.

=== Overview

At the high level, a simple Beat like Topbeat has two main components:

* a component that collects the actual data, and
* a publisher that sends the data to the specified output, such as Elasticsearch or
Logstash.

The publisher is already implemented in libbeat, so you typically only have to worry about the logic
specific to your Beat (the code that creates the event and sends it to the publisher).
Libbeat also offers common services like configuration management, logging,
daemonizing, and Windows service handling, and in the future, will offer data processing modules,
such as filtering or sampling.

image:./images/beat_overview.png[Beat overview architecture]

The event that you create is a JSON-like object (Golang type `map[string]interface{}`) that
contains the collected data to send to the publisher. At a minimum, the event object
must contain a `@timestamp` field and a `type` field. Beyond
that, events can contain any additional fields, and they can be created as often
as necessary.

The following example shows an event object in Topbeat:

[source,json]
----------------------------------------------------------------------
{
  count":1,
  "proc.cpu":{
    "user":20,
    "percent":0.983284169124877,
    "system":0,
    "total":20,
    "start_time":"20:20"
  },
  "proc.mem":{
    "size":333772,
    "rss":6316,
    "share":2996
  },
  "proc.name":"topbeat",
  "proc.pid":13954,
  "proc.ppid":10027,
  "proc.state":"sleeping",
  "shipper":"vagrant-ubuntu-trusty-64",
  "@timestamp":"2015-08-06T20:20:34.089Z",
  "type":"proc"
}
----------------------------------------------------------------------

Now that you have the big picture, let's dig into the code.

=== Developing the Beat-Specific Code

The Beat-specific code should implement the `Beater` interface defined
in libbeat.

[source,go]
----------------------------------------------------------------------
type Beater interface {
	Config(*Beat) error
	Setup(*Beat) error
	Run(*Beat) error
	Cleanup(*Beat) error
	Stop()
}
----------------------------------------------------------------------

This means your Beat should implement the following methods:

[horizontal]
<<config-method, Config>>:: Deals with the configuration file and optionally with
custom CLI flags
<<setup-method, Setup>>:: Contains logic that executes before the main loop, usually for initialization
<<run-method, Run>>:: Contains the main application loop that captures data
and sends it to the publisher
<<cleanup-method, Cleanup>>:: Contains logic that executes after the main loop finishes
(or is interrupted)
<<stop-method, Stop>>:: Contains logic that is called when the Beat is signaled to stop

The `Beat` parameter received by most of these methods contains data about the
Beat, such as the name, version, and common configuration options.

For more complex Beats, the optional `FlagsHandler` interface is available.

[source,go]
----------------------------------------------------------------------
type FlagsHandler interface {
	HandleFlags(*Beat)
}
----------------------------------------------------------------------

You can use the `FlagsHandler` interface to add additional command line flags to
your Beat. The `HandleFlags` callback is called after the Beat parses the
command line arguments inherited from libbeat and handles the `--help` and
`--version` flags. For an example of how to implement `HandleFlags`, take a look
at the https://github.com/elastic/beats/blob/master/packetbeat/beater/packetbeat.go[Packetbeat]
code.

We strongly recommend that you create a main package that contains only the main
method. All your Beat-specific code should go in a separate folder and package.
This will allow other Beats to use the other parts of your Beat as a library, if
needed.

NOTE: To be consistent with other Beats, you should append `beat` to your Beat name.

Let's go through each of the methods in the `Beater` interface and look at a
sample implementation.

[[config-method]]
==== Config Method

The `Config` method deals with the configuration file and optionally with
custom CLI flags.

The recommended way of handling the configuration is to create a
`ConfigSettings` type that matches the structure of the expected configuration
file. Here is an example configuration section for Topbeat:

[source,yaml]
----------------------------------------------------------------------
input:
  period: 1

  procs: [".*"]
----------------------------------------------------------------------

And here are the corresponding Go structures, which are defined in `config.go`:

[source,go]
----------------------------------------------------------------------
type TopConfig struct {
	Period *int64
	Procs  *[]string
}

type ConfigSettings struct {
	Input TopConfig
}
----------------------------------------------------------------------

Pointers are used to distinguish between when the setting is completely
missing from the configuration file and when it has a value that matches the
type's default value.

With these structures defined, the `Config` method looks like this:


[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Config(b *beat.Beat) error {

	err := cfgfile.Read(&tb.TbConfig, "") <1>
	if err != nil {
		logp.Err("Error reading configuration file: %v", err)
		return err
	}

	if tb.TbConfig.Input.Period != nil { <2>
		tb.period = time.Duration(*tb.TbConfig.Input.Period) * time.Second
	} else {
		tb.period = 1 * time.Second
	}

	[...]

	return nil
}
----------------------------------------------------------------------

<1> Read the configuration.
<2> Set default values for options that are not present in the configuration
    file.

[[setup-method]]
==== Setup Method

The `Setup` method enables you to execute logic before the main
loop, usually for initialization. In the Topbeat implementation, this method
only assigns the Beat object to the Topbeat object, so it doesn't have to be
passed to all sub-functions.

[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Setup(b *beat.Beat) error {

	tb.Beat = b
	return nil
}
----------------------------------------------------------------------

[[run-method]]
==== Run Method

The `Run` method should contain your main application loop. For Topbeat it looks
like this:

[source,go]
----------------------------------------------------------------------
func (t *Topbeat) Run(b *beat.Beat) error {

	t.isAlive = true

	t.initProcStats()

	var err error

	for t.isAlive {
		time.Sleep(t.period)

		err = t.exportSystemStats()
		if err != nil {
			logp.Err("Error reading system stats: %v", err)
		}
		[...]
	}

	return err
}
----------------------------------------------------------------------

Inside the loop, Topbeat sleeps for a configurable period of time and then
captures the required data and sends it to the publisher via the `events`
publisher client. The publisher client is available as part of the Beat object
through the `Beat.Events` variable.

The actual sending is done inside the `exportSystemStats()` method:

[source,go]
----------------------------------------------------------------------

func (t *Topbeat) exportSystemStats() error {

	load_stat, err := GetSystemLoad()
	if err != nil {
		logp.Warn("Getting load statistics: %v", err)
		return err
	}

	[...]

	event := common.MapStr{ <1>
		"@timestamp": common.Time(time.Now()), <2>
		"type":      "system",
		"load":      load_stat,
		"cpu":       cpu_stat,
		"mem":       mem_stat,
		"swap":      swap_stat,
	}

	t.Beat.Events.PublishEvent(event) <3>

	return nil
}
----------------------------------------------------------------------

<1> Create the event object.
<2> Specify a `@timestamp` field of time `common.Time`.
<3> Send the event.

[[cleanup-method]]
==== Cleanup Method

The `Cleanup` method is executed after the main loop finishes (or is interrupted)
and gives you the opportunity to release any resources you might use. For
Topbeat, the method is completely empty:

[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Cleanup(b *beat.Beat) error {
	return nil
}
----------------------------------------------------------------------

[[stop-method]]
==== Stop Method

The `Stop` method is called when the Beat is signaled to stop, for
example through the SIGTERM signal on Unix systems or the service control
interface on Windows. For Topbeat, this method simply sets `isAlive` to
`false`, which breaks the main loop.

[source,go]
----------------------------------------------------------------------
func (t *Topbeat) Stop() {
	t.isAlive = false
}
----------------------------------------------------------------------

==== The main Function

If you follow the Topbeat model and put your Beat-specific code in its own type
that implements the `Beater` interface, the code from your main package is
very simple:

[source,go]
----------------------------------------------------------------------
var Version = "1.0.0"
var Name = "topbeat"

func main() {
	beat.Run(Name, Version, topbeat.New())
}
----------------------------------------------------------------------

We recommend that you implement a `New` function that creates your Beats object.

=== Sharing Your Beat with the Community

When you're done with your new Beat, how about letting everyone know? Open
a pull request to add your link <<community-beats, here>>.
