[id="{beatname_lc}-geoip"]
== Export geoIP information

You can use {beatname_uc} along with the {ref}/geoip-processor.html[geoIP
processor] in {es} to export geographic location information based on client
IPs. Then you can use this information to visualize the location of your clients
on a map in {kib}.

The geoIP processor adds information about the geographical location of
IP addresses, based on data from the Maxmind GeoLite2 City Database. Because the
processor uses a geoIP database that's installed on {es}, you don't need
to install a geoIP database on the machines running {beatname_uc}.

NOTE: If your use case involves using {ls}, you can use the
{logstash-ref}/plugins-filters-geoip.html[GeoIP filter] available in {ls}
instead of using the geoIP processor. However, using the geoIP processor is the
simplest approach when you don't require the additional processing power of
{ls}.

[float]
[id="{beatname_lc}-configuring-geoip"]
=== Configure the geoIP processor

To configure {beatname_uc} and the ingest geoIP processor:

1. Define an ingest node pipeline that uses a `geoip` processor to add location
information to the event. For example, you can use the Console in {kib} to
create the following pipeline:
+
--
[source,json]
-------------------------------------------------------------------------------
PUT _ingest/pipeline/geoip-info
{
  "description": "Add geoip info",
  "processors": [
    {
      "geoip": {
        "field": "client.ip",
        "target_field": "client.geo",
        "ignore_failure": true
      }
    }
  ]
}
-------------------------------------------------------------------------------
//CONSOLE
--
+
The pipeline in this example adds a `client.geo.location` field of type
`geo_point` to the event. The ID of the pipeline is `geoip-info`. `client.ip` is
the field that contains the IP address to use for the geographical lookup. You
set `ignore_failure` to `true` so that the pipeline will continue processing
events when it encounters an event that doesn't have a `client.ip` field.
+
See
{ref}/geoip-processor.html[GeoIP processor] for more options.

2. In the {beatname_uc} config file, configure the {es} output to use the
pipeline. Specify the pipeline ID in the `pipeline` option under
`output.elasticsearch`. For example:
+
[source,yaml]
-------------------------------------------------------------------------------
output.elasticsearch:
  hosts: ["localhost:9200"]
  pipeline: geoip-info
-------------------------------------------------------------------------------

3. Run {beatname_uc}. Remember to use `sudo` if the config file is owned by
root.
+
["source","sh",subs="attributes"]
-------------------------------------------------------------------------------
./{beatname_lc} -e
-------------------------------------------------------------------------------
+
The event that's sent to Elasticsearch should now include the new field, for
example, `client.geo.location`.

ifeval::["{beatname_lc}"=="packetbeat"]
As a convenience, the {beatname_uc} index template already has a mapping defined
for `client.geo.location`. This mapping ensures that the field gets indexed as a
`geo_point`.
endif::[]
ifeval::["{beatname_lc}"!="packetbeat"]
If the field you've added is not already defined as a `geo_point` in the
index template, you need to add a mapping so the field gets indexed as a
`geo-point`. 

// REVIEWERS: Do we want to tell users to add how to update the index template?
// I think that's not so easy to figure out how to do. In fact, with the move to
// using a .yml file, I'm not sure how to do that.
endif::[]


[float]
[id="{beatname_lc}-visualizing-location"]
=== Visualize the location of your {beatname_uc} clients

To visualize the location of your {beatname_uc} clients, you can
ifdef::has_map[]
<<load-kibana-dashboards,set up the example {kib} dashboards>> (if
you haven't already), or
endif::has_map[]
create a new {kibana-ref}/tilemap.html[coordinate map] in {kib} and select the
the location field, for example `client.geo.location`, as the Geohash.

[role="screenshot"]
image:./images/kibana-update-map.png[Update {beatname_uc} client location map in {kib}]

//REVIEWERS: Is the following step still necessary, or can I remove the tip? 

TIP: If the map reports "no results found", and you don't see the field in the
list of available Geohash fields, try refreshing the field list in {kib}. In
{kib}, click *Management* and select the +{beatname_lc}-*+ index pattern.
Refresh the field list to pick up any fields that were added by the ingest geoIP
processor.
