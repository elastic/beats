[[configuration-autodiscover]]
== Autodiscover

When you run applications on containers, they become moving targets to the monitoring system. Autodiscover
allows you to track them and adapt settings as changes happen. By defining configuration templates, the
autodiscover subsystem can monitor services as they start running.

You define autodiscover settings in the  +{beatname_lc}.autodiscover+ section of the +{beatname_lc}.yml+
config file. To enable autodiscover, you specify a list of providers.

[float]
=== Providers

Autodiscover providers work by watching for events on the system and translating those events into internal autodiscover
events with a common format. When you configure the provider, you can use fields from the autodiscover event to set
conditions that, when met, launch specific configurations.

[float]
===== Docker

The Docker autodiscover provider watches for Docker containers to start and stop. These are the available fields on every
event:

  * host
  * port
  * docker.container.id
  * docker.container.image
  * docker.container.name
  * docker.container.labels


For example:

[source,yaml]
-------------------------------------------------------------------------------------
{
  "host": "10.4.15.9",
  "port": 6379,
  "docker": {
    "container": {
      "id": "382184ecdb385cfd5d1f1a65f78911054c8511ae009635300ac28b4fc357ce51"
      "name": "redis",
      "image": "redis:3.2.11",
      "labels": {
        "io.kubernetes.pod.namespace": "default"
        ...
      }
    }
  }
}
-------------------------------------------------------------------------------------

You can define a set of configuration templates to be applied when the condition matches an event. Templates define
a condition to match on autodiscover events, together with the list of configurations to launch when this condition
happens.

Conditions match events from the provider. Providers use the same format for <<conditions>> that
processors use.

Configuration templates can contain variables from the autodiscover event. They can be accessed under the `data` namespace.
For example, with the example event, "`${data.port}`" resolves to `6379`.

include::../../{beatname_lc}/docs/autodiscover-docker-config.asciidoc[]

[float]
===== Kubernetes

The Kubernetes autodiscover provider watches for Kubernetes pods to start, update, and stop. These are the available fields on every
event:

  * host
  * port
  * kubernetes.container.id
  * kubernetes.container.image
  * kubernetes.container.name
  * kubernetes.labels
  * kubernetes.namespace
  * kubernetes.node.name
  * kubernetes.pod.name

If the `include_annotations` config is added to the provider config, then the list of annotations present in the config
are added to the event.

For example:

[source,yaml]
-------------------------------------------------------------------------------------
{
  "host": "172.17.0.21",
  "port": 9090,
  "kubernetes": {
    "container": {
      "id": "bb3a50625c01b16a88aa224779c39262a9ad14264c3034669a50cd9a90af1527",
      "image": "prom/prometheus",
      "name": "prometheus"
    },
    "labels": {
      "project": "prometheus",
      ...
    },
    "namespace": "default",
    "node": {
      "name": "minikube"
    },
    "pod": {
      "name": "prometheus-2657348378-k1pnh"
    }
  },
}
-------------------------------------------------------------------------------------

The configuration of templates and conditions is similar to that of the Docker provider. Configuration templates can
contain variables from the autodiscover event. They can be accessed under data namespace.

include::../../{beatname_lc}/docs/autodiscover-kubernetes-config.asciidoc[]

[[configuration-autodiscover-hints]]
=== Hints based autodiscover

include::../../{beatname_lc}/docs/autodiscover-hints.asciidoc[]

[[configuration-autodiscover-advanced]]
=== Advanced usage

////
Builders are not exposed in docs, as we only have `hints` builder by the moment,
and that's covered in previous section

[float]
==== Builders
Builders allow users to pass hints to autodiscover for it to be able to make decisions
on how and what kind of configuration should be generated. Each Beat can define its own
Builders that it can use. Hints are generated based on all information that is passed to
the provider using a prefix "co.elastic.*". The Kubernetes provider uses annotations and
the Docker provider uses labels to achieve the same.

////

[float]
==== Appenders
Appenders allow users to append configuration that is already built with the help of either templates
or builders. Appenders can be configured to be applied only when a required condition is matched. The kind
of configuration that is applied is specific to each appender.

[float]
===== Config
The config appender can apply a config on top of the config that was generated by
templates or builders. The config is applied whenever a provided condition is matched. It is always
applied if there is no condition provided.

["source","yaml",subs="attributes"]
-------------------------------------------------------------------------------------
metricbeat.autodiscover:
  providers:
    - type: kubernetes
      templates:
        ...
  appenders:
    - type: config
      - condition.equals:
          kubernetes.labels.app: "prometheus"
        config:
          fields:
            type: monitoring
-------------------------------------------------------------------------------------
