# A diagram of the Beats pipeline and the proxy queue's interaction
# with it.
# To regenerate the image after changing this file, run:
#   d2 broker.d2 broker.svg
# To live-edit this file with immediate regeneration of the diagram, run:
#   d2 --watch broker.d2 broker.svg

Input

producer {
    ackHandler
}

queue: Proxy Queue (broker) {
    pushChan
    getChan
}

Input -> producer: Publish
producer.ackHandler -> Input: Event acknowledgment
producer -> queue.pushChan: pushRequest
queue.pushChan -> producer: result

queueReader {
    explanation: |md
        `queueReader` is a worker that reads raw batches (satisfying the  
        `queue.Batch` interface, in this case via `proxyqueue.batch`)  
        from the queue, wraps them in a `publisher.Batch` interface  
        (`ttlBatch`) to support pipeline operations like retry/error  
        handling, and hands them off to `eventConsumer` which  
        distributes them to output workers.
    |
}

queueReader -> queue.getChan: getRequest
queue.getChan -> queueReader: proxyqueue\.batch

eventConsumer -> queueReader: queueReaderRequest
queueReader -> eventConsumer: ttlBatch

eventConsumer {
    explanation: |md
        `eventConsumer` is a worker that distributes event batches to  
        (potentially) multiple output workers. When a batch fails, the  
        output sends it back to `eventConsumer` for redistribution.  
    |
}

out1: Output Worker
out2: ...

eventConsumer -> out1: Publish(ttlBatch)
eventConsumer -> out2

