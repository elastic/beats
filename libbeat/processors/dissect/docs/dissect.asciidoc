[[dissect]]
=== Dissect strings

++++
<titleabbrev>dissect</titleabbrev>
++++

The `dissect` processor tokenizes incoming strings using defined patterns.

[source,yaml]
-------
processors:
  - dissect:
      tokenizer: "%{key1} %{key2} %{key3|convert_datatype}"
      field: "message"
      target_prefix: "dissect"
-------

The `dissect` processor has the following configuration settings:

`tokenizer`:: The field used to define the *dissection* pattern.
              Optional convert datatype can be provided after the key using `|` as separator
              to convert the value from string to integer, long, float, double, boolean or ip.

`field`:: (Optional) The event field to tokenize. Default is `message`.

`target_prefix`:: (Optional) The name of the field where the values will be extracted. When an empty
string is defined, the processor will create the keys at the root of the event. Default is
`dissect`. When the target key already exists in the event, the processor won't replace it and log
an error; you need to either drop or rename the key before using dissect.

For tokenization to be successful, all keys must be found and extracted, if one of them cannot be
found an error will be logged and no modification is done on the original event.

NOTE: A key can contain any characters except reserved suffix or prefix modifiers:  `/`,`&`, `+`, `#`
and `?`.

See <<conditions>> for a list of supported conditions.

[[dissect-example]]
==== Dissect example

For this example, imagine that an application generates the following messages:

[source,sh]
----
"321 - App01 - WebServer is starting"
"321 - App01 - WebServer is up and running"
"321 - App01 - WebServer is scaling 2 pods"
"789 - App02 - Database is will be restarted in 5 minutes"
"789 - App02 - Database is up and running"
"789 - App02 - Database is refreshing tables"
----

Use the `dissect` processor to split each message into two fields, for example,
`service.name` and `service.status`:

[source,yaml]
----
processors:
  - dissect:
      tokenizer: '"%{pid|integer} - %{service.name} - %{service.status}"'
      field: "message"
      target_prefix: ""
----

This configuration produces fields like:

[source,json]
----
"service": {
  "pid": 321,
  "name": "App01",
  "status": "WebServer is up and running"
},
----

`service.name` is an ECS {ref}/keyword.html[keyword field], which means that you
can use it in {es} for filtering, sorting, and aggregations. 

When possible, use ECS-compatible field names. For more information, see the
{ecs-ref}/index.html[Elastic Common Schema] documentation.
