// Code generated by ragel. DO NOT EDIT.
package syslog

import (
    "io"

    "go.uber.org/multierr"
)
%%{
    machine rfc5424;

    write data;
}%%

type machineState struct {
    sdID string
    sdParamName string
    sdValueEscapes []int
}

// ParseRFC5424 parses an RFC 5424-formatted syslog message.
func parseRFC5424(data string) (message, error) {
    var errs error
    var p, cs, tok int

    pe := len(data)
    eof := len(data)
    m := message{
        priority: -1,
    }

    %%{
        include common "common.rl";
        include rfc5424 "rfc5424.rl";

        main := (header sp sd_raw (sp msg)?) $err(err_eof);

        write init;
        write exec;
    }%%

    return m, errs
}

%%{
    machine check;

    write data;
}%%

// isRFC5424 returns true if data is formatted as an RFC 5424 syslog message.
func isRFC5424(data string) bool {
    var isRFC5424 bool
    var p, cs int

    pe := len(data)

    %%{
        action set_true {
            isRFC5424 = true
        }

        include common "common.rl";
        include rfc5424 "rfc5424.rl";

        main := "<" digit+ ">" digit+ sp digit{4} >set_true;

        write init;
        write exec;
    }%%

    return isRFC5424
}

%%{
    machine parse_sd;

    write data;
}%%

// parseStructuredData performs a best effort parsing of the raw structured data value
// extracted from the syslog message. If the raw structured data value is an empty
// string or the nil value ('-'), nil is returned. Otherwise, the value is parsed
// using the format defined by RFC 5424. If the value cannot be parsed, then nil
// is returned.
func parseStructuredData(data string) map[string]interface{} {
    var s machineState
    var p, cs, tok int

    pe := len(data)
    structuredData := map[string]interface{}{}

    if data == "" || data == "-" {
        return nil
    }

    %%{
        include common "common.rl";
        include rfc5424 "rfc5424.rl";

        main := structured_data;

        write init;
        write exec;
    }%%

    if len(structuredData) == 0 {
        return nil
    }

    return structuredData
}
