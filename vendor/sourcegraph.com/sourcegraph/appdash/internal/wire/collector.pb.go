// Code generated by protoc-gen-gogo.
// source: collector.proto
// DO NOT EDIT!

/*
Package wire is a generated protocol buffer package.

It is generated from these files:
	collector.proto

It has these top-level messages:
	CollectPacket
*/
package wire

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CollectPacket is the message sent to a remote collector server by one of
// it's clients.
type CollectPacket struct {
	Spanid           *CollectPacket_SpanID       `protobuf:"group,1,req,name=SpanID" json:"spanid,omitempty"`
	Annotation       []*CollectPacket_Annotation `protobuf:"group,5,rep,name=Annotation" json:"annotation,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CollectPacket) Reset()         { *m = CollectPacket{} }
func (m *CollectPacket) String() string { return proto.CompactTextString(m) }
func (*CollectPacket) ProtoMessage()    {}

func (m *CollectPacket) GetSpanid() *CollectPacket_SpanID {
	if m != nil {
		return m.Spanid
	}
	return nil
}

func (m *CollectPacket) GetAnnotation() []*CollectPacket_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

// SpanID is the group of information which can uniquely identify the exact
// span being collected.
type CollectPacket_SpanID struct {
	// trace is the root ID of the tree that contains all of the spans
	// related to this one.
	Trace *uint64 `protobuf:"fixed64,2,req,name=trace" json:"trace,omitempty"`
	// span is an ID that probabilistically uniquely identifies this span.
	Span *uint64 `protobuf:"fixed64,3,req,name=span" json:"span,omitempty"`
	// parent is the ID of the parent span, if any.
	Parent           *uint64 `protobuf:"fixed64,4,opt,name=parent" json:"parent,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CollectPacket_SpanID) Reset()         { *m = CollectPacket_SpanID{} }
func (m *CollectPacket_SpanID) String() string { return proto.CompactTextString(m) }
func (*CollectPacket_SpanID) ProtoMessage()    {}

func (m *CollectPacket_SpanID) GetTrace() uint64 {
	if m != nil && m.Trace != nil {
		return *m.Trace
	}
	return 0
}

func (m *CollectPacket_SpanID) GetSpan() uint64 {
	if m != nil && m.Span != nil {
		return *m.Span
	}
	return 0
}

func (m *CollectPacket_SpanID) GetParent() uint64 {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return 0
}

// Annotation is any number of annotations for the span to be collected.
type CollectPacket_Annotation struct {
	// key is the annotation's key.
	Key *string `protobuf:"bytes,6,req,name=key" json:"key,omitempty"`
	// value is the annotation's value, which may be either human or
	// machine readable, depending on the schema of the event that
	// generated it.
	Value            []byte `protobuf:"bytes,7,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CollectPacket_Annotation) Reset()         { *m = CollectPacket_Annotation{} }
func (m *CollectPacket_Annotation) String() string { return proto.CompactTextString(m) }
func (*CollectPacket_Annotation) ProtoMessage()    {}

func (m *CollectPacket_Annotation) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CollectPacket_Annotation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}
