import:
  - 'types.yml'

main: |
  package bin

  func TestPrimitives(t *testing.T) {
    {{ range $enc, $long := data.endianess }}
      {{ range $signdness, $long := data.signdness }}
        {{ range $k, $bits := data.bits }}
          {{ invoke "makeBinType" "bits" $bits "name" $signdness "enc" $enc }}
        {{ end }}
      {{ end }}
    {{ end }}
  }

templates.makeBinType: |
  {{ $bits := .bits }}
  {{ $len := div $bits 8 }}
  {{ $name := .name }}
  {{ $enc := .enc }}
  {{ $endianess := index data.endianess $enc  }}
  {{ $inst := capitalize $endianess | printf "%vEndian" }}
  {{ $signdness := index data.signdness $name }}
  {{ $gotype := printf "%v%v" (index data.baseType $name) $bits }}
  {{ $accessor := printf "Uint%v" $bits }}

  {{ $type := printf "%v%v%v" (capitalize $name) $bits $enc }}

  t.Run("{{ $gotype }} {{ $endianess }} endian", func(t *testing.T) {
    var v {{ $type }}
    err := quick.Check(func(in {{ $gotype }}) bool {
      v.Set(in)

      // check raw contents correct encoding
      tmp := make([]byte, v.Len())
      {{ if (eq $bits 8) }}
        tmp[0] = byte(in)
      {{ else }}
        binary.{{ $inst }}.Put{{ $accessor }}(tmp, uint{{ $bits }}(in))
      {{ end }}
      if !bytes.Equal(v[:], tmp) {
        t.Error("encoding mismatch")
        return false
      }

      // check extracted value matches original value
      return v.Get() == in
    }, nil)
    if err != nil {
      t.Error(err)
    }
  })
