// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogs

// The method used to distribute log data to the destination, which can be either
// random or grouped by log stream.
type Distribution string

// Enum values for Distribution
const (
	DistributionRandom      Distribution = "Random"
	DistributionByLogStream Distribution = "ByLogStream"
)

func (enum Distribution) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum Distribution) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type ExportTaskStatusCode string

// Enum values for ExportTaskStatusCode
const (
	ExportTaskStatusCodeCancelled     ExportTaskStatusCode = "CANCELLED"
	ExportTaskStatusCodeCompleted     ExportTaskStatusCode = "COMPLETED"
	ExportTaskStatusCodeFailed        ExportTaskStatusCode = "FAILED"
	ExportTaskStatusCodePending       ExportTaskStatusCode = "PENDING"
	ExportTaskStatusCodePendingCancel ExportTaskStatusCode = "PENDING_CANCEL"
	ExportTaskStatusCodeRunning       ExportTaskStatusCode = "RUNNING"
)

func (enum ExportTaskStatusCode) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum ExportTaskStatusCode) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type OrderBy string

// Enum values for OrderBy
const (
	OrderByLogStreamName OrderBy = "LogStreamName"
	OrderByLastEventTime OrderBy = "LastEventTime"
)

func (enum OrderBy) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum OrderBy) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}

type QueryStatus string

// Enum values for QueryStatus
const (
	QueryStatusScheduled QueryStatus = "Scheduled"
	QueryStatusRunning   QueryStatus = "Running"
	QueryStatusComplete  QueryStatus = "Complete"
	QueryStatusFailed    QueryStatus = "Failed"
	QueryStatusCancelled QueryStatus = "Cancelled"
)

func (enum QueryStatus) MarshalValue() (string, error) {
	return string(enum), nil
}

func (enum QueryStatus) MarshalValueBuf(b []byte) ([]byte, error) {
	b = b[0:0]
	return append(b, enum...), nil
}
