// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an Entity within a Table in an Azure Storage Account.
type TableEntity struct {
	pulumi.CustomResourceState

	// A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
	Entity pulumi.StringMapOutput `pulumi:"entity"`
	// The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.
	PartitionKey pulumi.StringOutput `pulumi:"partitionKey"`
	// The key for the row where the entity will be inserted/merged. Changing this forces a new resource.
	RowKey pulumi.StringOutput `pulumi:"rowKey"`
	// Specifies the storage account in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringOutput `pulumi:"storageAccountName"`
	// The name of the storage table in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewTableEntity registers a new resource with the given unique name, arguments, and options.
func NewTableEntity(ctx *pulumi.Context,
	name string, args *TableEntityArgs, opts ...pulumi.ResourceOption) (*TableEntity, error) {
	if args == nil || args.Entity == nil {
		return nil, errors.New("missing required argument 'Entity'")
	}
	if args == nil || args.PartitionKey == nil {
		return nil, errors.New("missing required argument 'PartitionKey'")
	}
	if args == nil || args.RowKey == nil {
		return nil, errors.New("missing required argument 'RowKey'")
	}
	if args == nil || args.StorageAccountName == nil {
		return nil, errors.New("missing required argument 'StorageAccountName'")
	}
	if args == nil || args.TableName == nil {
		return nil, errors.New("missing required argument 'TableName'")
	}
	if args == nil {
		args = &TableEntityArgs{}
	}
	var resource TableEntity
	err := ctx.RegisterResource("azure:storage/tableEntity:TableEntity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableEntity gets an existing TableEntity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableEntity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableEntityState, opts ...pulumi.ResourceOption) (*TableEntity, error) {
	var resource TableEntity
	err := ctx.ReadResource("azure:storage/tableEntity:TableEntity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableEntity resources.
type tableEntityState struct {
	// A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
	Entity map[string]string `pulumi:"entity"`
	// The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.
	PartitionKey *string `pulumi:"partitionKey"`
	// The key for the row where the entity will be inserted/merged. Changing this forces a new resource.
	RowKey *string `pulumi:"rowKey"`
	// Specifies the storage account in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The name of the storage table in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	TableName *string `pulumi:"tableName"`
}

type TableEntityState struct {
	// A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
	Entity pulumi.StringMapInput
	// The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.
	PartitionKey pulumi.StringPtrInput
	// The key for the row where the entity will be inserted/merged. Changing this forces a new resource.
	RowKey pulumi.StringPtrInput
	// Specifies the storage account in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringPtrInput
	// The name of the storage table in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	TableName pulumi.StringPtrInput
}

func (TableEntityState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableEntityState)(nil)).Elem()
}

type tableEntityArgs struct {
	// A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
	Entity map[string]string `pulumi:"entity"`
	// The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.
	PartitionKey string `pulumi:"partitionKey"`
	// The key for the row where the entity will be inserted/merged. Changing this forces a new resource.
	RowKey string `pulumi:"rowKey"`
	// Specifies the storage account in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The name of the storage table in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a TableEntity resource.
type TableEntityArgs struct {
	// A map of key/value pairs that describe the entity to be inserted/merged in to the storage table.
	Entity pulumi.StringMapInput
	// The key for the partition where the entity will be inserted/merged. Changing this forces a new resource.
	PartitionKey pulumi.StringInput
	// The key for the row where the entity will be inserted/merged. Changing this forces a new resource.
	RowKey pulumi.StringInput
	// Specifies the storage account in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	StorageAccountName pulumi.StringInput
	// The name of the storage table in which to create the storage table entity.
	// Changing this forces a new resource to be created.
	TableName pulumi.StringInput
}

func (TableEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableEntityArgs)(nil)).Elem()
}
