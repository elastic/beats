// mk_audit_arches.pl
// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT

// Copyright 2017 Elasticsearch Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +build ignore

package auparse

/*
#include <audit.h>
*/
import "C"

import "fmt"

// auditArch represents a machine architecture (i.e. arm, ppc, x86_64).
type auditArch uint32

// List of architectures constants used by then kernel.
const (
	AUDIT_ARCH_AARCH64     auditArch = C.AUDIT_ARCH_AARCH64
	AUDIT_ARCH_ARM         auditArch = C.AUDIT_ARCH_ARM
	AUDIT_ARCH_ARMEB       auditArch = C.AUDIT_ARCH_ARMEB
	AUDIT_ARCH_CRIS        auditArch = C.AUDIT_ARCH_CRIS
	AUDIT_ARCH_FRV         auditArch = C.AUDIT_ARCH_FRV
	AUDIT_ARCH_I386        auditArch = C.AUDIT_ARCH_I386
	AUDIT_ARCH_IA64        auditArch = C.AUDIT_ARCH_IA64
	AUDIT_ARCH_M32R        auditArch = C.AUDIT_ARCH_M32R
	AUDIT_ARCH_M68K        auditArch = C.AUDIT_ARCH_M68K
	AUDIT_ARCH_MIPS        auditArch = C.AUDIT_ARCH_MIPS
	AUDIT_ARCH_MIPS64      auditArch = C.AUDIT_ARCH_MIPS64
	AUDIT_ARCH_MIPS64N32   auditArch = C.AUDIT_ARCH_MIPS64N32
	AUDIT_ARCH_MIPSEL      auditArch = C.AUDIT_ARCH_MIPSEL
	AUDIT_ARCH_MIPSEL64    auditArch = C.AUDIT_ARCH_MIPSEL64
	AUDIT_ARCH_MIPSEL64N32 auditArch = C.AUDIT_ARCH_MIPSEL64N32
	AUDIT_ARCH_PARISC      auditArch = C.AUDIT_ARCH_PARISC
	AUDIT_ARCH_PARISC64    auditArch = C.AUDIT_ARCH_PARISC64
	AUDIT_ARCH_PPC         auditArch = C.AUDIT_ARCH_PPC
	AUDIT_ARCH_PPC64       auditArch = C.AUDIT_ARCH_PPC64
	AUDIT_ARCH_PPC64LE     auditArch = C.AUDIT_ARCH_PPC64LE
	AUDIT_ARCH_S390        auditArch = C.AUDIT_ARCH_S390
	AUDIT_ARCH_S390X       auditArch = C.AUDIT_ARCH_S390X
	AUDIT_ARCH_SH          auditArch = C.AUDIT_ARCH_SH
	AUDIT_ARCH_SH64        auditArch = C.AUDIT_ARCH_SH64
	AUDIT_ARCH_SHEL        auditArch = C.AUDIT_ARCH_SHEL
	AUDIT_ARCH_SHEL64      auditArch = C.AUDIT_ARCH_SHEL64
	AUDIT_ARCH_SPARC       auditArch = C.AUDIT_ARCH_SPARC
	AUDIT_ARCH_SPARC64     auditArch = C.AUDIT_ARCH_SPARC64
	AUDIT_ARCH_X86_64      auditArch = C.AUDIT_ARCH_X86_64
)

var auditArchNames = map[auditArch]string{
	AUDIT_ARCH_AARCH64:     "aarch64",
	AUDIT_ARCH_ARM:         "arm",
	AUDIT_ARCH_ARMEB:       "armeb",
	AUDIT_ARCH_CRIS:        "cris",
	AUDIT_ARCH_FRV:         "frv",
	AUDIT_ARCH_I386:        "i386",
	AUDIT_ARCH_IA64:        "ia64",
	AUDIT_ARCH_M32R:        "m32r",
	AUDIT_ARCH_M68K:        "m68k",
	AUDIT_ARCH_MIPS:        "mips",
	AUDIT_ARCH_MIPS64:      "mips64",
	AUDIT_ARCH_MIPS64N32:   "mips64n32",
	AUDIT_ARCH_MIPSEL:      "mipsel",
	AUDIT_ARCH_MIPSEL64:    "mipsel64",
	AUDIT_ARCH_MIPSEL64N32: "mipsel64n32",
	AUDIT_ARCH_PARISC:      "parisc",
	AUDIT_ARCH_PARISC64:    "parisc64",
	AUDIT_ARCH_PPC:         "ppc",
	AUDIT_ARCH_PPC64:       "ppc64",
	AUDIT_ARCH_PPC64LE:     "ppc64le",
	AUDIT_ARCH_S390:        "s390",
	AUDIT_ARCH_S390X:       "s390x",
	AUDIT_ARCH_SH:          "sh",
	AUDIT_ARCH_SH64:        "sh64",
	AUDIT_ARCH_SHEL:        "shel",
	AUDIT_ARCH_SHEL64:      "shel64",
	AUDIT_ARCH_SPARC:       "sparc",
	AUDIT_ARCH_SPARC64:     "sparc64",
	AUDIT_ARCH_X86_64:      "x86_64",
}

func (a auditArch) String() string {
	name, found := auditArchNames[a]
	if found {
		return name
	}

	return fmt.Sprintf("unknown[%x]", uint32(a))
}
