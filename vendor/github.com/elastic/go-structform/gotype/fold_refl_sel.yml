import:
  - types.yml

main: |
  package gotype

  var _reflPrimitivesMapping = map[reflect.Type]reFoldFn{
    {{ range data.primitiveTypes }}
      {{ $t := capitalize . }}
      t{{ $t }}: reFold{{ $t }},
      reflect.SliceOf(t{{ $t }}): reFoldArr{{ $t }},
      reflect.MapOf(tString, t{{ $t }}): reFoldMap{{ $t }},
    {{ end }}
  }

  func getReflectFoldPrimitive(t reflect.Type) reFoldFn {
    return _reflPrimitivesMapping[t]
  }

  func getReflectFoldPrimitiveKind(t reflect.Type) (reFoldFn, error) {
    switch t.Kind() {
    {{ range data.primitiveTypes }}
      {{ $t := capitalize . }}
      case reflect.{{ $t }}:
        return reFold{{ $t }}, nil
    {{ end }}
    default:
      return nil, errUnsupported
    }
  }
