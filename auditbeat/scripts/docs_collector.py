import os
import argparse
import yaml
import six

# Collects docs for all modules and datasets


def collect(base_paths):

    # Always use the docs/ directory, regardless
    # of where this script was called from.
    docs_path = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir, os.pardir, "docs"))

    beat_name = os.path.basename(base_paths[0])

    generated_note = ""

    modules_list = {}

    # Dict: module name -> module path
    module_dirs = {}
    for path in base_paths:
        module_dir = os.path.join(path, "module")
        for module_name in os.listdir(module_dir):
            if os.path.isdir(os.path.join(module_dir, module_name)):
                module_dirs[module_name] = os.path.join(module_dir, module_name)

    # Iterate over all modules
    for module in sorted(module_dirs):
        module_dir = module_dirs[module]

        module_doc = os.path.join(module_dir, "_meta/docs.md")

        # Only check folders where docs.md exists
        if os.path.isfile(module_doc) == False:
            continue

        beat_path = os.path.join(module_dir, "_meta")

        # Load title from fields.yml
        with open(beat_path + "/fields.yml") as f:
            fields = yaml.load(f.read(), Loader=yaml.FullLoader)
            title = fields[0]["title"]
            applies_to = ""
            if "version" in fields[0]:
                version = fields[0]["version"]
                versions = []
                for key, value in version.items():
                    versions.append(f"{key} {value}")
                applies_to = ", ".join(versions)
            elif "release" in fields[0]:
                if fields[0]["release"] != "ga":
                    applies_to = fields[0]["release"]

        module_file = """---
mapped_pages:
  - https://www.elastic.co/guide/en/beats/auditbeat/current/auditbeat-module-{}.html
""".format(module)
        if applies_to != "":
            module_file += """applies_to:
  stack: {}
""".format(applies_to)

        module_file += """---

% This file is generated! See scripts/docs_collector.py

# {} Module [auditbeat-module-{}]

""".format(title, module)
        with open(module_doc) as f:
            module_file += f.read()

        modules_list[module] = {}
        modules_list[module]["title"] = title
        modules_list[module]["applies_to"] = applies_to

        config_file = beat_path + "/config.yml"

        # Add example config file
        if os.path.isfile(config_file):

            module_file += """
## Example configuration [_example_configuration]

The {} module supports the common configuration options that are described under [configuring Auditbeat](/reference/auditbeat/configuration-auditbeat.md). Here is an example configuration:

```yaml
auditbeat.modules:
""".format(title)

            # Load dataset yaml
            with open(config_file) as f:
                module_file += f.read().strip()

            module_file += "\n```\n\n"

        # Close modulename variable
        module_links = ""

        # Iterate over all datasets
        for dataset in sorted(os.listdir(module_dir)):

            dataset_docs = os.path.join(module_dir, dataset, "_meta/docs.md")

            # Only check folders where fields.yml exists
            if not os.path.isfile(dataset_docs):
                continue

            module_links += "* [{}](/reference/auditbeat/auditbeat-dataset-{}-{}.md)\n".format(dataset, module, dataset)

            dataset_file = """---
mapped_pages:
  - https://www.elastic.co/guide/en/beats/auditbeat/current/auditbeat-dataset-{}-{}.html
""".format(module, dataset)
            if applies_to != "":
                dataset_file += """applies_to:
  stack: {}
""".format(applies_to)

            dataset_file += """---

% This file is generated! See scripts/docs_collector.py

# {module_title} {dataset} dataset [auditbeat-dataset-{module}-{dataset}]

""".format(module_title=title, module=module, dataset=dataset)

            with open(dataset_docs) as f:
                dataset_file += f.read()

            # TODO: This should point directly to the exported fields of the dataset, not the whole module
            dataset_file += """
## Fields [_fields]

For a description of each field in the dataset, see the [exported fields](/reference/auditbeat/exported-fields-{}.md) section.

Here is an example document generated by this dataset:

```json
""".format(module)

            data_file = os.path.join(module_dir, dataset, "_meta/data.json")

            # Add data.json example json document
            if os.path.isfile(data_file):
                with open(data_file) as f:
                    dataset_file += f.read().strip()
                dataset_file += "\n```\n"

            # Write dataset docs
            with open(os.path.join(docs_path, "reference", "auditbeat", "auditbeat-dataset-{}-{}.md".format(module, dataset)), 'w') as f:
                f.write(dataset_file)

        if len(module_links) > 0:
            module_file += """## Datasets [_datasets]

The following datasets are available:\n\n"""

            module_file += module_links+"\n"

        # Write module docs
        with open(os.path.join(docs_path, "reference", "auditbeat", "auditbeat-module-{}.md".format(module)), 'w') as f:
            f.write(module_file)

    module_list_output = """---
mapped_pages:
  - https://www.elastic.co/guide/en/beats/auditbeat/current/auditbeat-modules.html
---

% This file is generated! See scripts/docs_collector.py

# Modules [auditbeat-modules]

This section contains detailed information about the metric collecting modules contained in Auditbeat. More details about each module can be found under the links below.

"""

    for m, details in sorted(six.iteritems(modules_list)):
        title = details["title"]
        applies_to = details["applies_to"]
        module_list_output += "* [{}](/reference/auditbeat/auditbeat-module-{}.md)".format(title, m)
        if applies_to:
            module_list_output += " {{applies_to}}`stack: {}`".format(applies_to)
        module_list_output += "\n"

    module_list_output += "\n"

    # Write module link list
    with open(os.path.join(docs_path, "reference", "auditbeat", "auditbeat-modules.md"), 'w') as f:
        f.write(module_list_output)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Collects modules docs")
    parser.add_argument("--base-paths", dest='base_paths', nargs='+', help="Base paths")

    args = parser.parse_args()

    collect(args.base_paths)
